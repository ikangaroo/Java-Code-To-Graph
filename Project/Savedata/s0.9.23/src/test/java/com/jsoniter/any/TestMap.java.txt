{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","hasMethodName":["test_size-TestMap-","test_to_boolean-TestMap-","test_to_int-TestMap-","test_get-TestMap-","test_get_from_nested-TestMap-","test_iterator-TestMap-","test_to_string-TestMap-","mapOf-TestMap-Object"]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_size-TestMap-","callMethodNameReferTo":{"26":"src/main/java/com/jsoniter/any/Any.java-size-Any-","12":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":28,"succs":[[1,7],[23],[6,4,5,3],[],[5],[],[0,1],[10],[9],[],[9,11,12],[9],[14,15,13],[],[],[20,16,17,19,18],[],[21],[22],[21],[22],[],[],[24,26,25],[],[22],[8,27],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_size ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name set ","Simple Name lang ","Method Call Expr ","Simple Name clazz ","String Literal Expr Not Empty  ","Integer Literal Expr Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name size "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_to_boolean-TestMap-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","38":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","23":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","27":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":40,"succs":[[1,9],[2,21],[25,3],[36],[6,8,7,5],[],[7],[],[1,0,2,3],[14],[11],[],[10,11],[12],[16,15,11],[11],[19,18,17],[],[],[20],[],[23,22],[],[24,10],[],[26,12,27],[],[29,30,28],[],[],[33,31,32],[],[34],[35],[],[],[38,37],[],[13,39],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_to_boolean ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Primitive Type int ","Simple Name Map ","Return Stmt ","Unary Expr ++ ","Method Call Expr ","Simple Name set ","Null Literal Expr ","Method Call Expr ","Simple Name mapOf ","Variable Declaration Expr ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name toBoolean ","Method Call Expr ","ASSIGN","Method Call Expr ","Simple Name val ","Name Expr iter ","Method Call Expr ","Boolean Literal Expr false ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Field Access Expr ","Method Call Expr ","Field Access Expr "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_to_int-TestMap-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","24":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","41":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","29":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":43,"succs":[[9,1],[21,2],[27,3],[38],[6,8,7,5],[],[7],[],[3,0,1,2],[14],[11],[],[11,10],[12],[16,15,11],[11],[17,19,18],[],[],[20],[],[23,24,22],[],[25],[26,10],[],[],[12,28,29],[],[32,30,31],[],[],[35,34,33],[],[36],[37],[],[],[41,40,39],[],[37],[42,13],[]],"attribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name encodeShort ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Primitive Type int ","Name Expr any ","Variable Declarator Any any = ","Name Expr Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","Zero IntegerLiteralExpr","Simple Name toInt ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr Any ","Void Type ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Return Stmt ","Class Or Interface Type T ","Method Call Expr ","Simple Name toInt "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_get-TestMap-","callMethodNameReferTo":{"26":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","27":"src/main/java/com/jsoniter/any/Any.java-get-Any-int","12":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":31,"succs":[[1,7],[23],[5,6,3,4],[],[5],[],[1,0],[10],[9],[],[9,12,11],[9],[13,15,14],[],[],[20,17,18,16,19],[],[21],[22],[21],[22],[],[],[25,26,24],[],[22],[27,28],[29,8,30],[],[],[21]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_get ","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type Any ","Name Expr ctx ","Variable Declarator Any any = ","Name Expr val ","Method Call Expr ","Simple Name get ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name get ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_get_from_nested-TestMap-","callMethodNameReferTo":{"33":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","34":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","42":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","43":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","14":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":49,"succs":[[1,8],[30,2],[39],[6,5,7,4],[],[6],[],[1,0,2],[12],[10],[],[10,9],[14,10,13],[10],[16,15,17],[],[],[19,18,20,22,21],[],[23],[26,24,25],[23],[28,27,29],[],[],[23],[23],[],[23],[23],[33,31,32],[],[23],[35,34],[9,36,37,38],[],[],[23],[23],[40,41,42],[],[23],[44,43],[11,46,47,45],[],[],[48],[23],[]],"attribute":["Expression Stmt ","Expression Stmt ","Throw Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_get_from_nested ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name len ","Name Expr any ","Variable Declarator Any any = ","Name Expr com ","Method Call Expr ","Name Expr Any ","Name Expr iter ","Method Call Expr ","Boolean Literal Expr false ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr obj ","Method Call Expr ","StringLiteralExpr","Simple Name mapOf ","Name Expr val ","String Literal Expr Not Empty  ","Simple Name mapOf ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Name Expr val ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","Char Literal Expr '*' ","Char Literal Expr ',' ","'*'"]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_iterator-TestMap-","callMethodNameReferTo":{"17":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","50":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","35":"src/main/java/com/jsoniter/any/Any.java-entries-Any-"},"num":63,"succs":[[12,1],[28,2],[3,37],[45,4],[6,5,46,30],[47,3],[55],[10,11,8,9],[],[10],[],[0,6,3,1,2],[15],[14],[],[16,14,17],[14],[18,19,20],[],[],[21,24,22,25,23],[],[26],[27],[26],[27],[],[],[33],[13],[32,29],[29,30],[31,29],[34,35,29],[29],[36,13],[],[41],[39],[],[39,38],[43,39,42],[39],[44],[],[5],[],[50,48,49,38],[],[31,51],[52,53],[],[32,54],[],[],[56,40,57],[],[61,62,58,59,60],[],[26],[27],[26],[27]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Primitive Type long ","Simple Name test_iterator ","Block Stmt ","Variable Declaration Expr ","Unary Expr ++ ","Simple Name len ","Method Call Expr ","Primitive Type int ","Method Call Expr ","Name Expr val ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Variable Declaration Expr ","Null Literal Expr ","Simple Name data ","Name Expr iter ","Simple Name tail ","Variable Declarator Any.EntryIterator iter = ","Class Or Interface Type EntryIterator ","Method Call Expr ","Simple Name entries ","Variable Declaration Expr ","Name Expr len ","Simple Name map ","Name Expr map ","Variable Declarator HashMap<String, Object> map = ","Expression Stmt ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Block Stmt ","Name Expr iter ","Method Call Expr ","Primitive Type int ","Parameter Object obj ","Method Call Expr ","Simple Name key ","Method Call Expr ","Simple Name toInt ","Simple Name value ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Simple Name field ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"test_to_string-TestMap-","callMethodNameReferTo":{"52":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","12":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","44":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","14":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","31":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":54,"succs":[[1,9],[2,25],[3,40],[49],[6,7,8,5],[],[7],[],[1,2,3,0],[12,11,10],[],[13],[14,15],[],[18,17,16],[],[],[],[20,19,23,21,22],[],[13],[24],[13],[24],[],[29],[27],[],[26,27],[30,31,27],[27],[33,32,34],[],[],[38,36,37,35,39],[],[13],[24],[13],[24],[43,44,42,41],[26,45],[],[13],[48,46,47],[],[],[],[24],[50,52,51],[],[13],[53,28],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_to_string ","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Method Call Expr ","Simple Name toString ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Name Expr buf ","Primitive Type int ","Name Expr any ","Variable Declarator Any any = ","Name Expr ctx ","Method Call Expr ","Name Expr arr ","Name Expr iter ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr JsoniterSpi ","Class Or Interface Type Any ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr count ","Name Expr Any ","Simple Name wrap ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/any/TestMap.java","version":"0.9.23","methodName":"mapOf-TestMap-Object","callMethodNameReferTo":{},"num":56,"succs":[[1,22],[30,5,2,3],[36,3],[31,41,4,40,6],[5,46],[33,44,3,43],[25,7,55],[10,12,11,8,9,13],[9],[],[11,16,14,15],[],[21,18],[0,6,1],[],[],[],[18,20],[],[18,17],[19,18],[],[26],[24],[],[23,24],[27,28,24],[24],[29],[],[4],[35,33,32],[],[31,32],[33],[33,34],[38,37,32],[32],[39],[],[],[42,17],[],[],[45],[],[49,47,23,48],[],[51,50],[52,20],[],[19,34],[35,53,54],[],[45],[]],"attribute":["Expression Stmt ","If Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Assign Expr PLUS ","Return Stmt ","Method Declaration Throws ","PRIVATE","STATIC","Class Or Interface Type Map ","Simple Name mapOf ","Parameter Object... args ","Block Stmt ","Simple Name Map ","Simple Name number ","Class Or Interface Type Object ","Name Expr args ","Simple Name args ","Name Expr args ","Name Expr args ","Class Or Interface Type Object ","Variable Declaration Expr ","Simple Name obj ","Simple Name map ","Simple Name key ","Variable Declarator HashMap<String, Object> map = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Class Or Interface Type T ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Simple Name length ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name put ","Cast Expr ","Simple Name newInstance ","Class Or Interface Type String ","Array Access Expr i ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","ReturnStmt"]}
