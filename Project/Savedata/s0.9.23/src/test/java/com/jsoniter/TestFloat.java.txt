{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","hasMethodName":["test_positive_negative-TestFloat-","test_long_double-TestFloat-","test_ieee_754-TestFloat-","test_decimal_places-TestFloat-","test_combination_of_dot_and_exponent-TestFloat-","test_streaming-TestFloat-","parseFloat-TestFloat-String","parseDouble-TestFloat-String","testBigDecimal-TestFloat-","testChooseDouble-TestFloat-","testInfinity-TestFloat-"]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_positive_negative-TestFloat-","callMethodNameReferTo":{},"num":119,"succs":[[1,14],[2,23],[29,3],[37,4],[43,5],[51],[8,13,10,9,11,7],[],[9],[],[12],[],[],[0,2,3,1,5,4],[16,15,17],[],[],[19,18,21],[],[22,20],[],[67,68,64,63,66,65,10],[],[26,24,25],[],[],[27,28,21],[],[22,20],[31,32,30],[],[],[33,36,34],[],[35,22],[],[99,97,63,98,96,10,95],[40,39,38],[],[],[41,42,36],[],[35,22],[44,45,46],[],[48,47],[49,21,50],[],[],[],[22,20],[52,54,53],[],[48,55],[57,36,56],[],[],[35,22],[72,59,61],[60,61],[74,21,73],[62],[21,85,73],[],[65],[],[71,20],[],[58],[20],[69,20],[],[60],[],[75,76],[80,77,79,78],[],[],[],[81,82],[84],[],[83,69],[],[],[86,87],[88,89,70],[],[],[],[91,93,103],[93,92],[36,104,73],[94],[114,36,73],[96],[],[35,102],[],[90],[35],[35,100],[],[92],[105,106],[110,107,108,109],[],[],[],[111,112],[84],[],[113,100],[],[115,116],[117,101,118],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_positive_negative ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Simple Name toInt ","Method Declaration Throws ","StringLiteralExpr","Expression Stmt ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Expression Stmt ","Return Stmt ","Unary Expr - ","Method Call Expr ","Simple Name lines ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","Name Expr encodeTo ","If Stmt ","Name Expr jsoniterObj ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr Array ","Simple Name parseFloat ","Class Or Interface Type JsonIterator ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Enclosed Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Parameter float newVal ","Simple Name parse ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Class Or Interface Type Object ","Simple Name reportError ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Expr Object.class ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Or Interface Type JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_long_double-TestFloat-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":26,"succs":[[1,10],[22],[7,6,5,4,9,3],[],[5],[],[8],[],[],[1,0],[14],[12],[],[11],[15,16,11],[11],[12,17,19,18],[],[20],[21],[],[],[24,13,23,25],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_TypeDecoder ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Simple Name d ","Name Expr JsonIterator ","Name Expr d ","Variable Declarator double d = ","Simple Name append ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr double.class ","StringLiteralExpr","Primitive Type double ","Expression Stmt ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_ieee_754-TestFloat-","callMethodNameReferTo":{},"num":88,"succs":[[1,10],[19],[9,7,4,6,5,3],[],[5],[],[8],[],[],[1,0],[12,13,11],[],[],[17,14,15],[],[18,16],[],[33,37,36,32,35,34,6],[],[21,20,22],[],[],[23,24,26],[],[25,18],[],[66,68,32,65,67,6,64],[41,28,30],[29,30],[43,17,42],[31],[17,54,42],[],[34],[],[40,16],[],[27],[16],[38,16],[],[29],[],[44,45],[49,46,48,47],[],[],[],[50,51],[53],[],[52,38],[],[],[55,56],[57,39,58],[],[],[],[60,62,72],[62,61],[26,73,42],[63],[83,26,42],[65],[],[25,71],[],[59],[25],[25,69],[],[61],[74,75],[79,76,77,78],[],[],[],[80,81],[53],[],[82,69],[],[84,85],[86,70,87],[],[],[]],"attribute":["Return Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_ieee_754 ","Throws","Simple Name deserialize ","IOException","Block Stmt ","Method Call Expr ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Simple Name toInt ","Method Declaration Throws ","StringLiteralExpr","Expression Stmt ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","If Stmt ","Name Expr jsoniterObj ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr Array ","Simple Name parseFloat ","Class Or Interface Type JsonIterator ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Enclosed Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Parameter float newVal ","Simple Name parse ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Class Or Interface Type Object ","Simple Name reportError ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Expr Object.class ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Or Interface Type JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_decimal_places-TestFloat-","callMethodNameReferTo":{},"num":205,"succs":[[23,1],[35,2],[46,3],[4,55],[62,5],[6,71],[7,78],[8,86],[9,93],[10,101],[11,108],[116,12],[123,13],[14,130],[137],[20,22,17,19,18,16],[],[18],[],[21],[],[],[10,11,0,4,1,14,8,7,2,9,5,6,13,12,3],[26,27,24,25],[],[29,28],[33,30,31],[],[],[],[],[34,32],[],[154,150,153,149,151,152,19],[],[39,38,36,37],[],[41,40],[43,42,45],[],[],[],[],[44,34],[],[183,185,149,182,184,19,181],[48,47,49,50],[],[51,52],[53,45,54],[],[],[],[],[44,34],[59,57,58,56],[],[],[33,61,60],[],[],[34,32],[65,63,66,64],[],[68,67],[69,33,70],[],[],[],[],[34,32],[74,72,75,73],[],[],[76,77,45],[],[],[44,34],[79,82,81,80],[],[68,83],[84,45,85],[],[],[],[44,34],[87,89,90,88],[],[],[33,92,91],[],[],[34,32],[94,95,97,96],[],[68,98],[99,33,100],[],[],[],[34,32],[102,103,105,104],[],[],[107,45,106],[],[],[44,34],[112,111,109,110],[],[68,113],[114,45,115],[],[],[],[44,34],[117,118,119,120],[],[],[122,121,33],[],[],[34,32],[127,124,126,125],[],[],[129,128,45],[],[],[44,34],[131,134,132,133],[],[],[136,135,33],[],[],[34,32],[141,139,140,138],[],[],[143,142,45],[],[],[44,34],[158,145,147],[146,147],[160,33,159],[148],[33,171,159],[],[151],[],[157,32],[],[144],[32],[155,32],[],[146],[],[161,162],[166,163,165,164],[],[],[],[167,168],[170],[],[169,155],[],[],[172,173],[174,175,156],[],[],[],[177,179,189],[179,178],[45,190,159],[180],[200,45,159],[182],[],[44,188],[],[176],[44],[44,186],[],[178],[191,192],[196,193,194,195],[],[],[],[197,198],[170],[],[199,186],[],[201,202],[203,187,204],[],[],[]],"attribute":["Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_decimal_places ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Return Stmt ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name nextToken ","Cast Expr ","String Literal Expr Not Empty  ","Simple Name toInt ","Method Declaration Throws ","StringLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MAX_VALUE ","Class Or Interface Type IOException ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Expression Stmt ","Class Or Interface Type JsonIterator ","Variable Declarator JsonIterator iter = ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name MIN_VALUE ","Name Expr noIndention ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Name Expr clazz ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name deserialize ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Expression Stmt ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","If Stmt ","Name Expr jsoniterObj ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr Array ","Simple Name parseFloat ","Class Or Interface Type JsonIterator ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Enclosed Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Parameter float newVal ","Simple Name parse ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Class Or Interface Type Object ","Simple Name reportError ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Expr Object.class ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Or Interface Type JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_combination_of_dot_and_exponent-TestFloat-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-","17":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":29,"succs":[[1,10],[22],[4,5,7,9,6,3],[],[5],[],[8],[],[],[1,0],[14],[12],[],[11],[11,16,15],[11],[17,18],[12,20,19],[],[],[21],[],[25,24,23,13],[],[26,28,27],[],[],[],[21]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Binary Expr EQUALS ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name v ","Name Expr JsonIterator ","Name Expr v ","Variable Declarator double v = ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Return Stmt ","Method Call Expr ","Double Literal Expr Note Zero  ","Name Expr Double ","Simple Name valueOf ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"test_streaming-TestFloat-","callMethodNameReferTo":{},"num":274,"succs":[[1,14],[2,19],[22],[9,4,11,7,8,5,6],[],[],[7],[],[10],[],[],[2,1,0],[13],[],[17,16,15],[],[],[18],[],[20,21],[],[31,34,32,8,5,33],[24,23],[],[96,97,94,95,8,5],[26,35],[27,44],[50,28],[58,29],[64,30],[72],[32],[],[],[25,27,28,26,30,29],[37,36,38],[],[],[40,39,42],[],[43,41],[],[223,222,219,218,220,221,8],[],[47,45,46],[],[],[48,49,42],[],[43,41],[52,53,51],[],[],[54,57,55],[],[56,43],[],[252,254,218,253,251,8,250],[61,60,59],[],[],[62,63,57],[],[56,43],[66,65,67],[],[69,68],[70,42,71],[],[],[],[43,41],[73,75,74],[],[69,76],[78,57,77],[],[],[56,43],[98,80],[107,81],[116,82],[83,125],[132,84],[85,140],[86,147],[87,155],[88,162],[89,170],[90,177],[185,91],[192,92],[93,199],[206],[95],[],[],[89,90,79,83,80,93,87,86,81,88,84,85,92,91,82],[101,102,99,100],[],[104,103],[42,106,105],[],[],[],[],[43,41],[111,108,110,109],[],[113,112],[115,114,57],[],[],[],[],[56,43],[118,117,119,120],[],[121,122],[123,57,124],[],[],[],[],[56,43],[129,127,128,126],[],[],[42,130,131],[],[],[43,41],[135,133,134,136],[],[69,137],[138,42,139],[],[],[],[43,41],[141,143,144,142],[],[],[145,146,57],[],[],[56,43],[148,151,150,149],[],[69,152],[153,57,154],[],[],[],[56,43],[156,157,158,159],[],[],[42,161,160],[],[],[43,41],[163,164,166,165],[],[69,167],[168,42,169],[],[],[],[43,41],[171,172,174,173],[],[],[176,57,175],[],[],[56,43],[181,180,178,179],[],[69,182],[183,57,184],[],[],[],[56,43],[186,187,188,189],[],[],[191,190,42],[],[],[43,41],[196,193,195,194],[],[],[198,197,57],[],[],[56,43],[200,203,201,202],[],[],[205,204,42],[],[],[43,41],[210,208,207,209],[],[],[212,211,57],[],[],[56,43],[227,214,216],[215,216],[229,42,228],[217],[42,240,228],[],[220],[],[226,41],[],[213],[41],[224,41],[],[215],[],[230,231],[232,235,234,233],[],[],[],[236,237],[239],[],[238,224],[],[],[241,242],[243,225,244],[],[],[],[246,248,258],[248,247],[57,259,228],[249],[269,57,228],[251],[],[56,257],[],[245],[56],[56,255],[],[247],[260,261],[265,262,263,264],[],[],[],[266,267],[239],[],[268,255],[],[270,271],[272,256,273],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_streaming ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Assign Expr ASSIGN ","Class Or Interface Type TestObject3 ","ASSIGN","This Expr ","true","Class Or Interface Type HashMap ","Simple Name test_positive_negative ","Method Declaration Throws ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name test_positive_negative ","Class Or Interface Type IOException ","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Simple Name toInt ","Method Declaration Throws ","StringLiteralExpr","Expression Stmt ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Expression Stmt ","Return Stmt ","Unary Expr - ","Method Call Expr ","Simple Name lines ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","Name Expr encodeTo ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Primitive Type long ","Simple Name test_decimal_places ","Class Or Interface Type IOException ","Block Stmt ","Method Call Expr ","Return Stmt ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name nextToken ","Cast Expr ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MAX_VALUE ","Class Or Interface Type IOException ","String Literal Expr Not Empty  ","Expression Stmt ","Class Or Interface Type JsonIterator ","Variable Declarator JsonIterator iter = ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name MIN_VALUE ","Name Expr noIndention ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Name Expr clazz ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name deserialize ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Expression Stmt ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","If Stmt ","Name Expr jsoniterObj ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr Array ","Simple Name parseFloat ","Class Or Interface Type JsonIterator ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Enclosed Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Parameter float newVal ","Simple Name parse ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Class Or Interface Type Object ","Simple Name reportError ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Expr Object.class ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Or Interface Type JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"parseFloat-TestFloat-String","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","20":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-","31":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-"},"num":36,"succs":[[18,1,3],[2,3],[20,5,19],[4],[5,31,19],[13,11,7,6,9,8,10],[],[8],[],[17,15],[12],[],[],[0],[15],[],[14,15],[],[2],[],[21,22],[26,23,25,24],[],[],[],[27,28],[30],[],[29,14],[],[],[32,33],[34,35,16],[],[],[]],"attribute":["If Stmt ","Name Expr jsoniterObj ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Name Expr Array ","Simple Name parseFloat ","Class Or Interface Type JsonIterator ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name toInt ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Enclosed Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Parameter float newVal ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"parseDouble-TestFloat-String","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","20":"src/main/java/com/jsoniter/JsonIterator.java-readDouble-JsonIterator-","31":"src/main/java/com/jsoniter/JsonIterator.java-readDouble-JsonIterator-"},"num":36,"succs":[[1,3,18],[3,2],[5,20,19],[4],[31,5,19],[9,13,6,11,8,10,7],[],[8],[],[15,17],[12],[],[],[0],[15],[],[15,14],[],[2],[],[21,22],[26,23,24,25],[],[],[],[27,28],[30],[],[29,14],[],[],[32,33],[34,16,35],[],[],[]],"attribute":["If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Class Or Interface Type Object ","Simple Name reportError ","Parameter String input ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Expr Object.class ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Class Or Interface Type JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"testBigDecimal-TestFloat-","callMethodNameReferTo":{"13":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":24,"succs":[[1,7],[19],[4,5,6,3],[],[5],[],[1,0],[11],[9],[],[8],[8,12,13],[8],[15,16,9,14],[],[17],[18],[],[],[10,20,21],[],[22,23],[],[17]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name testBigDecimal ","Block Stmt ","Variable Declaration Expr ","Simple Name number ","Name Expr JsonIterator ","Name Expr number ","Variable Declarator BigDecimal number = ","Field Access Expr ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr BigDecimal.class ","StringLiteralExpr","Class Or Interface Type BigDecimal ","Expression Stmt ","Array Access Expr count++ ","Object Creation Expr BigDecimal Optional.empty Optional.empty ","Class Or Interface Type BigDecimal ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"testChooseDouble-TestFloat-","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>","29":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":37,"succs":[[1,9],[24,2],[3,27],[34],[7,6,8,5],[],[7],[],[1,2,3,0],[16],[11],[],[10],[12,14,10],[],[13],[18,17,10],[10],[19,11,20,21],[],[22],[23],[],[],[12,25,26],[],[],[28,13,29],[],[31,30,32,14],[],[22],[33],[],[35,15,36],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_MapKeyCodec ","Block Stmt ","Variable Declaration Expr ","Simple Name number ","Name Expr JsonIterator ","Name Expr number ","Simple Name append ","Name Expr JsonIterator ","Name Expr number ","Variable Declarator Object number = ","Simple Name ensure ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Object.class ","StringLiteralExpr","Class Or Interface Type Object ","Expression Stmt ","Array Access Expr count++ ","Char Literal Expr '}' ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Object.class ","Class Or Interface Type Object ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.23","methodName":"testInfinity-TestFloat-","callMethodNameReferTo":{"50":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>","38":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>","26":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>","12":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":59,"succs":[[9,1],[2,23],[35,3],[47],[6,7,8,5],[],[7],[],[2,1,0,3],[10,11],[],[13,12,14],[16,18,15,17],[],[22,21],[],[],[19],[20],[],[],[],[],[25,24],[],[27,13,26],[30,28,31,29],[33,34],[],[],[19],[32],[],[],[],[36,37],[],[38,13,39],[40,43,41,42],[46,45],[],[],[19],[44],[],[],[],[48,49],[],[13,50,51],[54,55,52,53],[58,57],[],[],[19],[56],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name testInfinity ","Block Stmt ","Method Call Expr ","Simple Name assertNull ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Field Access Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Double.class ","StringLiteralExpr","Class Or Interface Type Double ","Name Expr Double ","Simple Name NEGATIVE_INFINITY ","Method Call Expr ","Simple Name assertTrue ","Binary Expr EQUALS ","Method Call Expr ","Field Access Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Float.class ","Class Or Interface Type Float ","Name Expr Float ","Simple Name NEGATIVE_INFINITY ","Method Call Expr ","Simple Name assertNull ","Binary Expr EQUALS ","Method Call Expr ","Field Access Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Double.class ","Class Or Interface Type Double ","Name Expr Double ","Simple Name POSITIVE_INFINITY ","Method Call Expr ","Simple Name assertNull ","Binary Expr EQUALS ","Method Call Expr ","Field Access Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Float.class ","Class Or Interface Type Float ","Name Expr Float ","Simple Name POSITIVE_INFINITY "]}
