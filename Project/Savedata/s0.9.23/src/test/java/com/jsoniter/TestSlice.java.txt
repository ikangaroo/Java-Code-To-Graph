{"fileName":"src/test/java/com/jsoniter/TestSlice.java","version":"0.9.23","hasMethodName":["test_equals-TestSlice-","test_hashcode-TestSlice-","test_equalsInputNotNullOutputFalse2-TestSlice-","test_equalsInputNotNullOutputFalse-TestSlice-"]}
{"fileName":"src/test/java/com/jsoniter/TestSlice.java","version":"0.9.23","methodName":"test_equals-TestSlice-","callMethodNameReferTo":{"22":"src/main/java/com/jsoniter/spi/Slice.java-equals-Slice-Object","23":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String","9":"src/main/java/com/jsoniter/spi/Slice.java-equals-Slice-Object","10":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String","12":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String"},"num":36,"succs":[[1,7],[20],[5,6,4,3],[],[5],[],[1,0],[8,9],[],[10,12,11],[15,13,14],[],[19,17,18],[],[],[16],[],[],[],[16],[21,22],[],[23,24,25],[28,27,26],[],[32,30,29,31],[],[],[16],[],[33,34],[35],[35],[16],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name noIndention ","Block Stmt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name equals ","Method Call Expr ","Name Expr Slice ","Simple Name make ","String Literal Expr Not Empty  ","StringLiteralExpr","Name Expr Slice ","Simple Name make ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name equals ","Object Creation Expr Slice Optional.empty Optional.empty ","Name Expr Slice ","Simple Name make ","String Literal Expr Not Empty  ","Class Or Interface Type Slice ","Method Call Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name getBytes ","IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestSlice.java","version":"0.9.23","methodName":"test_hashcode-TestSlice-","callMethodNameReferTo":{"49":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String","22":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String","40":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String","30":"src/main/java/com/jsoniter/spi/Slice.java-make-Slice-String"},"num":53,"succs":[[10,1],[2,20],[28,3],[4,35],[44],[7,9,8,6],[],[8],[],[2,0,4,1,3],[16],[12],[],[11,12],[13,12],[14,12],[18,17,12],[12],[19],[],[21,22,11,23],[],[26,25,24],[27],[],[],[27],[],[13,30,29,31],[],[33,32,34],[27],[],[],[27],[38,36,37],[],[27],[40,39,14],[],[42,43,41],[],[],[27],[45,46,47],[],[27],[15,49,48],[],[50,51,52],[],[],[27]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_hashcode ","Block Stmt ","Variable Declaration Expr ","Primitive Type int ","Simple Name map ","Primitive Type int ","Name Expr map ","Simple Name obj ","Variable Declarator HashMap map = ","Class Or Interface Type CtClass ","Object Creation Expr HashMap Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Name Expr com ","Method Call Expr ","String Literal Expr Not Empty  ","Name Expr Slice ","Simple Name lang ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Name Expr str ","Method Call Expr ","String Literal Expr Not Empty  ","Name Expr Slice ","Simple Name wrap ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Unary Expr ++ ","Method Call Expr ","Name Expr Slice ","Simple Name make ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Return Stmt ","String Literal Expr Not Empty  ","Object Creation Expr com.jsoniter.demo.User Optional.empty Optional.empty ","Simple Name obj ","Method Call Expr ","Name Expr Slice ","Simple Name make ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestSlice.java","version":"0.9.23","methodName":"test_equalsInputNotNullOutputFalse2-TestSlice-","callMethodNameReferTo":{"58":"src/main/java/com/jsoniter/spi/Slice.java-equals-Slice-Object"},"num":64,"succs":[[1,11],[25,2],[3,35],[44,4],[53,5],[60],[9,10,7,8],[],[9],[],[3,0,1,5,4,2],[14,15],[13],[],[],[16,17,13],[13],[19,18],[20,21],[23,24],[],[22],[],[],[22],[14,28],[12],[26],[26,30,29],[26],[31,33,12,32],[],[34],[22],[],[14,38],[37],[],[37,40,39],[37],[41],[43,42],[],[34],[14,47],[36],[45],[45,48,49],[45],[36,52,50,51],[],[34],[22],[14,56],[27,46],[54],[57,58,54],[54],[59,46,27],[],[61,55,62],[],[63],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_equalsInputNotNullOutputFalse2 ","Block Stmt ","Expression Stmt ","Name Expr byteArray ","Simple Name byteArray ","FINAL","Variable Declarator byte[] byteArray = ","Array Type 1 ","Array Initializer Expr ","Cast Expr ","Cast Expr ","Primitive Type byte ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Primitive Type byte ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name objectUnderTest ","Name Expr objectUnderTest ","Variable Declarator Slice objectUnderTest = ","Class Or Interface Type Slice ","Object Creation Expr Slice Optional.empty Optional.empty ","Class Or Interface Type Slice ","Integer Literal Expr Zero  ","Integer Literal Expr Note Zero  ","Zero IntegerLiteralExpr","Expression Stmt ","Name Expr byteArray1 ","Simple Name byteArray1 ","Variable Declarator byte[] byteArray1 = ","Array Type 1 ","Array Initializer Expr ","Cast Expr ","Primitive Type byte ","Integer Literal Expr Zero  ","Variable Declaration Expr [FINAL] ","Simple Name o ","Name Expr o ","Variable Declarator Slice o = ","Class Or Interface Type Slice ","Object Creation Expr Slice Optional.empty Optional.empty ","Simple Name toInt ","Integer Literal Expr Zero  ","Integer Literal Expr Note Zero  ","Variable Declaration Expr [FINAL] ","Simple Name retval ","Name Expr retval ","Variable Declarator boolean retval = ","Primitive Type boolean ","Method Call Expr ","Simple Name equals ","Method Call Expr ","Field Access Expr ","Boolean Literal Expr false ","false"]}
{"fileName":"src/test/java/com/jsoniter/TestSlice.java","version":"0.9.23","methodName":"test_equalsInputNotNullOutputFalse-TestSlice-","callMethodNameReferTo":{"40":"src/main/java/com/jsoniter/spi/Slice.java-equals-Slice-Object"},"num":46,"succs":[[1,9],[25,2],[35,3],[42],[8,6,7,5],[],[7],[],[0,1,3,2],[12,13],[11],[],[],[14,11,15],[11],[19,17,16,18],[],[20],[21],[22,23],[],[],[24],[],[],[12,28],[27],[],[29,30,27],[27],[31,33,32,34],[],[20],[21],[24],[12,38],[26,10],[36],[36,40,39],[36],[26,10,41],[],[44,37,43],[],[45],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_equalsInputNotNullOutputFalse ","Block Stmt ","Variable Declaration Expr [FINAL] ","Name Expr objectUnderTest ","Simple Name objectUnderTest ","FINAL","Variable Declarator Slice objectUnderTest = ","Simple Name field ","Object Creation Expr Slice Optional.empty Optional.empty ","Class Or Interface Type Slice ","Null Literal Expr ","Integer Literal Expr Note Zero  ","Unary Expr - ","NullLiteralExpr","Zero IntegerLiteralExpr","Integer Literal Expr Note Zero  ","MINUS","IntegerLiteralExpr","Variable Declaration Expr [FINAL] ","Name Expr o ","Simple Name o ","Variable Declarator Slice o = ","Class Or Interface Type Slice ","Object Creation Expr Slice Optional.empty Optional.empty ","Name Expr field ","Null Literal Expr ","Integer Literal Expr Zero  ","Integer Literal Expr Note Zero  ","Variable Declaration Expr [FINAL] ","Simple Name retval ","Simple Name create ","Variable Declarator boolean retval = ","Primitive Type boolean ","Method Call Expr ","Simple Name equals ","Method Call Expr ","Return Stmt ","Boolean Literal Expr false ","false"]}
