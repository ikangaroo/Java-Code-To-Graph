{"fileName":"src/test/java/com/jsoniter/TestIO.java","version":"0.9.23","hasMethodName":["test_read_byte-TestIO-","test_read_bytes-TestIO-","test_unread_byte-TestIO-"]}
{"fileName":"src/test/java/com/jsoniter/TestIO.java","version":"0.9.23","methodName":"test_read_byte-TestIO-","callMethodNameReferTo":{"34":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator"},"num":48,"succs":[[14,1],[2,31],[38,3,5,39],[4,40],[43],[47,46],[9,11,10,13,8,7],[],[9],[],[12],[],[],[2,0,1],[18],[16],[],[15,16],[20,19,16],[16],[23,21,22,24],[],[],[25,26],[30],[],[27,28],[29],[],[],[],[34,33,32],[],[35],[15,36,37],[],[],[],[3,4],[45,5],[17,42,41],[],[],[44],[],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_read_byte ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Simple Name get ","Method Call Expr ","'1'","Name Expr IterImpl ","Simple Name readByte ","Block Stmt ","Catch Clause ","Return Stmt ","Name Expr IterImpl ","Simple Name toString ","Name Expr System ","Primitive Type byte ","Block Stmt ","Class Or Interface Type JsonException ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestIO.java","version":"0.9.23","methodName":"test_read_bytes-TestIO-","callMethodNameReferTo":{"49":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","36":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","43":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator"},"num":57,"succs":[[1,15],[2,33],[40,3],[48,6,4,47],[5,49],[52],[56,55],[12,9,14,11,10,8],[],[10],[],[13],[],[],[2,1,3,0],[20],[17],[],[17,16],[18,17],[22,17,21],[17],[23,25,26,24],[],[],[28,27],[32],[],[29,30],[31],[],[],[],[36,35,34],[],[37],[38,16,39],[],[],[],[43,42,41],[],[44],[46,18,45],[],[],[],[4,5],[54,6],[50,51,19],[],[],[53],[],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Try Stmt ","Method Call Expr ","Return Stmt ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_read_bytes ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Class Or Interface Type User ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr '1' ","Method Call Expr ","'1'","Name Expr IterImpl ","Simple Name readByte ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr '2' ","Method Call Expr ","'2'","Name Expr IterImpl ","Simple Name readByte ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr IterImpl ","Simple Name readByte ","Simple Name field4 ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e "]}
{"fileName":"src/test/java/com/jsoniter/TestIO.java","version":"0.9.23","methodName":"test_unread_byte-TestIO-","callMethodNameReferTo":{"48":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","67":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","52":"src/main/java/com/jsoniter/JsonIterator.java-unreadByte-JsonIterator-","41":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","57":"src/main/java/com/jsoniter/IterImpl.java-readByte-IterImpl-JsonIterator","60":"src/main/java/com/jsoniter/JsonIterator.java-unreadByte-JsonIterator-","62":"src/main/java/com/jsoniter/JsonIterator.java-unreadByte-JsonIterator-"},"num":70,"succs":[[1,16],[38,2],[45,3],[52,4],[5,54],[60,6],[7,62],[64],[11,15,12,13,9,10],[],[11],[],[14],[],[],[5,1,7,0,4,6,2,3],[25],[18],[],[18,17],[19,18],[20,18],[21,18],[22,18],[23,18],[26,18,27],[18],[28,29,30,31],[],[],[32,33],[37],[],[35,34],[36],[],[],[],[40,39,41],[],[42],[44,43,17],[],[],[],[46,48,47],[],[49],[19,51,50],[],[],[],[20,53],[],[57,55,56],[],[49],[59,21,58],[],[],[61,22],[],[23,63],[],[65,66,67],[],[42],[68,24,69],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Return Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_unread_byte ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr type ","Name Expr iter ","Class Or Interface Type java ","Name Expr desc ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Field Access Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Field Access Expr ","Name Expr val ","Method Call Expr ","'1'","Name Expr IterImpl ","Simple Name readByte ","Method Call Expr ","Return Stmt ","Name Expr val ","Method Call Expr ","'2'","Name Expr IterImpl ","Simple Name readByte ","Method Call Expr ","Simple Name unreadByte ","Expression Stmt ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr IterImpl ","Simple Name readByte ","Method Call Expr ","Simple Name unreadByte ","Method Call Expr ","Simple Name unwrappers ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr '1' ","Method Call Expr ","Name Expr IterImpl ","String Literal Expr Not Empty  "]}
