{"fileName":"src/main/java/com/jsoniter/fuzzy/StringLongDecoder.java","version":"0.9.23","hasMethodName":["decodeLong-StringLongDecoder-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/fuzzy/StringLongDecoder.java","version":"0.9.23","methodName":"decodeLong-StringLongDecoder-JsonIterator","callMethodNameReferTo":{"38":"src/main/java/com/jsoniter/CodegenAccess.java-nextToken-CodegenAccess-JsonIterator","62":"src/main/java/com/jsoniter/CodegenAccess.java-nextToken-CodegenAccess-JsonIterator"},"num":74,"succs":[[1,27],[2,40],[4,41,42,3,30],[4,44],[5,53],[60,6],[7,64],[9,8,65,34,41],[9,66],[55,10,73],[19,11,17,14,16,13,12,15],[],[],[14],[],[26,21],[18],[],[],[5,4,9,1,0,6],[21],[],[20,21],[22,21],[21,23],[21,24],[],[36],[20,29],[],[28],[2,28,30],[33,28,31,24],[],[32],[32,34,7],[28,37,38],[28],[20,29,39],[],[3],[],[43],[],[22,46,45,47],[],[48],[51,49,50],[],[48],[],[52,31],[],[56],[23],[54],[58,57,54],[54],[59,23],[],[32,61,62],[],[63,33,24],[],[8],[43],[67,68,69,25],[],[48],[70,71,50],[48],[35,72],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Method Declaration Throws ","Name Expr nextToken ","PUBLIC","Primitive Type long ","Simple Name decodeLong ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Void Type ","Name Expr iter ","Name Expr iter ","Void Type ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name c ","Name Expr CodegenAccess ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr CodegenAccess ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ''' ","'''","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Simple Name demo ","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator long val = ","Class Or Interface Type Type ","Field Access Expr ","Simple Name readLong ","Method Call Expr ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","Char Literal Expr '}' ","Method Call Expr ","Simple Name reportError ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Cast Expr ","Primitive Type char ","ReturnStmt"]}
