{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","hasMethodName":["valueType-ArrayWrapperAny-","object-ArrayWrapperAny-","toBoolean-ArrayWrapperAny-","toInt-ArrayWrapperAny-","toLong-ArrayWrapperAny-","toFloat-ArrayWrapperAny-","toDouble-ArrayWrapperAny-","toBigInteger-ArrayWrapperAny-","toBigDecimal-ArrayWrapperAny-","toString-ArrayWrapperAny-","writeTo-ArrayWrapperAny-JsonStream","size-ArrayWrapperAny-","get-ArrayWrapperAny-int","get-ArrayWrapperAny-Object[]-int","iterator-ArrayWrapperAny-","fillCacheUntil-ArrayWrapperAny-int","fillCache-ArrayWrapperAny-","hasNext-ArrayWrapperAny.WrapperIterator-","next-ArrayWrapperAny.WrapperIterator-","remove-ArrayWrapperAny.WrapperIterator-"]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"valueType-ArrayWrapperAny-","callMethodNameReferTo":{},"num":11,"succs":[[3,1,5,4,2],[],[],[4],[],[6],[8,0,7],[],[10,9],[],[]],"attribute":["Method Declaration ","Name Expr nextToken ","PUBLIC","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","ReturnStmt","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"object-ArrayWrapperAny-","callMethodNameReferTo":{},"num":307,"succs":[[8,1],[12,2,11],[6,3,5,7,4],[],[],[6],[],[0,1],[10,9],[],[29,28,26,27],[],[],[14,30],[33,16,34,32,15],[16,36],[17,40],[18,49],[33,19,50,20,41],[10,20,11],[53,21,25,22],[59,22],[63,43,56,23],[65,24],[80,25],[64,57,22],[],[28],[],[16,20,17,13],[15],[14],[],[],[35],[],[37,38,31],[],[39],[],[44],[42],[],[42,41],[45,46,42],[42],[47,48],[],[84,85,83,4,86],[19],[51,52,48],[],[],[24,23],[55],[],[58,54],[56,54],[57,78,54],[60,61,54],[54],[55,62,48],[],[],[],[70],[68,58,67],[],[77],[66],[66,72,71],[66],[74,73,75],[],[],[68,79,76,58,67],[],[],[],[115,117,118,116,119,114,4],[82,69,81],[],[],[],[85],[],[87],[88,48,11],[90,89,91],[],[],[],[93,135],[136,33,94,95,126],[79,95,11,138],[96,140],[147,97],[98,108,148,142],[149,99],[151,100],[159,101,102],[107,102],[103,161],[104,163],[175,105],[101,106,176,177,178],[183,101],[79,108,185,11],[188,190,112,189,109,110],[79,11,191],[111,202,203],[79,11,204],[210,209,113],[79,211,11],[],[116],[],[77,132],[78,134],[96,108,95,92],[77],[77,120],[77,121],[122,77],[77,123],[124,77],[78],[126,78],[78,127],[128,78],[129,78],[130,78],[133],[],[],[94],[137,120],[],[139],[],[144],[121,127],[141],[141,142],[145,141,146],[141],[121,127],[98,107,100,99],[],[10,150],[],[155],[153],[],[152,153],[157,153,156],[153],[158],[],[104,103],[161],[162],[161],[167],[128,122,160],[164],[165,164,105],[169,168,164],[164],[79,122,160,170,171],[],[128,173,172,78],[],[174],[],[106],[180,165,179],[],[182,181],[],[216,215,218,217,4],[],[],[152,166,184],[],[187,154,186],[],[],[109],[201,110],[112,208],[79,193,194,123,192],[195,196,198],[],[200,129,172,78],[],[143,199,197],[],[239,242,26,240,241],[],[174],[111],[],[],[130,124,206,205],[],[207,2],[],[113],[],[],[212,131,213,125],[],[214,2],[],[],[217],[],[219],[220,180,11],[222,221],[],[],[224,248],[33,225,250,226,251],[252,226],[227,255],[243,228,229,63,257],[260,229,198,11],[264,237,231,230],[231,271],[267,232,238,63,275],[233,277],[290,234],[293,235],[245,237,33,270,236],[237,282,198,11],[64,231,268],[294,198,11],[240],[],[247,197],[238,229,223,226],[197],[243,262,227,197],[197,244],[245,197],[],[225],[224],[],[35],[249,37,253],[254],[],[228],[227],[258,259,48],[],[],[261,263,256,244],[],[],[298,300,297,301,4,299],[233,232,234],[266],[],[265,270],[267,265],[265,268,78],[265,269],[265,272,273],[265],[266,274,48],[],[276,48],[],[283],[279,269,280],[],[77],[278],[281,278],[284,278,285],[278],[287,286,288],[],[],[279,289,79,269,280],[],[281,292,291],[],[],[236],[296,246,295],[],[],[],[299],[],[262,304],[302],[305,263,11],[262,197],[],[306,303,198],[]],"attribute":["Assign Expr ASSIGN ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","ReturnStmt","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toBoolean-ArrayWrapperAny-","callMethodNameReferTo":{},"num":24,"succs":[[5,1,4,3,2],[],[],[4],[],[6],[8,0,7],[],[10,9,11],[12,13],[],[14],[],[16,17,15,18,2],[],[],[17],[],[19],[20,13,7],[22,21,23],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type boolean ","Simple Name toBoolean ","Block Stmt ","Return Stmt ","ReturnStmt","Binary Expr NOT_EQUALS ","Method Call Expr ","NOT_EQUALS","Integer Literal Expr Zero  ","Simple Name size ","Method Declaration ","Zero IntegerLiteralExpr","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toInt-ArrayWrapperAny-","callMethodNameReferTo":{},"num":20,"succs":[[3,4,1,2,5],[],[],[4],[],[6],[7,8,0],[],[9,10],[],[12,13,11,2,14],[],[13],[],[15],[16,7,10],[18,17,19],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name toInt ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toLong-ArrayWrapperAny-","callMethodNameReferTo":{},"num":20,"succs":[[1,4,3,5,2],[],[],[4],[],[6],[8,7,0],[],[9,10],[],[12,13,11,2,14],[],[13],[],[15],[16,7,10],[18,17,19],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type long ","Simple Name toLong ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toFloat-ArrayWrapperAny-","callMethodNameReferTo":{},"num":20,"succs":[[1,3,4,5,2],[],[],[4],[],[6],[8,0,7],[],[9,10],[],[12,13,11,2,14],[],[13],[],[15],[16,7,10],[18,17,19],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type float ","Simple Name toFloat ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toDouble-ArrayWrapperAny-","callMethodNameReferTo":{},"num":20,"succs":[[3,1,4,5,2],[],[],[4],[],[6],[8,7,0],[],[9,10],[],[12,13,11,2,14],[],[13],[],[15],[16,7,10],[18,17,19],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type double ","Simple Name toDouble ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toBigInteger-ArrayWrapperAny-","callMethodNameReferTo":{},"num":23,"succs":[[4,3,5,1,2],[],[],[4],[],[6],[8,7,0],[],[11,10,9],[],[],[12,13],[],[15,16,14,17,2],[],[16],[],[18],[19,13,7],[21,20,22],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type BigDecimal ","Simple Name toBigDecimal ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr BigDecimal ","Simple Name valueOf ","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toBigDecimal-ArrayWrapperAny-","callMethodNameReferTo":{},"num":23,"succs":[[3,4,5,1,2],[],[],[4],[],[6],[0,8,7],[],[10,11,9],[],[],[12,13],[],[15,16,14,17,2],[],[16],[],[18],[19,13,7],[21,20,22],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type BigDecimal ","Simple Name toBigDecimal ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name writeFalse ","Simple Name valueOf ","Method Call Expr ","Simple Name size ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"toString-ArrayWrapperAny-","callMethodNameReferTo":{"19":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","26":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object"},"num":331,"succs":[[1,3,12],[14,2,15,16,3],[6,19,18],[5,4],[5,23],[26,6,18],[10,9,11,7,8],[],[],[10],[],[0],[2],[1],[],[],[17],[],[],[22,20,21],[],[],[],[25,24],[],[45,44,42,43],[13,27,28],[],[],[30,46],[32,15,49,48,31],[32,50],[33,54],[63,34],[35,15,64,36,55],[25,36,18],[67,37,41,38],[73,38],[77,57,70,39],[79,40],[94,41],[78,71,38],[],[44],[],[32,33,36,29],[31],[30],[],[17],[51,47,52],[],[53],[],[58],[56],[],[55,56],[59,60,56],[56],[61,62],[],[98,99,97,8,100],[35],[65,66,62],[],[],[40,39],[69],[],[72,68],[70,68],[71,92,68],[74,75,68],[68],[76,69,62],[],[],[],[84],[82,72,81],[],[91],[80],[80,85,86],[80],[88,87,89],[],[],[82,93,90,72,81],[],[],[],[129,131,132,130,133,128,8],[96,83,95],[],[],[],[99],[],[101],[102,62,18],[104,103,105],[],[],[],[107,149],[150,15,108,109,140],[93,109,18,152],[110,154],[161,111],[112,122,162,156],[163,113],[165,114],[173,115,116],[121,116],[117,175],[118,177],[189,119],[115,120,190,191,192],[115,197],[93,122,199,18],[202,204,126,203,124,123],[93,18,205],[125,216,217],[93,18,218],[225,224,127],[93,226,18],[],[130],[],[91,146],[92,148],[110,122,106,109],[91],[91,134],[91,135],[136,91],[91,137],[138,91],[92],[140,92],[92,141],[142,92],[143,92],[144,92],[147],[],[],[108],[151,134],[],[153],[],[158],[135,141],[155],[155,156],[159,155,160],[155],[135,141],[112,121,114,113],[],[25,164],[],[169],[167],[],[166,167],[171,167,170],[167],[172],[],[117,118],[175],[176],[175],[181],[142,136,174],[178],[179,178,119],[183,182,178],[178],[93,136,174,185,184],[],[142,187,186,92],[],[188],[],[120],[194,179,193],[],[196,195],[],[231,230,233,232,8],[],[],[166,180,198],[],[201,168,200],[],[],[123],[215,124],[126,223],[93,207,208,137,206],[209,210,212],[],[214,143,186,92],[],[157,213,211],[],[254,42,257,255,256],[],[188],[125],[],[],[144,138,220,219],[],[221,222],[],[316,314,315,317,8],[127],[],[],[227,145,228,139],[],[229,222],[],[],[232],[],[234],[235,194,18],[237,236],[],[],[239,263],[15,240,265,241,266],[267,241],[242,270],[258,243,244,77,272],[275,244,212,18],[279,252,246,245],[246,286],[282,247,253,77,290],[248,292],[305,249],[308,250],[260,252,15,285,251],[252,297,212,18],[78,246,283],[309,212,18],[255],[],[262,211],[253,244,238,241],[211],[258,277,242,211],[259,211],[260,211],[],[240],[239],[],[17],[264,51,268],[269],[],[243],[242],[273,274,62],[],[],[276,278,271,259],[],[],[322,324,321,325,8,323],[248,247,249],[281],[],[280,285],[282,280],[280,283,92],[280,284],[280,287,288],[280],[281,289,62],[],[291,62],[],[298],[294,284,295],[],[91],[293],[296,293],[299,300,293],[293],[302,303,301],[],[],[304,294,93,284,295],[],[296,307,306],[],[],[251],[311,261,310],[],[],[318,313],[320,222,18],[],[316],[],[312,313],[25,319],[],[],[],[323],[],[277,328],[326],[329,278,18],[277,211],[],[330,327,212],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Class Or Interface Type JsonIterator ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Simple Name iter ","NullLiteralExpr","ReturnStmt","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Name Expr val ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"writeTo-ArrayWrapperAny-JsonStream","callMethodNameReferTo":{},"num":337,"succs":[[3,1,20],[23,3,2,22,24],[26],[5,4],[5,29],[32],[7,15,13,11,12,9,10,8],[],[],[10],[],[17,19],[14],[],[],[0],[17],[],[16,17],[],[2],[1],[],[],[25],[],[16,27,28],[],[],[31,30],[],[50,49,47,48],[18,21,33],[],[35,51],[37,23,54,53,36],[37,55],[38,59],[39,68],[40,23,69,41,60],[31,41,72],[73,42,46,43],[79,43],[83,62,76,44],[85,45],[100,46],[84,77,43],[],[49],[],[37,38,41,34],[36],[35],[],[25],[56,57,52],[],[58],[],[63],[61],[],[61,60],[64,65,61],[61],[66,67],[],[104,105,103,8,106],[40],[70,71,67],[],[],[],[45,44],[75],[],[78,74],[76,74],[77,98,74],[80,81,74],[74],[82,75,67],[],[],[],[90],[88,78,87],[],[97],[86],[86,91,92],[86],[94,93,95],[],[],[99,88,96,78,87],[],[],[],[135,137,139,136,138,8,134],[102,89,101],[],[],[],[105],[],[107],[108,67,72],[110,109,111],[],[],[],[113,155],[156,23,114,115,146],[99,115,72,158],[116,160],[167,117],[118,128,168,162],[169,119],[171,120],[179,121,122],[127,122],[123,181],[124,183],[195,125],[121,126,196,197,198],[121,203],[99,128,205,72],[208,210,132,209,130,129],[99,72,211],[131,222,223],[99,72,224],[231,230,133],[99,232,72],[],[136],[],[97,152],[98,154],[116,128,112,115],[97],[97,140],[97,141],[142,97],[97,143],[144,97],[98],[146,98],[98,147],[148,98],[149,98],[150,98],[153],[],[],[114],[157,140],[],[159],[],[164],[141,147],[161],[161,162],[165,161,166],[161],[141,147],[118,127,120,119],[],[31,170],[],[175],[173],[],[172,173],[177,173,176],[173],[178],[],[124,123],[181],[182],[181],[187],[148,142,180],[184],[185,184,125],[189,188,184],[184],[99,142,180,191,190],[],[148,193,192,98],[],[194],[],[126],[200,185,199],[],[202,201],[],[237,236,239,238,8],[],[],[172,186,204],[],[207,174,206],[],[],[129],[221,130],[132,229],[99,213,214,143,212],[215,216,218],[],[220,149,192,98],[],[163,219,217],[],[260,263,47,261,262],[],[194],[131],[],[],[150,144,226,225],[],[227,228],[],[322,320,321,323,8],[133],[],[],[233,151,234,145],[],[235,228],[],[],[238],[],[240],[241,200,72],[243,242],[],[],[245,269],[23,246,271,247,272],[273,247],[248,276],[264,249,250,83,278],[281,250,218,72],[285,258,252,251],[252,292],[288,253,259,83,296],[254,298],[311,255],[314,256],[266,23,258,291,257],[258,303,218,72],[84,252,289],[315,218,72],[261],[],[268,217],[259,244,250,247],[217],[264,283,248,217],[217,265],[266,217],[],[246],[245],[],[25],[270,56,274],[275],[],[249],[248],[279,280,67],[],[],[282,284,277,265],[],[],[328,330,327,331,8,329],[254,253,255],[287],[],[286,291],[288,286],[286,289,98],[286,290],[286,293,294],[286],[287,295,67],[],[297,67],[],[304],[300,290,301],[],[97],[299],[302,299],[305,299,306],[299],[308,307,309],[],[],[99,310,300,290,301],[],[302,313,312],[],[],[257],[317,316,267],[],[],[324,319],[326,228,72],[],[322],[],[318,319],[31,325],[],[],[],[329],[],[283,334],[332],[335,284,72],[283,217],[],[336,333,218],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Simple Name writeTo ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr stream ","Simple Name stream ","Name Expr stream ","Class Or Interface Type JsonStream ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Method Call Expr ","Simple Name writeVal ","Name Expr val ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Simple Name writeVal ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","ReturnStmt","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"size-ArrayWrapperAny-","callMethodNameReferTo":{},"num":12,"succs":[[3,4,1,2,5],[],[],[4],[],[6],[8,7,0],[],[10,9,11],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"get-ArrayWrapperAny-int","callMethodNameReferTo":{},"num":307,"succs":[[3,5,1,6,4,2],[],[],[4],[],[9,10],[7],[12,0,11],[9,14],[],[],[],[13,15,8],[],[],[33,36,32,34,35],[17,42],[45,44,18,19,46],[48,19],[20,52],[37,21,22,54,55],[59,22,15,11],[61,30,24,23],[24,68],[64,25,31,54,72],[26,75],[91,27],[94,28],[39,30,45,67,29],[30,80,15,11],[74,24,65],[95,15,11],[],[34],[],[41,14],[31,22,16,19],[14],[37,9,20,14],[14,38],[39,14],[],[18],[17],[],[],[47],[],[43,49,50],[],[51],[],[21],[20],[],[56,57,58],[],[],[99,100,98,101,2],[60,0,53,38],[],[26,25,27],[63],[],[62,67],[64,62],[62,65,89],[62,66],[62,69,70],[62],[63,71,58],[],[73,58],[],[],[81],[77,66,78],[],[88],[76],[79,76],[82,76,83],[76],[85,84,86],[],[],[77,90,87,66,78],[],[],[],[130,132,133,134,131,2,129],[79,93,92],[],[],[29],[97,40,96],[],[],[],[100],[],[102],[103,58,11],[105,104,106],[],[],[],[108,150],[151,45,109,110,141],[90,110,11,153],[111,155],[162,112],[113,123,163,157],[164,114],[167,115],[175,116,117],[122,117],[118,177],[119,179],[191,120],[116,121,192,193,194],[116,199],[90,123,201,11],[204,206,127,205,125,124],[90,11,207],[126,216,217],[90,11,218],[225,224,128],[90,226,11],[],[131],[],[88,147],[89,149],[123,111,107,110],[88],[88,135],[88,136],[137,88],[88,138],[139,88],[89],[141,89],[89,142],[143,89],[144,89],[145,89],[148],[],[],[109],[152,135],[],[154],[],[159],[136,142],[156],[156,157],[160,156,161],[156],[136,142],[113,122,115,114],[],[166,165],[],[245,244,32,243],[171],[169],[],[168,169],[173,169,172],[169],[174],[],[118,119],[177],[178],[177],[183],[143,137,176],[180],[181,180,120],[185,184,180],[180],[90,137,176,186,187],[],[143,189,188,89],[],[190],[],[121],[196,181,195],[],[198,197],[],[291,293,290,292,2],[],[],[168,182,200],[],[203,170,202],[],[],[124],[215,125],[127,223],[90,209,210,138,208],[211,212,15],[],[214,144,188,89],[],[158,213,14],[],[190],[126],[],[],[145,139,220,219],[],[221,222],[],[302,300,301,303,2],[128],[],[],[227,146,228,140],[],[229,222],[],[231,246],[233,45,249,248,232],[233,250],[234,253],[235,261],[236,45,262,237,254],[166,237,11],[265,238,242,239],[271,239],[54,256,268,240],[275,241],[287,242],[74,269,239],[244],[],[233,237,234,230],[232],[231],[],[47],[49,251,247],[252],[],[257],[255],[],[254,255],[258,259,255],[255],[260,58],[],[236],[263,264,58],[],[],[241,240],[267],[],[270,266],[268,266],[269,89,266],[272,273,266],[266],[274,267,58],[],[280],[278,270,277],[],[88],[276],[276,282,281],[276],[284,283,285],[],[],[278,90,286,270,277],[],[289,279,288],[],[],[],[292],[],[294],[295,196,11],[297,296],[],[],[304,299],[306,222,11],[],[302],[],[298,299],[166,305],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Simple Name index ","Primitive Type int ","ReturnStmt","Method Call Expr ","Simple Name fillCacheUntil ","Simple Name index ","Method Declaration ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","PRIVATE","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","LESS","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Declaration ","Method Call Expr ","Simple Name get ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"get-ArrayWrapperAny-Object[]-int","callMethodNameReferTo":{"192":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","84":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","100":"src/main/java/com/jsoniter/any/Any.java-rewrap-Any-List<Any>","106":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","270":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int"},"num":307,"succs":[[1,47],[49,48,2,3,37],[22,3,51,52],[4,54],[61,5],[6,16,62,56],[63,7],[66,8],[74,9,10],[15,10],[11,76],[12,78],[90,13],[9,14,91,92,93],[98,9],[22,100,16,51],[103,105,20,104,18,17],[22,51,106],[19,117,118],[22,51,119],[126,125,21],[22,127,51],[25,27,28,29,26,23,24],[],[],[26],[],[31,44],[38,46],[16,4,0,3],[31],[],[31,30],[31,32],[33,31],[31,34],[35,31],[38],[],[38,37],[38,39],[40,38],[41,38],[42,38],[45],[],[],[2],[],[50,30],[],[],[53],[],[58],[32,39],[55],[55,56],[59,55,60],[55],[32,39],[6,15,8,7],[],[65,64],[],[147,146,144,145],[70],[68],[],[67,68],[72,68,71],[68],[73],[],[11,12],[76],[77],[76],[82],[40,33,75],[79],[80,79,13],[84,83,79],[79],[22,33,75,86,85],[],[40,88,87,38],[],[89],[],[14],[95,80,94],[],[97,96],[],[198,197,200,199,24],[],[],[67,81,99],[],[102,69,101],[],[],[17],[116,18],[20,124],[22,108,109,34,107],[110,111,113],[],[115,41,87,38],[],[57,114,112],[],[221,224,144,222,223],[],[89],[19],[],[],[42,35,121,120],[],[122,123],[],[283,281,282,284,24],[21],[],[],[128,43,129,36],[],[130,123],[],[132,148],[48,134,151,150,133],[134,153],[135,157],[136,166],[48,137,167,138,158],[65,138,51],[170,139,143,140],[176,140],[180,160,173,141],[182,142],[194,143],[181,174,140],[],[146],[],[134,138,135,131],[133],[132],[],[152],[],[154,155,149],[],[156],[],[161],[159],[],[158,159],[162,163,159],[159],[164,165],[],[289,290,288,24,291],[137],[168,169,165],[],[],[142,141],[172],[],[175,171],[173,171],[174,38,171],[177,178,171],[171],[172,179,165],[],[],[],[187],[185,175,184],[],[31],[183],[183,189,188],[183],[191,190,192],[],[],[185,22,193,175,184],[],[196,186,195],[],[],[],[199],[],[201],[202,95,51],[204,203],[],[],[206,230],[48,207,232,208,233],[234,208],[209,237],[225,210,211,180,239],[242,211,113,51],[246,219,213,212],[213,253],[249,214,220,180,257],[215,259],[272,216],[275,217],[227,219,48,252,218],[219,264,113,51],[181,213,250],[276,113,51],[222],[],[229,112],[220,211,205,208],[112],[225,244,209,112],[112,226],[227,112],[],[207],[206],[],[152],[231,154,235],[236],[],[210],[209],[240,241,165],[],[],[243,245,238,226],[],[],[298,300,297,301,24,299],[215,214,216],[248],[],[247,252],[249,247],[247,250,38],[247,251],[247,254,255],[247],[248,256,165],[],[258,165],[],[265],[261,251,262],[],[31],[260],[263,260],[266,260,267],[260],[269,268,270],[],[],[261,22,271,251,262],[],[263,274,273],[],[],[218],[278,228,277],[],[],[285,280],[287,123,51],[],[283],[],[279,280],[65,286],[],[],[],[290],[],[292],[293,165,51],[295,294,296],[],[],[],[],[299],[],[244,304],[302],[305,245,51],[244,112],[],[306,303,113],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Simple Name keys ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Simple Name idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","EQUALS","Field Access Expr ","Simple Name length ","ReturnStmt","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"iterator-ArrayWrapperAny-","callMethodNameReferTo":{},"num":12,"succs":[[5,1,4,3,2],[],[],[8,4,7],[],[6],[0,9,10],[],[],[],[11],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Iterator ","Simple Name iterator ","Block Stmt ","Return Stmt ","Simple Name Iterator ","Class Or Interface Type Any ","ReturnStmt","Object Creation Expr WrapperIterator Optional.empty Optional.empty ","Class Or Interface Type WrapperIterator "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"fillCacheUntil-ArrayWrapperAny-int","callMethodNameReferTo":{"72":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","282":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":307,"succs":[[1,28],[31,2,30,3,32],[34,3],[4,38],[22,5,6,40,41],[46,6,16,45],[50,14,8,7],[8,57],[53,9,15,40,61],[10,64],[80,11],[83,12],[25,31,14,56,13],[14,69,16,45],[63,8,54],[84,16,45],[18,17,21,19,20],[],[19],[],[27,23],[15,0,6,3],[23],[],[22,48,4,23],[24,23],[25,23],[],[2],[1],[],[],[33],[],[29,35,36],[],[37],[],[5],[4],[],[42,43,44],[],[],[89,90,87,88,91],[],[47,49,39,24],[],[],[98,100,97,101,99,88],[10,9,11],[52],[],[51,56],[53,51],[51,54,78],[51,55],[51,58,59],[51],[52,60,44],[],[62,44],[],[],[70],[66,55,67],[],[77],[65],[68,65],[71,72,65],[65],[74,75,73],[],[],[66,79,76,55,67],[],[],[],[130,132,133,134,131,88,129],[68,82,81],[],[],[13],[86,26,85],[],[],[],[],[90],[],[92],[93,44,45],[95,94,96],[],[],[],[],[99],[],[48,104],[102],[105,49,45],[48,23],[],[106,103,16],[],[108,150],[151,31,109,110,141],[79,110,45,153],[111,155],[162,112],[113,123,163,157],[164,114],[167,115],[175,116,117],[122,117],[118,177],[119,179],[191,120],[116,121,192,193,194],[116,199],[79,123,201,45],[204,206,127,205,125,124],[79,45,207],[126,216,217],[79,45,218],[225,224,128],[79,226,45],[],[131],[],[77,147],[78,149],[123,111,107,110],[77],[77,135],[77,136],[137,77],[77,138],[139,77],[78],[141,78],[78,142],[143,78],[144,78],[145,78],[148],[],[],[109],[152,135],[],[154],[],[159],[136,142],[156],[156,157],[160,156,161],[156],[136,142],[113,122,115,114],[],[166,165],[],[245,244,243,17],[171],[169],[],[168,169],[173,169,172],[169],[174],[],[118,119],[177],[178],[177],[183],[143,137,176],[180],[181,180,120],[185,184,180],[180],[79,137,176,186,187],[],[143,189,188,78],[],[190],[],[121],[196,181,195],[],[198,197],[],[291,290,293,292,88],[],[],[168,182,200],[],[203,170,202],[],[],[124],[215,125],[127,223],[79,209,210,138,208],[211,212,16],[],[214,144,188,78],[],[158,213,23],[],[190],[126],[],[],[145,139,220,219],[],[221,222],[],[302,300,303,301,88],[128],[],[],[227,146,228,140],[],[229,222],[],[231,246],[31,233,249,248,232],[233,250],[234,253],[261,235],[31,236,262,237,254],[166,237,45],[265,238,242,239],[271,239],[40,256,268,240],[275,241],[287,242],[63,269,239],[244],[],[233,234,237,230],[232],[231],[],[33],[35,247,251],[252],[],[257],[255],[],[254,255],[258,259,255],[255],[260,44],[],[236],[263,264,44],[],[],[241,240],[267],[],[270,266],[268,266],[269,78,266],[272,273,266],[266],[274,267,44],[],[280],[278,270,277],[],[77],[276],[276,281,282],[276],[284,283,285],[],[],[278,79,286,270,277],[],[289,279,288],[],[],[],[292],[],[294],[295,196,45],[297,296],[],[],[304,299],[306,222,45],[],[302],[],[298,299],[166,305],[],[]],"attribute":["If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Method Declaration ","PRIVATE","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Simple Name index ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","LESS","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Declaration ","ReturnStmt","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"fillCache-ArrayWrapperAny-","callMethodNameReferTo":{"276":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","61":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":307,"succs":[[1,18],[21,3,22,20,2],[3,24],[4,28],[5,37],[6,21,38,7,29],[13,7,41],[42,8,12,9],[48,9],[52,31,45,10],[54,11],[69,12],[53,46,9],[17,16,15,14],[],[16],[],[3,4,7,0],[2],[1],[],[],[23],[],[25,19,26],[],[27],[],[32],[30],[],[29,30],[33,34,30],[30],[35,36],[],[74,75,72,76,73],[6],[39,40,36],[],[],[],[11,10],[44],[],[47,43],[45,43],[46,67,43],[49,50,43],[43],[44,51,36],[],[],[],[59],[57,47,56],[],[66],[55],[55,60,61],[55],[63,62,64],[],[],[57,68,65,47,56],[],[],[],[105,107,109,106,108,73,104],[71,58,70],[],[],[],[],[75],[],[77],[78,41,36],[80,79,81],[],[],[],[83,125],[126,21,84,85,116],[68,85,41,128],[86,130],[137,87],[88,98,138,132],[139,89],[141,90],[149,91,92],[97,92],[93,151],[94,153],[165,95],[91,96,166,167,168],[173,91],[68,98,175,41],[178,180,102,179,99,100],[68,41,181],[101,192,193],[68,41,194],[201,200,103],[68,202,41],[],[106],[],[66,122],[67,124],[86,98,82,85],[66],[66,110],[66,111],[112,66],[66,113],[114,66],[67],[116,67],[67,117],[118,67],[119,67],[120,67],[123],[],[],[84],[127,110],[],[129],[],[134],[111,117],[131],[131,132],[135,131,136],[131],[111,117],[88,97,90,89],[],[13,140],[],[145],[143],[],[142,143],[147,143,146],[143],[148],[],[94,93],[151],[152],[151],[157],[112,118,150],[154],[155,154,95],[159,158,154],[154],[68,112,150,160,161],[],[118,163,162,67],[],[164],[],[96],[170,155,169],[],[172,171],[],[207,209,206,208,73],[],[],[142,156,174],[],[177,144,176],[],[],[99],[191,100],[102,199],[68,183,184,113,182],[185,186,188],[],[190,119,162,67],[],[133,189,187],[],[230,233,14,231,232],[],[164],[101],[],[],[120,114,196,195],[],[197,198],[],[292,290,291,293,73],[103],[],[],[203,121,204,115],[],[205,198],[],[],[208],[],[210],[211,170,41],[213,212],[],[],[215,239],[21,241,216,217,242],[243,217],[246,218],[234,219,220,52,248],[251,220,188,41],[255,228,222,221],[222,262],[258,223,229,52,266],[224,268],[281,225],[284,226],[236,21,228,261,227],[228,273,188,41],[53,222,259],[285,188,41],[231],[],[238,187],[229,214,220,217],[187],[253,234,218,187],[235,187],[236,187],[],[216],[215],[],[23],[240,25,244],[245],[],[219],[218],[249,250,36],[],[],[252,254,247,235],[],[],[298,300,297,301,299,73],[224,223,225],[257],[],[256,261],[258,256],[256,259,67],[256,260],[256,263,264],[256],[257,265,36],[],[267,36],[],[274],[270,260,271],[],[66],[269],[272,269],[275,269,276],[269],[278,279,277],[],[],[68,270,280,260,271],[],[272,283,282],[],[],[227],[287,286,237],[],[],[294,289],[296,198,41],[],[292],[],[288,289],[13,295],[],[],[],[299],[],[253,304],[302],[305,254,41],[253,187],[],[306,303,188],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","Method Declaration ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","ReturnStmt","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","POSTFIX_INCREMENT","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Simple Name keys ","Simple Name idx ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name add ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"hasNext-ArrayWrapperAny.WrapperIterator-","callMethodNameReferTo":{},"num":12,"succs":[[3,1,5,4,2],[],[],[4],[],[6],[8,7,0],[],[9,10,11],[],[],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type boolean ","Simple Name hasNext ","Block Stmt ","Return Stmt ","ReturnStmt","Binary Expr LESS ","Name Expr index ","LESS","Name Expr size "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"next-ArrayWrapperAny.WrapperIterator-","callMethodNameReferTo":{"33":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","326":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","250":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":347,"succs":[[13,1],[17,16,3,2,15],[3,19],[23,4],[26,16,6,5,27],[6,31],[7,44,43],[11,8,10,9,12],[],[],[11],[],[3,6,0],[2],[1],[],[],[18],[],[20,14,21],[],[22],[],[5],[4,41],[4],[],[29,28,30],[],[],[53,54,52,9,55],[33,32,25],[],[36,35,34],[],[],[42,39,24,37,38],[],[],[40],[],[],[84,86,85,87,88,9,83],[],[45,49,46,47],[],[],[51,50,48],[],[187,189,186,190,9,188],[],[],[],[54],[],[56],[57,43,30],[59,58,60],[],[],[],[62,104],[105,16,63,64,95],[42,64,43,107],[65,109],[116,66],[67,77,117,111],[118,68],[121,69],[129,70,71],[76,71],[72,131],[73,133],[145,74],[70,75,146,147,148],[70,153],[42,77,155,43],[158,160,81,159,79,78],[42,43,161],[80,172,173],[42,43,174],[181,180,82],[42,182,43],[],[85],[],[40,101],[41,103],[65,77,64,61],[40],[40,89],[40,90],[91,40],[40,92],[93,40],[41],[95,41],[41,96],[97,41],[98,41],[99,41],[102],[],[],[63],[106,89],[],[108],[],[113],[90,96],[110],[110,111],[114,110,115],[110],[90,96],[67,76,69,68],[],[120,119],[],[212,211,209,210],[125],[123],[],[122,123],[127,123,126],[123],[128],[],[72,73],[131],[132],[131],[137],[91,97,130],[134],[135,134,74],[139,138,134],[134],[42,91,130,140,141],[],[97,143,142,41],[],[144],[],[75],[150,135,149],[],[152,151],[],[259,258,261,260,9],[],[],[122,136,154],[],[157,124,156],[],[],[78],[171,79],[81,179],[42,163,164,92,162],[165,166,168],[],[170,98,142,41],[],[112,169,167],[],[282,285,209,283,284],[],[144],[80],[],[],[99,93,176,175],[],[177,178],[],[342,340,341,343,9],[82],[],[],[183,100,184,94],[],[185,178],[],[],[188],[],[48,193],[191],[194,49,43],[48,167],[],[195,192,168],[],[197,213],[16,199,216,215,198],[199,217],[200,220],[201,228],[16,202,229,203,221],[120,203,43],[232,204,208,205],[238,205],[242,223,235,206],[243,207],[255,208],[51,236,205],[],[211],[],[199,203,200,196],[198],[197],[],[18],[20,218,214],[219],[],[224],[222],[],[222,221],[225,226,222],[222],[227,30],[],[202],[230,231,30],[],[],[207,206],[234],[],[237,233],[235,233],[236,41,233],[239,240,233],[233],[234,241,30],[],[],[248],[246,237,245],[],[40],[244],[244,250,249],[244],[252,251,253],[],[],[246,42,254,237,245],[],[257,247,256],[],[],[],[260],[],[262],[263,150,43],[265,264],[],[],[267,291],[16,268,293,269,294],[295,269],[270,298],[286,271,272,242,300],[303,272,168,43],[305,280,274,273],[274,312],[308,275,281,242,316],[276,318],[331,277],[334,278],[288,280,16,311,279],[280,323,168,43],[51,274,309],[335,168,43],[283],[],[290,167],[281,272,266,269],[167],[286,48,270,167],[167,287],[288,167],[],[268],[267],[],[18],[292,20,296],[297],[],[271],[270],[301,302,30],[],[],[304,49,299,287],[],[276,275,277],[307],[],[306,311],[308,306],[306,309,41],[306,310],[306,313,314],[306],[307,315,30],[],[317,30],[],[324],[320,310,321],[],[40],[319],[322,319],[325,319,326],[319],[328,327,329],[],[],[320,42,330,310,321],[],[322,333,332],[],[],[279],[337,289,336],[],[],[344,339],[346,178,43],[],[342],[],[338,339],[120,345],[],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name next ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr index ","Name Expr cache ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Declaration ","Method Call Expr ","Simple Name add ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Name Expr Array ","Simple Name get ","Name Expr val ","Simple Name keys ","Simple Name idx ","Method Declaration ","ReturnStmt","Method Call Expr ","Name Expr cache ","Simple Name get ","Unary Expr ++ ","Simple Name index ","Method Declaration ","Name Expr index ","POSTFIX_INCREMENT","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr Array ","Simple Name getLength ","Name Expr val ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","This Expr ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","Field Access Expr ","Simple Name length ","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name get ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Name Expr mapped ","Name Expr result ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name put ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name index ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Return Stmt ","Name Expr index ","Primitive Type int ","Method Call Expr ","Simple Name fillCacheUntil ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Unary Expr ++ ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr size ","Simple Name size ","Name Expr size ","Variable Declarator int size = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Block Stmt ","Method Call Expr ","Name Expr cache ","Simple Name size ","Block Stmt ","Simple Name i ","Simple Name toInt ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","LESS","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Name Expr nextToken ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","For Stmt ","Variable Declaration Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Unary Expr ++ ","Return Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int index ","Block Stmt ","Name Expr cache ","Name Expr index ","Name Expr cache ","Name Expr index ","Primitive Type int ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr cache ","Method Call Expr ","Name Expr cache ","Simple Name size ","Method Call Expr ","Simple Name get ","Block Stmt ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name size ","Variable Declaration Expr ","Simple Name element ","Name Expr Array ","Name Expr val ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name get ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Name Expr val ","Assign Expr ASSIGN ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache "]}
{"fileName":"src/main/java/com/jsoniter/any/ArrayWrapperAny.java","version":"0.9.23","methodName":"remove-ArrayWrapperAny.WrapperIterator-","callMethodNameReferTo":{},"num":9,"succs":[[4,1,5,3,2],[],[],[4],[],[6],[7],[8],[]],"attribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Simple Name remove ","Block Stmt ","Throw Stmt ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException "]}
