{"fileName":"src/test/java/com/jsoniter/output/TestSpiPropertyEncoder.java","version":"0.9.22","hasMethodName":["test_PropertyEncoder-TestSpiPropertyEncoder-","test_PropertyEncoder_for_type_literal-TestSpiPropertyEncoder-"]}
{"fileName":"src/test/java/com/jsoniter/output/TestSpiPropertyEncoder.java","version":"0.9.22","methodName":"test_PropertyEncoder-TestSpiPropertyEncoder-","callMethodNameReferTo":{"68":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object"},"num":80,"succs":[[1,13],[2,50],[3,58],[4,63],[71],[10,7,9,12,6,8],[],[8],[],[11],[],[],[4,2,0,1,3],[17,18,15,16,14],[],[],[19],[20],[21],[],[],[],[27,26,25,23,24,28,9,29,6],[],[25],[],[31,34],[35,33],[],[37,36],[31],[],[33],[],[],[],[38],[45],[41],[30],[39],[43,42,39],[39],[44,30],[],[46,32,47],[],[40,48,49],[],[],[54],[52],[],[51],[55,52,56],[52],[57],[],[59,60,61],[62,51],[],[20],[],[66],[53],[64],[64,67,68],[64],[70,69,53],[],[],[65,73,72],[],[74,76,77,75],[20],[],[78],[79],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_PropertyEncoder ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Class Or Interface Type TestObject1 ","Variable Declarator TestObject1 obj = ","Class Expr TestObject1.class ","String Literal Expr Not Empty  ","Object Creation Expr Encoder Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","StringLiteralExpr","Class Or Interface Type Encoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Name Expr iter ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Simple Name encode ","Simple Name stream ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Simple Name str ","Name Expr str ","Variable Declarator String str = ","Class Or Interface Type String ","Class Or Interface Type JsonIterator ","Class Or Interface Type String ","Method Call Expr ","Simple Name writeVal ","Method Call Expr ","Name Expr Integer ","Simple Name valueOf ","Variable Declaration Expr ","Name Expr ctx ","Simple Name obj ","Name Expr obj ","Variable Declarator TestObject1 obj = ","Name Expr JsoniterSpi ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Method Call Expr ","Name Expr JsonStream ","ASSIGN","String Literal Expr Not Empty  ","Name Expr System ","Expression Stmt ","Class Or Interface Type String ","Name Expr output ","Variable Declarator String output = ","Simple Name append ","Method Call Expr ","Field Access Expr ","Simple Name serialize ","Method Call Expr ","Return Stmt ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","'''","'''"]}
{"fileName":"src/test/java/com/jsoniter/output/TestSpiPropertyEncoder.java","version":"0.9.22","methodName":"test_PropertyEncoder_for_type_literal-TestSpiPropertyEncoder-","callMethodNameReferTo":{"79":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object-OutputStream"},"num":91,"succs":[[1,14],[22,2],[3,61],[69,4],[74,5],[82],[13,9,11,8,10,7],[],[9],[],[12],[],[],[1,5,3,0,2,4],[18],[16],[],[15,16],[20,16,19],[16],[21],[],[23,26,15,25,24],[],[],[27],[28],[],[],[30,35,33,34,32,36,10,31,7],[],[32],[],[41,38],[42,40],[],[44,43],[38],[],[40],[],[],[],[45],[52],[48],[37],[46],[46,50,49],[46],[51,37],[],[54,39,53],[],[55,56,57],[47,58,59],[],[60],[],[],[],[65],[63],[],[62],[63,66,67],[63],[68],[],[72,71,70],[62,73],[],[27],[],[77],[17,64],[75],[78,79,75],[75],[17,81,80,64],[],[],[76,83,84],[],[87,86,85,88],[27],[],[89],[90],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_PropertyEncoder_for_type_literal ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr typeLiteral ","Simple Name typeLiteral ","Method Call Expr ","Variable Declarator TypeLiteral<TestObject1<Object>> typeLiteral = ","Class Or Interface Type TypeLiteral ","Object Creation Expr TypeLiteral<TestObject1<Object>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerPropertyEncoder ","String Literal Expr Not Empty  ","Object Creation Expr Encoder Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type Encoder ","Method Declaration Throws ","Switch Entry Stmt ","Name Expr iter ","Simple Name append ","Parameter Object obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr stream ","Simple Name stream ","Class Or Interface Type Object ","Name Expr attachment ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Simple Name str ","Char Literal Expr ''' ","Variable Declarator String str = ","Simple Name toLong ","Class Or Interface Type JsonIterator ","Simple Name field1 ","Method Call Expr ","Simple Name writeVal ","Binary Expr PLUS ","Method Call Expr ","PLUS","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name valueOf ","IntegerLiteralExpr","Method Call Expr ","Class Or Interface Type Map ","Simple Name val ","Name Expr obj ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Return Stmt ","Name Expr JsonStream ","ASSIGN","Simple Name param ","Name Expr stream ","Variable Declaration Expr ","Method Call Expr ","Name Expr output ","Variable Declarator String output = ","Simple Name append ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Class Or Interface Type JsonIterator ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","'''","'''"]}
