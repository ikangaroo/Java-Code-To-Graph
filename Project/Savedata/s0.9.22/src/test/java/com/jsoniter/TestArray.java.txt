{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","hasMethodName":["test_empty_array-TestArray-","test_one_element-TestArray-","test_two_elements-TestArray-","test_three_elements-TestArray-","test_four_elements-TestArray-","test_five_elements-TestArray-","test_null-TestArray-","test_boolean_array-TestArray-","test_iterator-TestArray-","test_array_lazy_any_to_string-TestArray-"]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_empty_array-TestArray-","callMethodNameReferTo":{"33":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","51":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","70":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","40":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","88":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","77":"src/main/java/com/jsoniter/any/Any.java-size-Any-","14":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-"},"num":95,"succs":[[1,19],[38,2],[3,42],[4,46],[5,55],[6,61],[65,7],[8,74],[9,79],[10,83],[90],[16,14,13,18,15,12],[],[14],[],[17],[],[],[9,6,3,8,2,10,1,7,5,0,4],[31],[21],[],[20,21],[22,21],[23,21],[24,21],[25,21],[21,26],[27,21],[28,21],[21,29],[33,32,21],[21],[34,35,36],[],[],[37],[],[39,40],[],[20,41],[],[44,22,43],[],[45,23],[],[49],[24],[47],[50,51,47],[47],[52,53,24],[],[54],[],[57,58,56],[],[59],[60,48],[],[],[25,62,63],[],[64,26],[],[68],[27],[66],[66,70,69],[66],[27,71,72],[],[73],[],[76,77,75],[],[59],[67,78],[],[28,81,80],[],[82,29],[],[86],[30],[84],[87,84,88],[84],[30,89],[],[93,91,92],[],[59],[94,85],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Class Or Interface Type ReflectionEncoder ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Method Call Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Void Type ","Simple Name lang ","This Expr ","Name Expr iter ","Name Expr iter ","Name Expr desc ","Name Expr iter ","Simple Name list ","Variable Declarator JsonIterator iter = ","Name Expr JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name readArray ","Field Access Expr ","Simple Name reset ","Field Access Expr ","Name Expr any ","Expression Stmt ","Simple Name array ","Name Expr array ","Variable Declarator int[] array = ","Array Type 1 ","Method Call Expr ","Null Literal Expr ","Class Expr int[].class ","Simple Name parse ","Expression Stmt ","Return Stmt ","Class Or Interface Type T ","Field Access Expr ","Zero IntegerLiteralExpr","Simple Name length ","Assign Expr ASSIGN ","Simple Name reset ","Field Access Expr ","Name Expr any ","Variable Declaration Expr ","Simple Name head ","Simple Name desc ","Variable Declarator List<String> list = ","Expression Stmt ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<List<String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Assign Expr ASSIGN ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Class Or Interface Type Any ","Variable Declaration Expr ","Simple Name any ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr JsonIterator ","Integer Literal Expr Note Zero  ","Simple Name extensions ","Simple Name size "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_one_element-TestArray-","callMethodNameReferTo":{"128":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","67":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","103":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","72":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","169":"src/main/java/com/jsoniter/JsonIterator.java-readArrayCB-JsonIterator-ReadArrayCallback-Object","74":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","138":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","144":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","113":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","83":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","55":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","120":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","152":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","156":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","189":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","62":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","94":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]"},"num":201,"succs":[[1,29],[2,60],[3,64],[70,4],[74,5],[6,78],[87,7],[94,8],[9,98],[10,107],[11,113],[117,12],[13,128],[14,132],[15,144],[16,148],[156,17],[18,160],[169,19],[195],[25,22,23,27,24,21],[],[23],[],[26],[],[],[9,3,11,14,10,2,16,13,7,12,18,0,15,6,19,5,1,4,8,17],[20,192,174,191],[53],[31],[],[30,31],[31,32],[31,33],[31,34],[31,35],[36,31],[31,37],[31,38],[31,39],[40,31],[31,41],[42,31],[31,43],[31,44],[45,31],[31,46],[31,47],[48,31],[49,31],[50,31],[182,31,51],[31,54,55],[31],[57,56,58],[],[],[59],[],[62,61],[],[30,63],[],[66,67,65],[],[68],[32,69],[],[],[71,72],[],[33,73],[],[76,75,34],[],[77,35],[],[81],[36],[79],[79,82,83],[79],[85,36,84],[],[86],[],[88,89,80],[],[92,90,91],[],[],[93],[68],[37,96,95],[],[97,38],[],[101],[39],[99],[102,99,103],[99],[105,39,104],[],[106],[],[100,109,108],[],[111,110,112],[],[],[68],[40,114,115],[],[116,41],[],[119,120,118],[],[121,122,123],[42,125,126],[],[],[124],[68],[],[127],[],[129,130,43],[],[131,44],[],[133,134,135],[],[68],[137,136],[138,139],[],[45,141,140],[143],[],[142],[],[],[146,145,46],[],[47,147],[],[149,150,151],[],[68],[152,154,153],[48,155],[],[143],[],[49,157,158],[],[50,159],[],[164,165],[162],[],[161,162],[],[167,162,166],[162],[168],[],[170,51,171,172],[],[173],[194],[],[180,175,177,176,178,179,181,24,21],[],[177],[],[182,183],[185,184],[],[186,28],[],[],[],[],[187],[161,188,189],[],[190,52],[],[],[193],[],[],[196,163,197],[],[199,200,198],[],[],[68]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Field Access Expr ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_one_element ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Expression Stmt ","Name Expr iter ","String Literal Expr Not Empty  ","Simple Name desc ","Name Expr iter ","Primitive Type byte ","Null Literal Expr ","This Expr ","Name Expr list ","Null Literal Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Simple Name read ","Class Or Interface Type java ","Name Expr iter ","Primitive Type byte ","Name Expr iter ","Void Type ","Primitive Type byte ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Name Expr JsonStream ","Method Call Expr ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name reset ","Simple Name writeVal ","Primitive Type int ","Variable Declaration Expr ","Simple Name array ","Name Expr array ","Variable Declarator int[] array = ","Array Type 1 ","Method Call Expr ","Simple Name wrap ","Class Expr int[].class ","Array Type 1 ","Method Call Expr ","Expression Stmt ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Name Expr obj ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Variable Declaration Expr ","Simple Name code ","Name Expr iter ","Variable Declarator List<Integer> list = ","Class Or Interface Type List ","Method Call Expr ","Name Expr data ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Name Expr System ","Simple Name asList ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Simple Name writeVal ","Simple Name buf ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr Object Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Simple Name field1 ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Simple Name o ","Simple Name read ","Class Expr Object[].class ","Array Type 1 ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Array Access Expr 0 ","Simple Name toInt ","Method Call Expr ","Integer Literal Expr Note Zero  ","Simple Name read ","Class Expr Any[].class ","Array Type 1 ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Expression Stmt ","Return Stmt ","Name Expr i ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Integer Literal Expr Zero  ","Simple Name readAny ","Method Call Expr ","Simple Name reset ","Simple Name iterator ","Simple Name buf ","Variable Declaration Expr [FINAL] ","Name Expr Base64 ","Simple Name values ","Name Expr values ","FINAL","Variable Declarator List<Integer> values = ","Class Or Interface Type List ","Object Creation Expr ArrayList<Integer> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Method Call Expr ","Simple Name readArrayCB ","Object Creation Expr JsonIterator.ReadArrayCallback Optional.empty Optional.empty ","Void Type ","Class Or Interface Type ReadArrayCallback ","Method Declaration Throws ","Marker Annotation Expr @Override ","Simple Name println ","Simple Name handle ","Parameter JsonIterator iter ","Parameter Object attachment ","Class Or Interface Type IOException ","Block Stmt ","Simple Name iter ","Class Or Interface Type JsonIterator ","Class Or Interface Type Object ","Simple Name attachment ","Expression Stmt ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name readInt ","ReturnStmt","Null Literal Expr ","true","NullLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Name Expr Arrays ","Class Or Interface Type Object ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_two_elements-TestArray-","callMethodNameReferTo":{"66":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","130":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","163":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","71":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","169":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","139":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","76":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","112":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","176":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-","149":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","54":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","91":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","123":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","155":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","61":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-"},"num":184,"succs":[[28,1],[59,2],[63,3],[69,4],[73,5],[6,78],[7,82],[8,86],[9,95],[103,10],[11,107],[12,116],[13,123],[127,14],[15,139],[16,143],[17,155],[159,18],[167,19],[173],[23,22,25,27,24,21],[],[23],[],[26],[],[],[15,17,0,8,12,4,6,19,14,7,1,5,11,16,3,9,13,10,2,18],[52],[30],[],[30,29],[30,31],[30,32],[30,33],[30,34],[30,35],[36,30],[37,30],[38,30],[39,30],[30,40],[30,41],[30,42],[30,43],[44,30],[45,30],[46,30],[47,30],[48,30],[30,49],[50],[30,53,54],[30],[55,57,56],[],[],[58],[],[60,61],[],[62,29],[],[64,66,65],[],[67],[31,68],[],[],[70,71],[],[32,72],[],[74,76,75],[],[67],[77,33],[],[80,79],[],[34,81],[],[83,84,35],[],[36,85],[],[89],[37],[87],[87,91,90],[87],[92,37,93],[],[94],[],[97,88,96],[],[99,100,98],[],[],[102,101],[67],[67],[104,38,105],[],[39,106],[],[110],[40],[108],[111,112,108],[108],[40,114,113],[],[115],[],[118,117,109],[],[120,121,122,119],[],[],[67],[67],[125,124,41],[],[126,42],[],[130,129,128],[],[133,131,132],[136,137,43],[],[],[134,135],[67],[67],[],[138],[],[140,44,141],[],[45,142],[],[145,144,146],[],[67],[148,147],[150,149],[],[46,151,152],[154],[],[153],[],[],[157,47,156],[],[48,158],[],[161,160,162],[],[67],[163,165,164],[49,166],[],[154],[],[169,168,50],[],[172,170,171],[],[],[58],[174,175,176],[],[179,177,178,180,181],[51,183],[],[],[67],[182],[67],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_two_elements ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Primitive Type long ","Class Or Interface Type Long ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr data ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Simple Name fromNames ","Expression Stmt ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertFalse ","Variable Declarator int x = ","Simple Name readArray ","Variable Declaration Expr ","Simple Name reset ","Simple Name writeVal ","Char Literal Expr ''' ","Expression Stmt ","Simple Name array ","Name Expr array ","Variable Declarator int[] array = ","Array Type 1 ","Method Call Expr ","Null Literal Expr ","Class Expr int[].class ","Simple Name parse ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Simple Name stream ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Name Expr val ","Variable Declaration Expr ","Simple Name list ","Name Expr list ","Variable Declarator List<Integer> list = ","Variable Declaration Expr ","Method Call Expr ","Simple Name size ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Array Access Expr count++ ","Method Call Expr ","Name Expr Arrays ","Name Expr Double ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Unary Expr -- ","Method Call Expr ","Assign Expr ASSIGN ","Method Call Expr ","Method Call Expr ","Name Expr String ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Simple Name read ","Class Expr Object[].class ","Array Type 1 ","Method Call Expr ","Simple Name reset ","Simple Name writeVal ","Simple Name buf ","Method Call Expr ","Array Access Expr count++ ","Integer Literal Expr Note Zero  ","Method Call Expr ","Array Access Expr 0 ","Simple Name toInt ","Method Call Expr ","Integer Literal Expr Zero  ","Simple Name head ","Class Expr Any[].class ","Array Type 1 ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reset ","Simple Name writeVal ","Simple Name obj ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Integer Literal Expr Note Zero  ","Simple Name readAny ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name asList ","Integer Literal Expr Note Zero  ","Null Literal Expr ","Integer Literal Expr Note Zero  ","NullLiteralExpr","Simple Name read "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_three_elements-TestArray-","callMethodNameReferTo":{"161":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","66":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","100":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","134":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","71":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","167":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","76":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","141":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","80":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","85":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","54":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","89":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","122":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","91":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","61":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-"},"num":179,"succs":[[1,28],[59,2],[63,3],[69,4],[73,5],[6,78],[7,82],[8,87],[91,9],[10,95],[11,104],[113,12],[117,13],[14,126],[134,15],[16,138],[151,17],[155,18],[167,19],[171],[23,25,22,24,27,21],[],[23],[],[26],[],[],[8,7,1,0,14,17,12,11,2,10,3,18,16,6,19,5,13,15,9,4],[52],[30],[],[30,29],[30,31],[30,32],[30,33],[30,34],[30,35],[30,36],[30,37],[30,38],[30,39],[30,40],[30,41],[30,42],[43,30],[30,44],[30,45],[30,46],[47,30],[48,30],[30,49],[50,30],[30,53,54],[30],[56,55,57],[],[],[58],[],[61,60],[],[62,29],[],[66,65,64],[],[67],[68,31],[],[],[70,71],[],[72,32],[],[75,76,74],[],[67],[77,33],[],[79,80],[],[81,34],[],[84,85,83],[],[67],[35,86],[],[89,88],[],[36,90],[],[93,92,37],[],[38,94],[],[98],[39],[96],[99,100,96],[96],[102,101,39],[],[103],[],[97,106,105],[],[108,109,107],[],[],[111,110,112],[67],[67],[67],[40,114,115],[],[116,41],[],[120],[42],[118],[118,122,121],[118],[42,124,123],[],[125],[],[119,127,128],[],[129,131,132,130,133],[],[],[67],[67],[67],[43,136,135],[],[44,137],[],[139,140,141],[],[142,144,143],[45,148,149],[],[],[146,147,145],[67],[67],[67],[],[150],[],[152,153,46],[],[47,154],[],[157,156,158],[],[67],[160,159],[161,162],[],[48,164,163],[166],[],[165],[],[],[169,168,49],[],[50,170],[],[172,174,173],[],[67],[175,176,177],[51,178],[],[166],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Class Or Interface Type GsonCompatibilityMode ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_three_elements ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Null Literal Expr ","Simple Name iter ","Name Expr mode ","Name Expr iter ","Name Expr iter ","This Expr ","Void Type ","This Expr ","Name Expr list ","This Expr ","Name Expr iter ","This Expr ","This Expr ","Name Expr iter ","Name Expr iter ","Name Expr keys ","Name Expr iter ","This Expr ","Simple Name size ","Name Expr iter ","This Expr ","Simple Name wrap ","Primitive Type byte ","Variable Declarator JsonIterator iter = ","Field Access Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Array Access Expr count++ ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name toFloat ","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Class Or Interface Type SimpleObject ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Simple Name readArray ","Variable Declaration Expr [FINAL] ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name reset ","Array Type 1 ","Primitive Type int ","Variable Declaration Expr ","Simple Name array ","Name Expr array ","Variable Declarator int[] array = ","Array Type 1 ","Method Call Expr ","Simple Name read ","Class Expr int[].class ","Array Type 1 ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Name Expr globalMapKeyDecoders ","Simple Name reset ","Name Expr buffered ","Simple Name buf ","Variable Declaration Expr ","Simple Name list ","Name Expr list ","Variable Declarator List<Integer> list = ","Class Or Interface Type List ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Simple Name setter ","Simple Name length ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr Object Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Class Or Interface Type Object ","Array Creation Level Dimension Empty ","Simple Name serialize ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Simple Name read ","Class Expr Object[].class ","Array Type 1 ","Return Stmt ","Simple Name reset ","Method Call Expr ","Simple Name buf ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Array Access Expr 0 ","Simple Name clazz ","Method Call Expr ","Integer Literal Expr Zero  ","Null Literal Expr ","Class Expr Any[].class ","Array Type 1 ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Array Access Expr pos + 1 ","Simple Name c ","Method Call Expr ","Class Or Interface Type TypeLiteral ","Simple Name toInt ","Integer Literal Expr Zero  ","Simple Name readAny "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_four_elements-TestArray-","callMethodNameReferTo":{"65":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","98":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","70":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","102":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","167":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","104":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","136":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","75":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","80":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","113":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","177":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","84":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","149":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","183":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","89":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","58":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","156":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","93":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","127":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","191":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-"},"num":195,"succs":[[30,1],[63,2],[67,3],[73,4],[77,5],[6,82],[7,86],[8,91],[95,9],[100,10],[104,11],[108,12],[117,13],[127,14],[15,131],[140,16],[17,149],[153,18],[167,19],[20,171],[21,183],[187],[24,29,26,25,27,23],[],[25],[],[28],[],[],[15,20,5,3,14,17,10,4,21,16,8,1,12,19,9,11,7,6,18,0,13,2],[56],[32],[],[31,32],[33,32],[34,32],[35,32],[36,32],[32,37],[38,32],[39,32],[40,32],[41,32],[42,32],[43,32],[44,32],[45,32],[32,46],[47,32],[48,32],[49,32],[50,32],[32,51],[52,32],[53,32],[54,32],[58,57,32],[32],[59,60,61],[],[],[62],[],[65,64],[],[31,66],[],[68,69,70],[],[71],[33,72],[],[],[74,75],[],[34,76],[],[80,78,79],[],[71],[81,35],[],[84,83],[],[85,36],[],[88,87,89],[],[71],[90,37],[],[92,93],[],[38,94],[],[98,96,97],[],[71],[39,99],[],[102,101],[],[40,103],[],[41,106,105],[],[42,107],[],[111],[43],[109],[113,112,109],[109],[115,43,114],[],[116],[],[118,110,119],[],[122,120,121],[],[],[126,123,124,125],[71],[71],[71],[71],[44,129,128],[],[45,130],[],[134],[46],[132],[136,135,132],[132],[137,46,138],[],[139],[],[142,133,141],[],[143,145,147,144,148,146],[],[],[71],[71],[71],[71],[47,150,151],[],[48,152],[],[154,155,156],[],[159,157,158],[165,164,49],[],[],[162,160,161,163],[71],[71],[71],[71],[],[166],[],[168,50,169],[],[170,51],[],[172,174,173],[],[71],[176,175],[177,178],[],[179,52,180],[182],[],[181],[],[],[184,53,185],[],[54,186],[],[189,190,188],[],[71],[192,193,191],[194,55],[],[182],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name copyGlobalTypeEncoder ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_four_elements ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","This Expr ","Simple Name iter ","Void Type ","Simple Name size ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr tail ","Name Expr iter ","Name Expr iter ","Name Expr keys ","Name Expr desc ","Name Expr iter ","This Expr ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Primitive Type float ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Variable Declaration Expr ","Simple Name clazz ","Name Expr array ","Variable Declarator int[] array = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name read ","Class Expr int[].class ","Simple Name parse ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Variable Declaration Expr ","Simple Name list ","Name Expr list ","Variable Declarator List<Integer> list = ","Return Stmt ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Name Expr Arrays ","Simple Name asList ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Primitive Type int ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr Object Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Class Or Interface Type Object ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Simple Name read ","Class Expr Object[].class ","Array Type 1 ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Name Expr val ","Variable Declaration Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","Array Access Expr 0 ","Simple Name toInt ","Method Call Expr ","Integer Literal Expr Zero  ","Simple Name read ","Class Expr Any[].class ","Array Type 1 ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reset ","Name Expr notFirst ","Primitive Type int ","Method Call Expr ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Integer Literal Expr Zero  ","Simple Name readAny "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_five_elements-TestArray-","callMethodNameReferTo":{"97":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","193":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","164":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","69":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","199":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","74":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","106":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","171":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","141":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","79":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","207":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","115":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","84":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","117":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","150":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","183":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]","88":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","93":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","62":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","126":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T"},"num":211,"succs":[[1,32],[67,2],[71,3],[4,77],[81,5],[6,86],[90,7],[95,8],[99,9],[10,104],[108,11],[12,113],[13,117],[14,121],[130,15],[16,141],[17,145],[154,18],[19,164],[20,168],[21,183],[22,187],[199,23],[203],[29,31,28,27,26,25],[],[27],[],[30],[],[],[19,4,10,13,22,12,2,15,7,17,18,16,1,21,6,14,20,23,0,9,5,8,11,3],[60],[34],[],[33,34],[35,34],[34,36],[34,37],[38,34],[39,34],[34,40],[34,41],[34,42],[34,43],[34,44],[45,34],[34,46],[47,34],[34,48],[34,49],[34,50],[51,34],[52,34],[53,34],[54,34],[34,55],[56,34],[57,34],[58,34],[61,34,62],[34],[63,64,65],[],[],[66],[],[68,69],[],[33,70],[],[74,72,73],[],[75],[76,35],[],[],[78,79],[],[36,80],[],[82,83,84],[],[75],[85,37],[],[87,88],[],[38,89],[],[91,92,93],[],[75],[39,94],[],[97,96],[],[98,40],[],[101,100,102],[],[75],[103,41],[],[106,105],[],[42,107],[],[110,111,109],[],[75],[112,43],[],[115,114],[],[116,44],[],[118,45,119],[],[46,120],[],[124],[47],[122],[126,122,125],[122],[47,127,128],[],[129],[],[131,132,123],[],[135,134,133],[],[],[140,137,136,139,138],[75],[75],[75],[75],[75],[143,142,48],[],[144,49],[],[148],[50],[146],[149,146,150],[146],[152,151,50],[],[153],[],[156,147,155],[],[160,162,157,161,163,159,158],[],[],[75],[75],[75],[75],[75],[165,51,166],[],[52,167],[],[169,170,171],[],[174,173,172],[181,53,180],[],[],[177,179,178,175,176],[75],[75],[75],[75],[75],[],[182],[],[184,54,185],[],[186,55],[],[188,189,190],[],[75],[192,191],[194,193],[],[196,56,195],[198],[],[197],[],[],[201,57,200],[],[58,202],[],[206,204,205],[],[75],[208,207,209],[59,210],[],[198],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Class Or Interface Type GsonCompatibilityMode ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_five_elements ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr keys ","Simple Name iter ","Name Expr iter ","Name Expr sLen ","Name Expr iter ","Void Type ","Name Expr iter ","This Expr ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Primitive Type byte ","Void Type ","Name Expr iter ","Primitive Type byte ","Name Expr keys ","Name Expr iter ","Name Expr bits ","Null Literal Expr ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Field Access Expr ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name replace ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Simple Name readInt ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Name Expr any ","Variable Declaration Expr ","Simple Name array ","Name Expr array ","Variable Declarator int[] array = ","Array Type 1 ","Method Call Expr ","Null Literal Expr ","Class Expr int[].class ","Array Type 1 ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Name Expr i ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Simple Name getField ","Name Expr any ","Variable Declaration Expr ","Name Expr bits ","Name Expr list ","Variable Declarator List<Integer> list = ","Class Or Interface Type JsonAnyGetter ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Name Expr Arrays ","Simple Name asList ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Class Or Interface Type ParameterizedType ","Array Creation Expr Object Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Class Or Interface Type Object ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Simple Name desc ","Class Expr Object[].class ","Array Type 1 ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Class Or Interface Type TestObject10 ","Simple Name c ","Method Call Expr ","Array Access Expr 0 ","Simple Name toInt ","Method Call Expr ","Integer Literal Expr Zero  ","Simple Name read ","Class Expr Any[].class ","Array Type 1 ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Integer Literal Expr Zero  ","Simple Name readAny "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_null-TestArray-","callMethodNameReferTo":{"22":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":26,"succs":[[1,10],[20],[7,5,4,9,6,3],[],[5],[],[8],[],[],[1,0],[13],[12],[],[14,15,12],[12],[17,18,16],[],[],[19],[],[22,21],[],[11,24,23],[],[25],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_null ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Primitive Type byte ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Simple Name read ","Class Expr double[].class ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_boolean_array-TestArray-","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":35,"succs":[[1,10],[20],[7,4,5,6,9,3],[],[5],[],[8],[],[],[1,0],[13],[12],[],[15,14,12],[12],[17,16,18],[],[],[19],[],[22,21,23],[],[25,26,24],[33,32,11],[],[],[28,27,29],[30],[31],[30],[],[],[],[34],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_boolean_array ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr boolean Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Primitive Type boolean ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Boolean Literal Expr true ","Boolean Literal Expr false ","Boolean Literal Expr true ","true","false","Simple Name type ","Class Expr boolean[].class ","Array Type 1 "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_iterator-TestArray-","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","67":"src/main/java/com/jsoniter/any/Any.java-iterator-Any-","55":"src/main/java/com/jsoniter/any/Any.java-iterator-Any-","108":"src/main/java/com/jsoniter/any/Any.java-iterator-Any-"},"num":142,"succs":[[24,1],[2,37],[57,3],[65,4],[69,5],[6,76],[7,83],[86,8],[9,93],[10,100],[107,11],[12,110],[117,13],[14,124],[15,131],[138],[21,18,19,20,23,17],[],[19],[],[22],[],[],[9,15,14,0,4,2,11,8,3,10,12,7,6,13,1,5],[30],[26],[],[26,25],[27,26],[28,26],[31,26,32],[26],[34,33,35],[],[],[36],[],[53],[25],[38],[38,27,39],[40],[41,40],[42,28,40],[43],[44,43],[45,43],[29,46,43],[47],[47,48],[47,49],[47,50],[51,47],[38,54,55],[38],[56,25],[],[58,59,60],[],[61],[63,62],[],[64,39],[],[],[67,66,40],[],[68,27],[],[71,70,72],[],[61],[74,73],[41,75],[],[],[77,78,79],[],[61],[80,81],[42,82],[],[],[66,43,84],[28,85],[],[87,88,89],[],[61],[91,90],[44,92],[],[],[94,96,95],[],[61],[98,97],[45,99],[],[],[102,103,101],[],[61],[105,104],[46,106],[],[],[66,47,108],[109,29],[],[113,112,111],[],[61],[115,114],[116,48],[],[],[118,120,119],[],[61],[122,121],[123,49],[],[],[126,125,127],[],[61],[128,129],[50,130],[],[],[134,133,132],[],[61],[135,136],[137,51],[],[],[140,139],[],[141,52],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_iterator ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr any ","Name Expr any ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Name Expr JsonIterator ","Name Expr allBindings ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr iter ","Name Expr copy ","Name Expr iter ","Simple Name head ","Primitive Type long ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Simple Name mask ","Name Expr gson ","Name Expr iter ","Variable Declarator Iterator<Any> iter = ","Class Or Interface Type Iterator ","Method Call Expr ","Simple Name iterator ","Return Stmt ","Simple Name assertEquals ","Simple Name c ","Method Call Expr ","IntegerLiteralExpr","Method Call Expr ","Simple Name toInt ","Simple Name next ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name iterator ","Expression Stmt ","Class Or Interface Type TestObject11 ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Assign Expr ASSIGN ","Name Expr IterImplNumber ","Simple Name iterator ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Primitive Type byte ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Primitive Type byte ","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Class Or Interface Type GsonBuilder ","Simple Name toInt ","Primitive Type byte ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name iterator ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Expression Stmt ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name next ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name hasNext "]}
{"fileName":"src/test/java/com/jsoniter/TestArray.java","version":"0.9.22","methodName":"test_array_lazy_any_to_string-TestArray-","callMethodNameReferTo":{"20":"src/main/java/com/jsoniter/any/Any.java-asList-Any-","22":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","14":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","31":"src/main/java/com/jsoniter/any/Any.java-toString-Any-"},"num":33,"succs":[[1,8],[19,2],[28],[7,5,6,4],[],[6],[],[1,0,2],[12],[10],[],[9,10],[13,14,10],[10],[15,17,16],[],[],[18],[],[22,20,21],[23,9],[],[25,26,24],[],[],[],[27],[],[31,30,29],[],[18],[32,11],[]],"attribute":["Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_array_lazy_any_to_string ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr any ","Method Call Expr ","Class Or Interface Type Any ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name add ","Method Call Expr ","Name Expr result ","Name Expr Any ","Simple Name wrap ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Binary Expr MULTIPLY ","Method Call Expr ","Simple Name toString "]}
