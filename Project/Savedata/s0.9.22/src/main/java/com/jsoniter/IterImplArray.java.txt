{"fileName":"src/main/java/com/jsoniter/IterImplArray.java","version":"0.9.22","hasMethodName":["readArray-IterImplArray-JsonIterator","readArrayCB-IterImplArray-JsonIterator-JsonIterator.ReadArrayCallback-Object"]}
{"fileName":"src/main/java/com/jsoniter/IterImplArray.java","version":"0.9.22","methodName":"readArray-IterImplArray-JsonIterator","callMethodNameReferTo":{"48":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator","54":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator"},"num":81,"succs":[[1,39],[17,20,14,11,3,2],[17,20,40,14,11,3],[10,4,5,50,6],[51],[52,6],[56,7],[8,10,58,57,44],[9,60],[63,10,22,62],[22,11,65,62],[12,50,13],[59],[14,22,67,62],[16,15,50],[68],[17,69,22,62],[19,50,18],[70],[20,22,71,62],[50,21],[72],[32,30,25,27,24,29,26,28,23],[24],[25],[],[27],[],[38,34],[31],[],[],[0,1],[34],[],[34,33],[34,35],[36,34],[],[46],[41,33],[],[43,40,2,35],[],[42],[42,44],[47,40,48],[40],[49,41,33],[],[],[],[53,42,54],[],[43,55,35],[],[9,8],[],[59],[],[61,36],[],[],[64],[],[66],[],[66],[],[64],[],[66],[75,74,73,37],[],[76],[77,78,79],[],[76],[],[45,80],[]],"attribute":["Expression Stmt ","Switch Stmt ","Name Expr c ","Switch Entry Stmt ","Char Literal Expr '[' ","Cast Expr ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Name Expr JsonIterator ","Return Stmt ","Switch Entry Stmt ","Primitive Type int ","Return Stmt ","Switch Entry Stmt ","Char Literal Expr '}' ","Return Stmt ","Switch Entry Stmt ","Class Or Interface Type com ","Return Stmt ","Switch Entry Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type boolean ","Simple Name readArray ","Parameter final JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Simple Name read ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name c ","Simple Name jsoniter ","Name Expr c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name writeNull ","SwitchEntryStmt","'['","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name unreadByte ","ReturnStmt","Boolean Literal Expr true ","true","Boolean Literal Expr false ","false","Boolean Literal Expr false ","','","Null Literal Expr ","'n'","Boolean Literal Expr false ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Primitive Type char "]}
{"fileName":"src/main/java/com/jsoniter/IterImplArray.java","version":"0.9.22","methodName":"readArrayCB-IterImplArray-JsonIterator-JsonIterator.ReadArrayCallback-Object","callMethodNameReferTo":{"64":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator","72":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator","88":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator"},"num":113,"succs":[[53,1],[66,2],[67,68,56,3,17],[4,70],[5,74],[76,75,59,6,16],[7,78],[8,80],[9,10,82,81],[21,10,84,85],[87,11],[15,67,88,89,12],[93,13],[82,10,94,14],[10,21,84,96],[21,97,84,16],[21,17,84,99],[100,18],[67,60,101,19,20],[103,21,84,20],[104],[24,33,31,23,29,25,27,26,30,28,22],[23],[24],[],[26],[],[48,35],[49,43],[46,52],[32],[],[],[1,17,0,20],[35],[],[34,35],[36,35],[35,37],[40,35,38],[39,35],[40,35],[43],[],[42,43],[46],[],[46,45],[],[50,51],[],[],[],[62],[34,55],[],[54],[36,58,54,56,2],[],[2,57],[59,57],[60,57],[64,54,63],[54],[65,34,55],[],[3,4,16],[],[69],[],[71,72,57],[],[36,58,73],[],[15,10,7,6],[],[77],[],[79,37],[],[9],[83,45,42,38],[],[],[],[86],[],[12],[91,39,90],[92],[],[],[],[14],[40,44,47,95],[],[86],[98],[],[98],[19],[102],[],[98],[106,107,41,105],[],[108],[109,111,110],[],[108],[],[61,112],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","If Stmt ","Unary Expr ! ","Simple Name CodegenAccess ","While Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Return Stmt ","Return Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Primitive Type boolean ","Simple Name readArrayCB ","Parameter final JsonIterator iter ","Parameter final JsonIterator.ReadArrayCallback callback ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr callback ","Simple Name callback ","Name Expr callback ","Name Expr attachment ","Simple Name attachment ","Name Expr attachment ","Class Or Interface Type JsonIterator ","Class Or Interface Type ReadArrayCallback ","Class Or Interface Type JsonIterator ","Simple Name ReadArrayCallback ","Class Or Interface Type Object ","Variable Declaration Expr ","Simple Name c ","Simple Name jsoniter ","Name Expr c ","Name Expr c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","EQUALS","Char Literal Expr '4' ","'['","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name unreadByte ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Simple Name handle ","ReturnStmt","Boolean Literal Expr false ","false","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Simple Name writeVal ","Method Call Expr ","','","Block Stmt ","Method Call Expr ","Simple Name handle ","Boolean Literal Expr false ","Boolean Literal Expr true ","true","Null Literal Expr ","Block Stmt ","Char Literal Expr 'n' ","'n'","Boolean Literal Expr true ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Primitive Type char "]}
