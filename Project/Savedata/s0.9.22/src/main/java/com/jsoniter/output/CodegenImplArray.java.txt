{"fileName":"src/main/java/com/jsoniter/output/CodegenImplArray.java","version":"0.9.22","hasMethodName":["genCollection-CodegenImplArray-String-ClassInfo","genArray-CodegenImplArray-String-ClassInfo","genList-CodegenImplArray-String-Class-Type","genCollection-CodegenImplArray-String-Class-Type"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplArray.java","version":"0.9.22","methodName":"genCollection-CodegenImplArray-String-ClassInfo","callMethodNameReferTo":{},"num":515,"succs":[[37,1],[2,46],[3,59],[68,5,4],[10,70,71,5,69],[8,74,6],[7,70,76,75,8],[10,79],[9],[10,83],[90,13,11],[91,70,13,48,12],[16,93],[14,96],[70,16,97,15,50],[16,99],[17,19,102],[18,19,103,52,104],[107,106,21],[20],[113,106,21],[25,27,24,23,28,26,22],[23],[],[25],[],[30,35],[33,36],[2,3,10,16,1,0],[109,30],[],[30,29,115],[33],[],[33,32],[],[],[42],[32],[38],[39,41,38,4],[38,4,40,6],[38,44,43],[38],[45,32],[],[55],[34],[47],[47,48,11],[47,48,11],[14,47,11,50,49],[51],[110,17,51,52],[17,116,51,53,52],[57,47,56],[47],[34,58],[],[64],[41,61],[60],[111,61],[117,62,61],[66,65,61],[61],[67],[],[],[39,72],[],[73],[],[],[7],[77,40],[78],[],[],[81,80,60],[],[82,41],[73],[85,84],[],[86,87,88],[89],[],[89],[],[12],[92],[],[80,94,49],[95],[],[15],[98],[],[80,100,51],[101],[],[18],[105],[],[],[],[112,29,53,62,108],[],[],[],[],[171,170,165,23,168,169,167,166],[63,114,31,54,118],[],[],[],[],[372,165,367,23,370,368,369,371],[180,120],[121,191],[198,122],[123,124,200,172,199],[124,201],[204,125],[235,126],[238,127],[241,128],[132,129,244],[132,181,130],[245,131],[135,248],[133,134],[252,134],[135,255],[258,136],[141,261,137],[192,138,141],[262,139],[265,140],[270,143],[142],[273,143],[278,144],[147,281,145],[147,129,146,181],[149,282],[148],[149,285],[150,288],[151,291,155],[192,155,152,137],[153,292],[154,295],[157,300],[156],[157,303],[158,308],[311,161,159],[161,181,160,145],[163,312],[162],[316,163],[319,164],[112,230,106],[23],[167],[],[177,109],[178,110],[111,179],[119,125,158,121,126,135,143,127,144,164,128,150,120,136,163,157,124,149],[109],[111],[111,173],[111,174],[111,175,174],[],[],[],[183],[182],[],[181,185,184],[181],[70,186,187],[189,188],[73],[182,190],[],[],[194],[193],[],[193,196,195],[193],[197],[],[123],[],[89],[192,80,202],[203],[],[231],[206],[],[205,206],[207,206],[208,206],[209,206],[208,206],[211,210,206],[212,206],[213,206],[214,206],[206,215],[216,206,213],[217,206],[218,206],[219,218,206],[206,220],[206,221],[222,206],[223,206],[224,206,221],[225,206],[226,206],[226,227,206],[206,228],[229,206],[232,206,233],[206],[234],[],[205,236,237],[],[89],[207,240,239],[],[89],[242,243,208],[],[89],[130,131],[246,209,247],[],[89],[250,249,210],[],[251],[],[211,254,253],[],[89],[212,256,257],[],[89],[259,213,260],[],[89],[138,140,139],[214,264,263],[],[89],[267,173,269,268,266,215],[],[],[89],[197],[216,271,272],[],[89],[217,274,275,276,174,277],[],[],[89],[203],[218,279,280],[],[89],[146],[219,284,283],[],[89],[287,220,286],[],[89],[290,289,221],[],[89],[153,154,152],[222,293,294],[],[89],[296,223,175,297,298,299],[],[],[89],[197],[302,224,301],[],[89],[225,305,176,304,307,306],[],[],[89],[203],[310,226,309],[],[89],[160],[313,314,227],[],[315],[],[318,317,228],[],[89],[321,229,320],[],[89],[323,381],[324,392],[398,325],[400,399,326,327,373],[327,401],[403,328],[329,433],[330,436],[334,439,331],[332,334,382],[440,333],[337,443],[336,335],[336,446],[449,337],[452,338],[343,455,339],[343,393,340],[341,456],[459,342],[464,345],[344],[467,345],[472,346],[475,347,349],[349,348,331,382],[351,476],[350],[479,351],[482,352],[357,353,485],[354,393,357,339],[486,355],[489,356],[494,359],[358],[359,497],[502,360],[361,363,505],[362,347,363,382],[365,506],[364],[365,509],[366,512],[428,118,106],[368],[],[378,115],[379,116],[117,380],[345,322,351,338,366,330,359,360,352,346,324,323,327,365,329,328,337],[115],[117],[374,117],[375,117],[375,117,376],[],[],[],[384],[383],[],[386,385,382],[382],[70,387,388],[389,390],[73],[391,383],[],[],[395],[394],[],[394,396,397],[394],[197],[326],[],[89],[80,402,393],[203],[429],[405],[],[405,404],[405,406],[407,405],[405,406],[408,405,409],[405,410],[405,411],[405,412],[405,413],[414,405,411],[405,415],[405,416],[405,416,417],[405,418],[405,419],[405,420],[421,405],[405,422,419],[405,423],[424,405],[424,405,425],[405,426],[405,427],[405,430,431],[405],[432],[],[434,404,435],[],[89],[406,438,437],[],[89],[333,332],[441,407,442],[],[89],[408,444,445],[],[251],[409,448,447],[],[89],[450,410,451],[],[89],[453,454,411],[],[89],[341,340,342],[458,457,412],[],[89],[374,462,460,463,413,461],[],[],[89],[197],[414,466,465],[],[89],[470,375,471,468,415,469],[],[],[89],[203],[474,473,416],[],[89],[348],[478,477,417],[],[89],[480,481,418],[],[89],[483,484,419],[],[89],[355,354,356],[487,488,420],[],[89],[421,493,376,490,491,492],[],[],[89],[197],[495,422,496],[],[89],[501,499,377,498,500,423],[],[],[89],[203],[424,504,503],[],[89],[362],[508,425,507],[],[315],[511,426,510],[],[89],[514,513,427],[],[89]],"attribute":["Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Throw Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type CodegenResult ","Simple Name genCollection ","Parameter String cacheKey ","Parameter ClassInfo classInfo ","Block Stmt ","Name Expr cacheKey ","Simple Name cacheKey ","Name Expr cacheKey ","Name Expr classInfo ","Simple Name classInfo ","Name Expr classInfo ","Class Or Interface Type String ","Class Or Interface Type ClassInfo ","Variable Declaration Expr ","Simple Name typeArgs ","Name Expr typeArgs ","Name Expr typeArgs ","Name Expr typeArgs ","Variable Declarator Type[] typeArgs = ","Array Type 1 ","Field Access Expr ","Simple Name typeArgs ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr slot1 ","Super Expr ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Field Access Expr ","Simple Name clazz ","Variable Declaration Expr ","Name Expr compType ","Simple Name compType ","Name Expr compType ","Name Expr compType ","Variable Declarator Type compType = ","Class Or Interface Type java ","Class Expr Object.class ","Class Or Interface Type Object ","Block Stmt ","Field Access Expr ","EQUALS","Integer Literal Expr Zero  ","Simple Name length ","Zero IntegerLiteralExpr","Block Stmt ","Field Access Expr ","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","Method Call Expr ","ASSIGN","Array Access Expr 0 ","Integer Literal Expr Zero  ","Object Creation Expr IllegalArgumentException Optional.empty Optional.empty ","Class Or Interface Type IllegalArgumentException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Class Expr List.class ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Variable Declarator Any any = ","Class Or Interface Type ArrayList ","Block Stmt ","Class Expr Set.class ","Class Or Interface Type Set ","Assign Expr ASSIGN ","Class Expr HashSet.class ","Class Or Interface Type HashSet ","Block Stmt ","Class Expr List.class ","Simple Name isAssignableFrom ","Class Or Interface Type List ","ReturnStmt","Method Call Expr ","Simple Name readInt ","Simple Name buffered ","Simple Name clazz ","Simple Name compType ","Method Declaration ","Method Call Expr ","Simple Name genCollection ","Simple Name cacheKey ","Simple Name clazz ","Simple Name compType ","Method Declaration ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type CodegenResult ","Simple Name genList ","Parameter String buffered ","Parameter Class clazz ","Parameter Type compType ","Block Stmt ","Name Expr cacheKey ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Class Or Interface Type String ","Class Or Interface Type Class ","Class Or Interface Type Type ","Expression Stmt ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Variable Declaration Expr ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Boolean Literal Expr true ","true","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Boolean Literal Expr false ","false","Variable Declaration Expr ","Primitive Type int ","Simple Name ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr idx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name bufLen ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","Name Expr key ","'['","Method Call Expr ","Simple Name toLong ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","Simple Name get ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Return Stmt ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name unreadByte ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Class Or Interface Type Object ","Simple Name obj ","Block Stmt ","Return Stmt ","Simple Name buffer ","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Method Call Expr ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Return Stmt ","Class Or Interface Type CodegenResult ","Simple Name genCollection ","Parameter String cacheKey ","Parameter Class clazz ","Parameter Type compType ","Block Stmt ","Binary Expr GREATER ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Class Or Interface Type String ","Class Or Interface Type Class ","Class Or Interface Type Type ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Method Call Expr ","Field Access Expr ","Simple Name getCurrentConfig ","Variable Declaration Expr ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Boolean Literal Expr true ","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Boolean Literal Expr false ","Variable Declaration Expr ","Name Expr ctx ","Simple Name add ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr val ","Class Or Interface Type Any ","Name Expr ctx ","Char Literal Expr 't' ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Simple Name sIx ","Name Expr ctx ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","Char Literal Expr '[' ","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Field Access Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Name Expr clazz ","Method Call Expr ","Name Expr target ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Name Expr DIGITS ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ']' ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplArray.java","version":"0.9.22","methodName":"genArray-CodegenImplArray-String-ClassInfo","callMethodNameReferTo":{"257":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","194":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","226":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","4":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","164":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","229":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","167":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","233":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","203":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","77":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","206":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","241":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","178":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","211":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","244":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","181":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","214":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","185":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","249":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","219":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","188":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","223":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String"},"num":264,"succs":[[68,1],[2,81],[89,3],[4,104],[105,6,91,5],[6,106],[114,7],[122,8],[9,124,123,62,10],[125,10],[129,11],[92,12,130,13],[131,13],[14,133],[15,164],[167,16],[17,177,20],[69,18,20],[19,178],[23,181],[21,22],[185,22],[188,23],[191,24],[25,194],[26,30,202],[27,30,117],[28,203],[206,29],[211,32],[31],[214,32],[33,219],[222,36,34],[69,35,17,36],[38,223],[37],[226,38],[39,229],[40,44,232],[44,41,26,117],[42,233],[236,43],[241,46],[45],[244,46],[249,47],[50,252,48],[50,69,49,34],[253,52],[51],[52,257],[53,260],[159,263,54],[59,58,56,60,61,57,55],[56],[],[58],[],[63,66],[67,65],[3,0,53,15,1,2,52,13,33,16,32,10,39,6,25,47,7,38,14,24,23,46],[63],[],[65],[],[],[],[71],[70],[],[73,69,72],[69],[75,76,74],[77,78],[],[80],[70,79],[],[],[],[85],[64],[82],[83,82],[82,86,87],[82],[64,88],[],[100],[83],[90],[91,90],[92,90],[90,93],[94,90],[95,90],[95,96,90],[90,97],[98,90,97],[102,90,101],[90],[83,103],[],[5],[],[107,108],[],[110,109,111],[112],[],[84,113],[],[],[118],[116],[],[115],[120,116,119],[116],[121],[],[9],[],[112],[115,126,127],[],[128],[],[12],[],[126,132,117],[128],[160],[135],[],[135,134],[135,136],[137,135],[135,136],[135,139,138],[135,140],[141,135],[135,142],[135,143],[135,144],[135,142,145],[135,146],[135,147],[135,147,148],[135,149],[135,150],[135,151],[152,135],[153,135,150],[135,154],[135,155],[135,155,156],[157,135],[135,158],[162,135,161],[135],[163],[],[165,166,134],[],[112],[136,169,168],[],[173,172,171,170,174],[],[],[112],[175,93],[94,176],[],[],[18,19],[137,179,180],[],[112],[183,182,138],[],[184],[],[139,187,186],[],[112],[190,140,189],[],[112],[141,193,192],[],[112],[195,196,142],[],[197,200,199,198],[],[],[112],[95,201],[],[28,29,27],[143,205,204],[],[112],[208,209,96,210,207,144],[],[],[112],[121],[213,212,145],[],[112],[218,215,216,146,217,97],[],[],[112],[128],[220,221,147],[],[112],[35],[148,224,225],[],[112],[228,227,149],[],[112],[231,230,150],[],[112],[41,42,43],[235,234,151],[],[112],[240,152,237,238,239,98],[],[],[112],[121],[153,243,242],[],[112],[246,99,154,245,247,248],[],[],[112],[128],[251,250,155],[],[112],[49],[255,254,156],[],[256],[],[157,258,259],[],[112],[262,158,261],[],[112],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Method Call Expr ","Throw Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","If Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Name Expr JsonIteratorPool ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr PLUS ","Expression Stmt ","Expression Stmt ","Name Expr JsonIteratorPool ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Return Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type CodegenResult ","Simple Name genArray ","Parameter String cacheKey ","Parameter ClassInfo classInfo ","Block Stmt ","Name Expr cacheKey ","Simple Name cacheKey ","Name Expr classInfo ","Simple Name classInfo ","Class Or Interface Type String ","Class Or Interface Type ClassInfo ","Variable Declaration Expr ","Simple Name noIndention ","Simple Name TypeLiteral ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class clazz = ","Class Or Interface Type Class ","Field Access Expr ","Simple Name clazz ","Expression Stmt ","Simple Name compType ","Name Expr buffered ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Cast Expr ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getComponentType ","Block Stmt ","Simple Name isArray ","Object Creation Expr IllegalArgumentException Optional.empty Optional.empty ","Class Or Interface Type IllegalArgumentException ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Method Call Expr ","StringLiteralExpr","Simple Name getCanonicalName ","Variable Declaration Expr ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Name Expr isCollectionValueNullable ","Method Call Expr ","Primitive Type boolean ","Boolean Literal Expr true ","true","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr false ","false","Block Stmt ","Simple Name isPrimitive ","Assign Expr ASSIGN ","Boolean Literal Expr false ","Variable Declaration Expr ","Name Expr ctx ","Simple Name ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Primitive Type int ","Primitive Type int ","Name Expr ctx ","Name Expr obj ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr buf ","Name Expr ctx ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr val ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Method Call Expr ","Class Or Interface Type Object ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name getCanonicalName ","Simple Name getCanonicalName ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","Char Literal Expr '[' ","'['","Method Call Expr ","Class Or Interface Type Double ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toLong ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getCanonicalName ","Block Stmt ","Method Call Expr ","Name Expr arrLen ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Method Call Expr ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","Name Expr Any ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Expression Stmt ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","Name Expr val ","Block Stmt ","Field Access Expr ","Simple Name buffer ","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name append ","Name Expr buf ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplArray.java","version":"0.9.22","methodName":"genList-CodegenImplArray-String-Class-Type","callMethodNameReferTo":{"128":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","160":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","193":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","131":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","163":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","198":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","135":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","168":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","75":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","172":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","142":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","206":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","175":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","145":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","209":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","148":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","182":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","152":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","185":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","155":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","125":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","190":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String"},"num":213,"succs":[[66,1],[2,79],[86,3],[4,5,55,88,87],[5,90],[94,6],[125,7],[128,8],[131,9],[13,10,134],[13,67,11],[135,12],[16,138],[14,15],[142,15],[16,145],[148,17],[22,151,18],[80,19,22],[152,20],[155,21],[160,24],[23],[163,24],[168,25],[28,171,26],[28,10,27,67],[30,172],[29],[30,175],[178,31],[32,181,36],[80,36,33,18],[34,182],[35,185],[38,190],[37],[38,193],[39,198],[201,42,40],[42,67,41,26],[44,202],[43],[44,206],[209,45],[46,120,212],[54,53,47,48,51,52,49,50],[48],[],[50],[],[62,56],[63,64],[58,65],[0,6,39,2,7,8,24,16,25,9,45,31,1,17,44,38,5,30],[56],[],[58],[],[58,57],[58,59],[58,60,59],[],[],[],[],[69],[68],[],[67,71,70],[67],[73,72,74],[76,75],[],[78],[68,77],[],[],[],[82],[81],[],[81,84,83],[81],[85],[],[4],[],[89],[],[80,91,92],[],[93],[],[121],[96],[],[95,96],[97,96],[98,96],[99,96],[98,96],[101,100,96],[102,96],[103,96],[104,96],[96,105],[106,96,103],[107,96],[108,96],[109,108,96],[96,110],[96,111],[112,96],[113,96],[114,96,111],[115,96],[116,96],[116,117,96],[96,118],[119,96],[122,96,123],[96],[124],[],[95,126,127],[],[89],[97,130,129],[],[89],[132,133,98],[],[89],[11,12],[136,99,137],[],[89],[140,139,100],[],[141],[],[101,144,143],[],[89],[102,146,147],[],[89],[149,103,150],[],[89],[19,21,20],[104,154,153],[],[89],[157,159,57,158,156,105],[],[],[89],[85],[106,161,162],[],[89],[164,107,165,166,59,167],[],[],[89],[93],[108,169,170],[],[89],[27],[109,174,173],[],[89],[177,110,176],[],[89],[180,179,111],[],[89],[34,35,33],[112,183,184],[],[89],[186,113,60,187,188,189],[],[],[89],[85],[192,114,191],[],[89],[195,115,61,194,197,196],[],[],[89],[93],[200,116,199],[],[89],[41],[203,204,117],[],[205],[],[208,207,118],[],[89],[211,119,210],[],[89],[]],"attribute":["Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Method Call Expr ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Class Or Interface Type CodegenResult ","Simple Name genList ","Parameter String buffered ","Parameter Class clazz ","Parameter Type compType ","Block Stmt ","Name Expr cacheKey ","Simple Name buffered ","Name Expr compType ","Simple Name compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name clazz ","Class Or Interface Type Type ","Expression Stmt ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Boolean Literal Expr true ","true","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr false ","false","Variable Declaration Expr ","Primitive Type int ","Simple Name ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr idx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name bufLen ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","Name Expr key ","'['","Method Call Expr ","Simple Name toLong ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","Simple Name get ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Return Stmt ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name unreadByte ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Class Or Interface Type Object ","Simple Name obj ","Block Stmt ","Return Stmt ","Simple Name buffer ","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplArray.java","version":"0.9.22","methodName":"genCollection-CodegenImplArray-String-Class-Type","callMethodNameReferTo":{"193":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","130":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","163":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","37":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","133":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","197":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","167":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","137":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","201":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","74":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","170":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","140":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","204":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","173":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","143":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","177":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","147":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","180":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","150":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","185":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","123":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","188":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","126":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","158":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean"},"num":208,"succs":[[1,65],[2,78],[85,3],[87,86,4,5,54],[5,89],[93,6],[7,123],[8,126],[12,129,9],[10,12,66],[130,11],[15,133],[14,13],[14,137],[140,15],[143,16],[21,146,17],[21,79,18],[19,147],[150,20],[155,23],[22],[158,23],[163,24],[166,25,27],[27,26,9,66],[29,167],[28],[170,29],[173,30],[35,31,176],[32,79,35,17],[177,33],[180,34],[185,37],[36],[37,188],[193,38],[39,41,196],[40,25,41,66],[43,197],[42],[43,201],[44,204],[118,45,207],[53,46,48,47,49,51,50,52],[47],[],[49],[],[61,55],[62,63],[57,64],[23,0,29,16,44,8,37,38,24,30,2,1,5,7,43,6,15],[55],[],[57],[],[56,57],[58,57],[58,57,59],[],[],[],[],[68],[67],[],[70,69,66],[66],[72,71,73],[74,75],[],[77],[76,67],[],[],[],[81],[80],[],[80,82,83],[80],[84],[],[4],[],[88],[],[90,91,79],[],[92],[],[119],[95],[],[95,94],[95,96],[97,95],[95,96],[98,95,99],[95,100],[95,101],[95,102],[95,103],[104,95,101],[95,105],[95,106],[95,106,107],[95,108],[95,109],[95,110],[111,95],[95,112,109],[95,113],[114,95],[114,95,115],[95,116],[95,117],[95,120,121],[95],[122],[],[124,94,125],[],[88],[96,128,127],[],[88],[11,10],[131,97,132],[],[88],[98,134,135],[],[136],[],[99,139,138],[],[88],[141,100,142],[],[88],[144,145,101],[],[88],[19,18,20],[149,148,102],[],[88],[153,56,151,154,103,152],[],[],[88],[84],[104,157,156],[],[88],[161,58,162,159,105,160],[],[],[88],[92],[165,164,106],[],[88],[26],[169,168,107],[],[88],[171,172,108],[],[88],[174,175,109],[],[88],[33,32,34],[178,179,110],[],[88],[111,184,59,181,182,183],[],[],[88],[84],[186,112,187],[],[88],[192,60,190,191,189,113],[],[],[88],[92],[114,195,194],[],[88],[40],[199,115,198],[],[200],[],[203,116,202],[],[88],[206,205,117],[],[88],[]],"attribute":["Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Method Call Expr ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Class Or Interface Type CodegenResult ","Simple Name genCollection ","Parameter String cacheKey ","Parameter Class clazz ","Parameter Type compType ","Block Stmt ","Binary Expr GREATER ","Simple Name cacheKey ","Name Expr compType ","Simple Name compType ","Name Expr compType ","Name Expr compType ","Name Expr compType ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name clazz ","Class Or Interface Type Type ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Field Access Expr ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Boolean Literal Expr true ","true","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr false ","false","Variable Declaration Expr ","Name Expr ctx ","Simple Name add ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr val ","Class Or Interface Type Any ","Name Expr ctx ","Char Literal Expr 't' ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Simple Name sIx ","Name Expr ctx ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","Char Literal Expr '[' ","'['","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Field Access Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Name Expr clazz ","Method Call Expr ","Name Expr target ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Name Expr DIGITS ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ']' ","']'","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt"]}
