{"fileName":"CodegenImplMap.java","Version":"0.9.22","callMethodName":["genMap","append"]}
{"Version":"0.9.22","MethodName":"CodegenImplMap_genMap","callMethodNameReferTo":{"129":"CodegenImplNative.java_CodegenImplNative_outer_genReadOp","110":"TypeLiteral.java_TypeLiteral_outer_getDecoderCacheKey","111":"TypeLiteral.java_TypeLiteral_outer_create"},"num":158,"succs":[[31,1],[2,42],[52,3],[71,4],[5,78],[81,6],[84,7],[87,8],[9,90],[10,93],[11,13,96],[33,12,13,98,97],[15,100],[14],[15,103],[16,115],[17,118],[121,18],[125,19,124],[25,24,23,20,22,21],[21],[],[23],[],[30,27],[2,9,8,3,7,18,16,17,5,10,15,6,1,4,0],[27],[],[26,27],[28,27],[],[35],[26],[32],[11,33,32],[37,32,36],[32],[38,39],[40,26],[41],[],[],[45],[28],[43],[46,47,43],[43],[48,49],[28,50],[51],[],[],[67],[74,54],[],[74,54,53],[74,54,55],[74,54,56],[74,54,57],[74,54,58],[74,59,54],[74,54,60],[61,74,54,60],[74,54,62],[74,63,54],[74,54,64],[54,65],[54,68,69],[54],[70],[],[72,53,76,73],[],[77,75],[],[],[143,142,145,146,147,144,21],[],[80,79,55,76],[],[77,75],[82,83,56,76],[],[77,75],[86,76,85,57],[],[77,75],[76,58,88,89],[],[77,75],[59,91,92,76],[],[77,75],[76,95,94,60],[],[77,75],[12],[],[99],[],[61,101,76,102],[],[77,75],[104,62,76,105],[],[108,107,106,75],[107,110,109],[],[77],[77],[111,112],[113,114,34],[],[],[],[63,117,76,116],[],[77,75],[120,119,76,64],[],[77,75],[122,76,65,123],[],[77,75],[],[126,127,128,129],[132,133,130,131],[],[77],[139,44,138],[66,134],[],[77],[135,136],[],[29,137],[],[],[],[],[141,153],[155],[21],[144],[],[74,151],[152,75],[140,141],[74],[74,148],[75],[],[],[154,150,148],[],[149,156,157],[],[77]],"nodeAttribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type String ","Simple Name genMap ","Parameter ClassInfo classInfo ","Block Stmt ","Name Expr classInfo ","Simple Name classInfo ","Name Expr classInfo ","Name Expr classInfo ","Class Or Interface Type ClassInfo ","Variable Declaration Expr ","Simple Name keyType ","Name Expr keyType ","Name Expr keyType ","Variable Declarator Type keyType = ","Class Or Interface Type Type ","Array Access Expr 0 ","Field Access Expr ","Integer Literal Expr Zero  ","Simple Name typeArgs ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueType ","Variable Declarator Type valueType = ","Class Or Interface Type Type ","Array Access Expr 1 ","Field Access Expr ","Integer Literal Expr Note Zero  ","Simple Name typeArgs ","IntegerLiteralExpr","Variable Declaration Expr ","Name Expr lines ","Simple Name lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr lines ","Name Expr cache ","Simple Name toInt ","Variable Declarator StringBuilder lines = ","Class Or Interface Type StringBuilder ","Object Creation Expr StringBuilder Optional.empty Optional.empty ","Class Or Interface Type StringBuilder ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Simple Name lines ","Simple Name str ","Method Declaration ","StringLiteralExpr","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr System ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr System ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr System ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","EQUALS","Class Expr String.class ","Class Or Interface Type String ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Name Expr TypeLiteral ","Simple Name create ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type Object ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Simple Name CodegenAccess ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name replace ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Field Access Expr ","Simple Name getName ","Simple Name clazz ","Name Expr CodegenImplNative ","Simple Name genReadOp ","Expression Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name length ","Parameter StringBuilder lines ","Parameter String str ","Block Stmt ","Name Expr lines ","Name Expr lines ","Name Expr val ","Class Or Interface Type StringBuilder ","Class Or Interface Type String ","Return Stmt ","Simple Name append ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  "]}
{"Version":"0.9.22","MethodName":"CodegenImplMap_append","callMethodNameReferTo":{},"num":23,"succs":[[1,17],[19],[5,3,8,7,9,6,4],[4],[],[6],[],[11,15],[16,14],[0,1],[11],[],[11,10],[14],[],[],[],[18,13,10],[],[12,20,21],[],[22],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PRIVATE","STATIC","Void Type ","Simple Name length ","Parameter StringBuilder lines ","Parameter String str ","Block Stmt ","Name Expr lines ","Simple Name lines ","Name Expr lines ","Name Expr val ","Simple Name str ","Class Or Interface Type StringBuilder ","Class Or Interface Type String ","Return Stmt ","Simple Name append ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","StringLiteralExpr"]}
{"fileName":"CodegenImplMap.java","Version":"0.9.22","callMethodName":["genMap","genWriteMapKey"]}
{"Version":"0.9.22","MethodName":"CodegenImplMap_genMap","callMethodNameReferTo":{"224":"CodegenImplNative.java_CodegenImplNative_outer_genWriteOp","337":"CodegenImplNative.java_CodegenImplNative_outer_genWriteOp","263":"CodegenImplNative.java_CodegenImplNative_outer_genWriteOp","232":"CodegenImplNative.java_CodegenImplNative_outer_genWriteOp","89":"JsoniterSpi.java_JsoniterSpi_outer_getCurrentConfig","271":"CodegenImplNative.java_CodegenImplNative_outer_genWriteOp"},"num":387,"succs":[[78,1],[93,2],[3,102],[4,109],[110,111,5,6,72],[113,6],[7,117],[126,8],[9,137],[138,139,87,12,10],[11,142],[145,12],[148,13],[14,184],[15,187],[190,16],[17,193],[196,18,20],[19,79,20],[22,197],[21],[22,200],[203,23],[26,206,24],[26,18,79,25],[207,28],[27],[211,28],[214,29],[220,34,30],[34,103,31],[32,221],[33,224],[229,36],[35],[232,36],[37,237],[240,38],[243,39,41],[40,81,79,41],[43,244],[42],[247,43],[44,250],[252,47,45],[46,79,47,82],[49,253],[48],[49,256],[259,54,50],[51,103,54,30],[52,260],[263,53],[268,56],[55],[56,271],[57,276],[60,58,279],[59,60,79,45],[62,280],[61],[284,62],[63,287],[64,179,290],[71,70,65,69,68,67,66],[66],[],[68],[],[76,73],[75,77],[3,22,29,12,17,63,49,57,38,6,1,44,13,7,15,56,37,14,23,16,8,0,2,43,28,36,62],[73],[],[75],[],[],[],[83],[80],[],[218,79,24],[218,39,79],[84,85,79],[79],[88,86,87],[89,90],[],[92],[91,80],[],[],[],[98],[74],[94],[94,9,95],[96,94,9],[94,100,99],[94],[101,74],[],[105],[104],[],[106,104,107],[104],[108],[],[5],[],[112],[],[103,115,114],[],[116],[],[122],[96,119],[],[217,118],[217,118,120],[123,124,119],[119],[125],[],[133],[97,128],[],[127],[129,127],[130,127],[130,131,127],[134,128,135],[128],[136],[],[11,10],[140,95],[141],[],[],[118,143,114],[96,144],[92],[146,114,127],[97,147],[141],[180],[150],[],[149,150],[151,150],[152,150],[153,150],[154,153,150],[155,150],[150,156],[157,150,156],[216,150,158],[150,159],[150,160],[150,161],[162,150,159],[150,163],[164,150],[165,150],[165,150,166],[216,150,167],[150,168],[169,150,168],[150,170],[171,150],[172,150],[173,150,170],[174,150],[175,150],[176,175,150],[150,177],[150,178],[182,150,181],[150],[183],[],[149,186,185],[],[112],[151,188,189],[],[112],[152,192,191],[],[112],[153,194,195],[],[112],[19],[199,154,198],[],[112],[202,155,201],[],[112],[204,205,156],[],[112],[25],[209,157,208],[],[210],[],[158,212,213],[],[112],[81,159,215,219,120],[],[],[],[],[313,316,311,314,317,312,315,66],[32,33,31],[223,160,222],[],[112],[228,129,226,225,161,227],[],[],[112],[108],[231,162,230],[],[112],[233,236,234,130,235,163],[],[],[112],[116],[164,238,239],[],[112],[165,241,242],[],[112],[40],[246,245,166],[],[112],[249,248,167],[],[112],[121,251,168,82,219],[],[46],[169,254,255],[],[112],[170,257,258],[],[112],[52,51,53],[171,261,262],[],[112],[264,172,131,267,266,265],[],[],[112],[108],[173,269,270],[],[112],[174,272,273,275,274,132],[],[],[112],[116],[175,278,277],[],[112],[59],[282,281,176],[],[283],[],[286,285,177],[],[112],[288,289,178],[],[112],[],[334,292],[335,293,326,87,295],[294,337],[295,219,290],[298,296,340],[297,298,87,341,327],[306,343],[303,299,346],[303,328,348,349,300],[352,301],[302,355],[306,363],[304,305],[366,305],[306,374],[309,380,307],[218,309,308],[381],[310],[384],[66],[313],[],[216,331],[217,332],[218,333],[291,306,295],[216],[318,216],[318,216],[320,216],[216,321],[216,318,322,319],[323,216],[216,323,324],[217],[217,326],[217,296,327],[299,217,328,296],[299,217,328,329,296,327],[],[],[],[294,293],[336],[],[318,338,339],[],[112],[297],[342],[],[345,319,344],[],[112],[302,300,301],[299],[350,351],[],[],[],[320,353,354],[],[112],[357,356,321],[],[361,359,360,358],[],[],[112],[362,329,347],[],[322,364,365],[],[112],[370],[368,330],[],[367],[372,371,367],[367],[368,330,373],[],[323,376,375],[],[377,378,369,379],[],[],[112],[308],[324,382,383],[],[112],[325,386,385],[],[112]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","If Stmt ","Variable Declarator int val = ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Try Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Name Expr isCollectionValueNullable ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr JsoniterSpi ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type CodegenResult ","Simple Name genMap ","Parameter String cacheKey ","Parameter ClassInfo classInfo ","Block Stmt ","Name Expr cacheKey ","Simple Name cacheKey ","Name Expr classInfo ","Simple Name classInfo ","Class Or Interface Type String ","Class Or Interface Type ClassInfo ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Name Expr noIndention ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr compType ","Name Expr typeArgs ","Name Expr typeArgs ","Variable Declarator Type[] typeArgs = ","Name Expr mapKey ","Field Access Expr ","Simple Name typeArgs ","Expression Stmt ","Name Expr isCollectionValueNullable ","Simple Name isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Class Or Interface Type Decoder ","Simple Name iter ","true","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Boolean Literal Expr false ","false","Variable Declaration Expr ","Name Expr enabled ","Simple Name keyType ","Method Call Expr ","Name Expr keyType ","Variable Declarator Type keyType = ","Class Or Interface Type User ","Class Expr Object.class ","Class Or Interface Type Object ","Expression Stmt ","Name Expr valueType ","Simple Name valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Name Expr valueType ","Variable Declarator Type valueType = ","Primitive Type long ","Class Expr Object.class ","Class Or Interface Type Object ","Block Stmt ","Field Access Expr ","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","Assign Expr ASSIGN ","Array Access Expr 0 ","Integer Literal Expr Zero  ","Assign Expr ASSIGN ","Array Access Expr 1 ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Name Expr Any ","Simple Name ctx ","Primitive Type int ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr len ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr len ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr obj ","Name Expr ctx ","Name Expr idx ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","String Literal Expr Not Empty  ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name append ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Break Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Name Expr stream ","Char Literal Expr '{' ","'{'","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name genWriteMapKey ","Simple Name ctx ","Simple Name keyType ","Simple Name noIndention ","Method Declaration ","Block Stmt ","Method Call Expr ","Simple Name toLong ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","Name Expr Any ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Break Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name enableDecoders ","Block Stmt ","Method Call Expr ","Simple Name buffer ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type Double ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Boolean Literal Expr true ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Method Call Expr ","String Literal Expr Not Empty  ","Boolean Literal Expr false ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Return Stmt ","Simple Name toLong ","Char Literal Expr '}' ","'}'","Method Call Expr ","Simple Name toLong ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","PRIVATE","Name Expr data ","Simple Name genWriteMapKey ","Parameter CodegenResult ctx ","Parameter Type keyType ","Parameter boolean noIndention ","Block Stmt ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr keyType ","Name Expr keyType ","Name Expr keyType ","Name Expr keyType ","Name Expr keyType ","Class Or Interface Type CodegenResult ","Class Or Interface Type Type ","Primitive Type boolean ","Block Stmt ","Class Expr Object.class ","Class Or Interface Type Object ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Class Expr String.class ","Class Or Interface Type String ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Name Expr CodegenImplNative ","Field Access Expr ","Simple Name containsKey ","Name Expr CodegenImplNative ","Simple Name NATIVE_ENCODERS ","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Method Call Expr ","Break Stmt ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name mapCacheKey ","Name Expr JsoniterSpi ","Name Expr mapCacheKey ","Variable Declarator String mapCacheKey = ","Class Or Interface Type String ","Method Call Expr ","Simple Name getMapKeyEncoderCacheKey ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  "]}
{"Version":"0.9.22","MethodName":"CodegenImplMap_genWriteMapKey","callMethodNameReferTo":{"89":"JsoniterSpi.java_JsoniterSpi_outer_getMapKeyEncoderCacheKey","78":"CodegenImplNative.java_CodegenImplNative_outer_getTypeName"},"num":104,"succs":[[48,1],[50,2,38,4,49],[3,52],[4,20,56],[7,5,57],[6,7,49,58,40],[15,60],[12,8,63],[12,41,65,66,9],[69,10],[11,72],[15,80],[13,14],[14,83],[15,91],[18,97,16],[44,18,17],[98],[19],[101],[24,27,21,25,28,23,26,22],[22],[],[24],[],[30,45],[39,46],[44,47],[0,15,4],[30],[],[29,30],[29,30],[30,32],[30,33],[29,30,34,31],[35,30],[35,30,36],[39],[],[39,38],[39,5,40],[8,39,41,5],[8,39,42,41,5,40],[],[],[],[],[3,2],[],[51],[],[29,53,54],[],[55],[],[],[6],[59],[],[62,31,61],[],[55],[11,9,10],[8],[67,68],[],[],[],[32,70,71],[],[55],[74,73,33],[],[78,77,76,75],[],[],[55],[79,42,64],[],[34,81,82],[],[55],[87],[85,43],[],[84],[89,88,84],[84],[85,43,90],[],[35,93,92],[],[94,95,86,96],[],[],[55],[17],[36,99,100],[],[55],[37,103,102],[],[55]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Method Declaration ","PRIVATE","STATIC","Name Expr data ","Simple Name genWriteMapKey ","Parameter CodegenResult ctx ","Parameter Type keyType ","Parameter boolean noIndention ","Block Stmt ","Name Expr ctx ","Simple Name ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr keyType ","Simple Name keyType ","Name Expr keyType ","Name Expr keyType ","Name Expr keyType ","Name Expr keyType ","Simple Name noIndention ","Class Or Interface Type CodegenResult ","Class Or Interface Type Type ","Primitive Type boolean ","Block Stmt ","EQUALS","Class Expr Object.class ","Class Or Interface Type Object ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","StringLiteralExpr","ReturnStmt","Block Stmt ","Class Expr String.class ","Class Or Interface Type String ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Name Expr CodegenImplNative ","Field Access Expr ","Simple Name containsKey ","Name Expr CodegenImplNative ","Simple Name NATIVE_ENCODERS ","Method Call Expr ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Method Call Expr ","Break Stmt ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getTypeName ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name mapCacheKey ","Name Expr JsoniterSpi ","Name Expr mapCacheKey ","Variable Declarator String mapCacheKey = ","Class Or Interface Type String ","Method Call Expr ","Simple Name getMapKeyEncoderCacheKey ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  "]}
