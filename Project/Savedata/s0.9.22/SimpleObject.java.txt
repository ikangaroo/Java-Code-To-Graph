{"fileName":"SimpleObject.java","Version":"0.9.22","callMethodName":["equals","hashCode"]}
{"Version":"0.9.22","MethodName":"SimpleObject_equals","callMethodNameReferTo":{},"num":66,"succs":[[13,1],[19,15,20,2],[25,3],[4,14],[37,5,35,36],[6,22,53],[12,11,10,7,8,9],[],[],[10],[],[18,16],[5,3,0,2],[6,23,22],[6,51,22],[16],[],[15,16],[],[21],[],[],[],[24],[],[31],[17],[26],[26,27],[26,28],[26,29],[26,33,32],[26],[34,17],[],[38,39,40],[43,42],[49,48,39],[],[],[41],[],[44,6,45,46],[],[],[],[47,27,16],[],[50,28],[41],[],[52],[],[56,54,55],[58,57,39],[60,6,59,61],[64,20,63],[],[41],[],[],[16,29,62],[],[65,30],[41],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Conditional Expr field2 != null ? !field2.equals(that.field2) : that.field2 != null ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type boolean ","Name Expr stream ","Parameter Object o ","Block Stmt ","Return Stmt ","Return Stmt ","Name Expr o ","Simple Name o ","Name Expr o ","Class Or Interface Type Object ","This Expr ","EQUALS","ThisExpr","ReturnStmt","Boolean Literal Expr true ","true","Variable Declaration Expr ","Simple Name that ","Name Expr that ","Name Expr that ","Name Expr that ","Name Expr that ","Variable Declarator SimpleObject that = ","Class Or Interface Type SimpleObject ","Cast Expr ","Class Or Interface Type SimpleObject ","Binary Expr NOT_EQUALS ","Unary Expr ! ","Binary Expr NOT_EQUALS ","Simple Name append ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr field2 ","Simple Name equals ","Field Access Expr ","Name Expr Arrays ","Field Access Expr ","Null Literal Expr ","Simple Name field2 ","Boolean Literal Expr false ","false","Conditional Expr field1 != null ? field1.equals(that.field1) : that.field1 == null ","Binary Expr NOT_EQUALS ","Method Call Expr ","Binary Expr EQUALS ","Simple Name length ","Null Literal Expr ","Name Expr field1 ","Simple Name equals ","Field Access Expr ","Simple Name field1 ","Field Access Expr ","Null Literal Expr ","Simple Name field1 "]}
{"Version":"0.9.22","MethodName":"SimpleObject_hashCode","callMethodNameReferTo":{},"num":45,"succs":[[9,1],[2,29],[3,17,44],[4,8,7,5,6],[],[],[7],[],[2,1,0],[18],[11,12],[],[],[10,15,16,14],[10],[],[],[13],[10,20,19],[10],[22,21,23],[25,11,24],[3,27,12],[28],[],[26],[],[],[],[31,13,30],[],[34,33,32],[14,35,36],[],[38],[37],[],[],[39,40,41],[15,42,24],[16,43,3],[28],[26],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name hashCode ","Block Stmt ","Assign Expr ASSIGN ","Simple Name result ","Name Expr field2 ","Name Expr field2 ","Name Expr System ","Name Expr result ","Name Expr field1 ","Name Expr field1 ","Name Expr result ","Variable Declarator int result = ","Name Expr cfg ","Conditional Expr field2 != null ? field2.hashCode() : 0 ","Binary Expr NOT_EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr","Simple Name hashCode ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Binary Expr PLUS ","Binary Expr MULTIPLY ","PLUS","Enclosed Expr ","Integer Literal Expr Note Zero  ","MULTIPLY","IntegerLiteralExpr","Conditional Expr field1 != null ? field1.hashCode() : 0 ","Binary Expr NOT_EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Null Literal Expr ","Simple Name hashCode ","ReturnStmt"]}
