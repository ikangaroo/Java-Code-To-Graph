{"fileName":"TestAnnotation.java","Version":"0.9.22","callMethodName":["createObject","test_static_factory","setField1","test_single_param_setter","skip_missing_ctor_arg","setField1","initialize","test_name_conflict","setHello","setHello","test_inherited_setter_is_not_duplicate"]}
{"Version":"0.9.22","MethodName":"TestObject4_createObject","callMethodNameReferTo":{},"num":32,"succs":[[19,1],[27,2],[3,22,31],[8,7,5,10,9,6,4],[],[6],[],[8],[],[12,13,14],[0,1,2],[12],[],[],[],[17,16],[],[18],[],[23],[11,21],[],[20],[24,25,21],[21],[26],[],[11,28,29],[30,20],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","Simple Name assertEquals ","PUBLIC","STATIC","Simple Name allBindings ","Name Expr JsonIterator ","Parameter @JsonProperty(value = \"field1\") int field1 ","Block Stmt ","Name Expr field1 ","Simple Name field1 ","Normal Annotation Expr @JsonProperty(value = \"field1\") ","Primitive Type int ","Member Value Pair ","Simple Name value ","String Literal Expr Not Empty  ","StringLiteralExpr","Unary Expr ! ","Name Expr obj ","Name Expr any ","Name Expr obj ","Variable Declarator TestObject4 obj = ","Binary Expr EQUALS ","Object Creation Expr TestObject4 Optional.empty Optional.empty ","Class Or Interface Type TestObject4 ","Expression Stmt ","Field Access Expr ","ASSIGN","Simple Name buffer ","ReturnStmt"]}
{"Version":"0.9.22","MethodName":"TestAnnotation_test_static_factory","callMethodNameReferTo":{"16":"JsonIterator.java_JsonIterator_outer_parse"},"num":42,"succs":[[11,1],[2,27],[36],[4,8,10,7,5,6],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[15,13,16],[13],[19,18,17],[],[],[22,23,21,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,28,31],[28],[33,12,34],[],[35],[],[39,37,38],[],[40],[41,29],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_static_factory ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Name Expr JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","StringLiteralExpr","'\\''","'\"'","Expression Stmt ","Name Expr ctx ","Name Expr obj ","Unary Expr ! ","Method Call Expr ","Method Call Expr ","Simple Name read ","Class Expr TestObject4.class ","Class Or Interface Type TestObject4 ","Method Call Expr ","Field Access Expr ","Name Expr val ","Field Access Expr ","IntegerLiteralExpr","Class Or Interface Type String "]}
{"Version":"0.9.22","MethodName":"TestObject5_setField1","callMethodNameReferTo":{},"num":16,"succs":[[2,1,4,3,5],[],[3],[],[7,8],[9],[7],[],[],[10],[11,12,6],[14,13],[],[15],[],[]],"nodeAttribute":["If Stmt ","PUBLIC","Simple Name size ","Simple Name setField1 ","Simple Name genWriteOp ","Block Stmt ","Name Expr field1 ","Simple Name asList ","Primitive Type int ","Expression Stmt ","Assign Expr ASSIGN ","Method Call Expr ","ASSIGN","Name Expr iter ","Simple Name field1 ","ThisExpr"]}
{"Version":"0.9.22","MethodName":"TestAnnotation_test_single_param_setter","callMethodNameReferTo":{"16":"JsonIterator.java_JsonIterator_outer_parse"},"num":42,"succs":[[11,1],[2,27],[36],[4,7,10,6,5,8],[],[6],[],[9],[],[],[2,0,1],[14],[13],[],[13,15,16],[13],[17,18,19],[],[],[20,23,21,22],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,31,28],[28],[12,34,33],[],[35],[],[37,39,38],[],[40],[41,29],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Method Call Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Char Literal Expr '\\r' ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","StringLiteralExpr","'\\''","'\"'","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Variable Declarator TestObject5 obj = ","Class Or Interface Type TestObject7 ","Method Call Expr ","Void Type ","Class Expr TestObject5.class ","Class Or Interface Type TestObject5 ","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name put ","Field Access Expr ","IntegerLiteralExpr","Simple Name field1 "]}
{"Version":"0.9.22","MethodName":"TestAnnotation_skip_missing_ctor_arg","callMethodNameReferTo":{"19":"JsonIterator.java_JsonIterator_outer_parse"},"num":41,"succs":[[1,14],[24,4,2,25],[3,26],[30],[33,5,34],[35],[9,13,11,7,10,8],[],[9],[],[12],[],[],[1,0],[17],[16],[],[19,16,18],[16],[22,21,20],[],[],[23],[],[3,2],[32,4],[15,28,27],[],[29],[],[31],[],[5],[],[],[38,36,37],[39,40],[],[],[],[]],"nodeAttribute":["Variable Declaration Expr ","Try Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Method Call Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Primitive Type byte ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Catch Clause ","Method Call Expr ","Void Type ","Class Expr TestObject8.class ","Class Or Interface Type TestObject8 ","Simple Name append ","Name Expr type ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Method Call Expr ","Name Expr toWriteLen ","Simple Name println ","Integer Literal Expr Note Zero  ","Name Expr stream ","Simple Name out "]}
{"Version":"0.9.22","MethodName":"TestObject17_setField1","callMethodNameReferTo":{},"num":16,"succs":[[5,4,1,3,2],[],[3],[],[8,7],[9],[7],[],[],[10],[6,12,11],[13,14],[],[15],[],[]],"nodeAttribute":["If Stmt ","PUBLIC","Void Type ","Continue Stmt ","Parameter int field1 ","Block Stmt ","Name Expr field1 ","Method Call Expr ","Primitive Type int ","Expression Stmt ","Method Call Expr ","Method Call Expr ","ASSIGN","This Expr ","Simple Name field1 ","ThisExpr"]}
{"Version":"0.9.22","MethodName":"TestObject17_initialize","callMethodNameReferTo":{},"num":12,"succs":[[1,3,2,4,6,5],[],[],[4],[],[9,8,7],[],[],[],[],[11],[]],"nodeAttribute":["For Each Stmt ","Simple Name assertEquals ","PUBLIC","Name Expr iter ","Simple Name initialize ","Parameter @JsonProperty(\"field1\") int field1 ","Block Stmt ","Single Member Annotation Expr @JsonProperty(\"field1\") ","Primitive Type int ","Simple Name field1 ","String Literal Expr Not Empty  ","StringLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestAnnotation_test_name_conflict","callMethodNameReferTo":{"15":"JsonIterator.java_JsonIterator_outer_parse"},"num":26,"succs":[[1,10],[20],[4,5,3,6,9,7],[],[5],[],[8],[],[],[1,0],[13],[12],[],[15,12,14],[12],[17,18,16],[],[],[19],[],[21,22],[],[24,23,11],[],[25],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_name_conflict ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name code ","Simple Name size ","Variable Declaration Expr ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name assertNotNull ","Method Call Expr ","Simple Name read ","Class Expr TestObject17.class ","Class Or Interface Type TestObject17 "]}
{"Version":"0.9.22","MethodName":"TestObject18Interface_setHello","callMethodNameReferTo":{},"num":6,"succs":[[2,3,1],[2],[],[4,5],[],[]],"nodeAttribute":["Expression Stmt ","Name Expr desc ","Simple Name setHello ","Simple Name reset ","Class Or Interface Type A ","Name Expr obj "]}
{"Version":"0.9.22","MethodName":"TestObject18_setHello","callMethodNameReferTo":{},"num":14,"succs":[[1,3,5,2,6,4],[],[],[4],[],[9,8],[10],[8],[],[],[11],[12,7,13],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Name Expr notFirst ","Parameter Integer val ","Block Stmt ","Primitive Type int ","Name Expr key ","Class Or Interface Type Integer ","Binary Expr EQUALS ","Assign Expr ASSIGN ","Name Expr iter ","ASSIGN"]}
{"Version":"0.9.22","MethodName":"TestAnnotation_test_inherited_setter_is_not_duplicate","callMethodNameReferTo":{"17":"JsonIterator.java_JsonIterator_outer_parse"},"num":40,"succs":[[12,1],[2,22],[32,3],[34],[11,5,6,7,9,8],[],[7],[],[10],[],[],[2,1,0,3],[15],[14],[],[17,16,14],[14],[18,19,20],[],[],[21],[],[26],[13],[23],[24,23],[27,23,28],[23],[30,29,13],[],[31],[],[24,33],[],[37,36,35],[],[38],[39,25],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Name Expr list ","Simple Name test_inherited_setter_is_not_duplicate ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Integer Literal Expr Note Zero  ","Name Expr obj ","Name Expr obj ","Variable Declarator TestObject18 obj = ","Simple Name assertEquals ","Method Call Expr ","Simple Name read ","Class Expr TestObject18.class ","Class Or Interface Type TestObject18 ","Method Call Expr ","Simple Name assertNotNull ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Expression Stmt ","IntegerLiteralExpr","Simple Name keys "]}
