{"fileName":"TestMap.java","Version":"0.9.22","callMethodName":["test_size","test_to_boolean","test_to_int","test_get","test_get_from_nested","test_iterator","test_to_string","mapOf"]}
{"Version":"0.9.22","MethodName":"TestMap_test_size","callMethodNameReferTo":{"12":"Any.java_Any_outer_wrap"},"num":28,"succs":[[7,1],[23],[4,5,3,6],[],[5],[],[1,0],[10],[9],[],[9,11,12],[9],[15,14,13],[],[],[16,19,17,18,20],[],[21],[22],[21],[22],[],[],[25,24,26],[],[22],[8,27],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_size ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name set ","Simple Name lang ","Method Call Expr ","Simple Name clazz ","String Literal Expr Not Empty  ","Integer Literal Expr Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name size "]}
{"Version":"0.9.22","MethodName":"TestMap_test_to_boolean","callMethodNameReferTo":{"16":"Any.java_Any_outer_wrap","27":"Any.java_Any_outer_wrap"},"num":40,"succs":[[1,9],[2,21],[3,25],[36],[6,7,5,8],[],[7],[],[2,1,3,0],[14],[11],[],[11,10],[12],[11,16,15],[11],[18,17,19],[],[],[20],[],[22,23],[],[24,10],[],[27,26,12],[],[28,29,30],[],[],[32,31,33],[],[34],[35],[],[],[37,38],[],[13,39],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_to_boolean ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Primitive Type int ","Simple Name Map ","Return Stmt ","Unary Expr ++ ","Method Call Expr ","Simple Name set ","Null Literal Expr ","Method Call Expr ","Simple Name mapOf ","Variable Declaration Expr ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name toBoolean ","Method Call Expr ","ASSIGN","Method Call Expr ","Simple Name val ","Name Expr iter ","Method Call Expr ","Boolean Literal Expr false ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Field Access Expr ","Method Call Expr ","Field Access Expr "]}
{"Version":"0.9.22","MethodName":"TestMap_test_to_int","callMethodNameReferTo":{"16":"Any.java_Any_outer_wrap","29":"Any.java_Any_outer_wrap"},"num":43,"succs":[[9,1],[21,2],[27,3],[38],[6,8,5,7],[],[7],[],[0,2,3,1],[14],[11],[],[10,11],[12],[15,16,11],[11],[19,17,18],[],[],[20],[],[23,22,24],[],[25],[10,26],[],[],[12,29,28],[],[32,30,31],[],[],[35,33,34],[],[36],[37],[],[],[41,40,39],[],[37],[13,42],[]],"nodeAttribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name encodeShort ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr ctx ","Name Expr any ","Variable Declarator Any any = ","Name Expr Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","Zero IntegerLiteralExpr","Simple Name toInt ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr Any ","Void Type ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Return Stmt ","Class Or Interface Type T ","Method Call Expr ","Simple Name toInt "]}
{"Version":"0.9.22","MethodName":"TestMap_test_get","callMethodNameReferTo":{"12":"Any.java_Any_outer_wrap"},"num":31,"succs":[[7,1],[23],[5,4,3,6],[],[5],[],[0,1],[10],[9],[],[11,9,12],[9],[14,13,15],[],[],[19,20,16,17,18],[],[21],[22],[21],[22],[],[],[25,26,24],[],[22],[28,27],[8,30,29],[],[],[21]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_get ","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type Any ","Name Expr ctx ","Variable Declarator Any any = ","Name Expr val ","Method Call Expr ","Simple Name set ","Name Expr iter ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name get ","String Literal Expr Not Empty  "]}
{"Version":"0.9.22","MethodName":"TestMap_test_get_from_nested","callMethodNameReferTo":{"14":"Any.java_Any_outer_wrap"},"num":49,"succs":[[1,8],[30,2],[39],[6,4,7,5],[],[6],[],[1,2,0],[12],[10],[],[9,10],[13,10,14],[10],[15,16,17],[],[],[22,20,19,18,21],[],[23],[25,24,26],[23],[28,27,29],[],[],[23],[23],[],[23],[23],[31,33,32],[],[23],[34,35],[9,37,36,38],[],[],[23],[23],[41,42,40],[],[23],[43,44],[46,11,45,47],[],[],[48],[23],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_get_from_nested ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name len ","Name Expr any ","Variable Declarator Any any = ","Name Expr com ","Method Call Expr ","Name Expr Any ","Name Expr iter ","Method Call Expr ","Boolean Literal Expr false ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr obj ","Method Call Expr ","StringLiteralExpr","Simple Name mapOf ","Name Expr val ","String Literal Expr Not Empty  ","Simple Name mapOf ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Name Expr val ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Name Expr any ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","Name Expr any ","Char Literal Expr ',' ","'*'"]}
{"Version":"0.9.22","MethodName":"TestMap_test_iterator","callMethodNameReferTo":{"17":"Any.java_Any_outer_wrap"},"num":63,"succs":[[12,1],[28,2],[37,3],[45,4],[6,30,46,5],[47,3],[55],[11,10,8,9],[],[10],[],[6,0,1,3,2],[15],[14],[],[17,14,16],[14],[20,18,19],[],[],[25,24,23,21,22],[],[26],[27],[26],[27],[],[],[33],[13],[29,32],[30,29],[31,29],[29,35,34],[29],[13,36],[],[41],[39],[],[39,38],[39,43,42],[39],[44],[],[5],[],[48,50,49,38],[],[51,31],[52,53],[],[32,54],[],[],[56,57,40],[],[59,60,62,61,58],[],[26],[27],[26],[27]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Primitive Type long ","Simple Name test_iterator ","Block Stmt ","Variable Declaration Expr ","Unary Expr ++ ","Simple Name len ","Method Call Expr ","Primitive Type int ","Method Call Expr ","Name Expr val ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Variable Declaration Expr ","Null Literal Expr ","This Expr ","Name Expr iter ","Simple Name tail ","Variable Declarator Any.EntryIterator iter = ","Class Or Interface Type EntryIterator ","Method Call Expr ","Simple Name entries ","Variable Declaration Expr ","Name Expr len ","Simple Name map ","Name Expr map ","Variable Declarator HashMap<String, Object> map = ","Expression Stmt ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Block Stmt ","Name Expr iter ","Method Call Expr ","Primitive Type int ","Parameter Object obj ","Method Call Expr ","Simple Name key ","Method Call Expr ","Simple Name toInt ","Simple Name value ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Simple Name field ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  "]}
{"Version":"0.9.22","MethodName":"TestMap_test_to_string","callMethodNameReferTo":{"52":"Any.java_Any_outer_toString","12":"Any.java_Any_outer_toString","44":"Any.java_Any_outer_wrap","14":"Any.java_Any_outer_wrap","31":"Any.java_Any_outer_wrap"},"num":54,"succs":[[9,1],[2,25],[40,3],[49],[6,7,5,8],[],[7],[],[0,2,1,3],[10,11,12],[],[13],[14,15],[],[16,18,17],[],[],[],[20,21,23,19,22],[],[13],[24],[13],[24],[],[29],[27],[],[26,27],[30,31,27],[27],[32,33,34],[],[],[39,37,38,35,36],[],[13],[24],[13],[24],[43,42,44,41],[26,45],[],[13],[47,48,46],[],[],[],[24],[51,52,50],[],[13],[53,28],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_to_string ","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Method Call Expr ","Simple Name toString ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Name Expr buf ","Primitive Type int ","Name Expr any ","Variable Declarator Any any = ","Name Expr ctx ","Method Call Expr ","Name Expr arr ","Name Expr iter ","Method Call Expr ","Simple Name mapOf ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr JsoniterSpi ","Class Or Interface Type Any ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr count ","Name Expr Any ","Simple Name wrap ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_mapOf","callMethodNameReferTo":{},"num":56,"succs":[[22,1],[5,3,30,2],[36,3],[6,4,31,40,41],[46,5],[33,43,3,44],[25,7,55],[12,10,8,11,13,9],[9],[],[16,14,11,15],[],[18,21],[0,6,1],[],[],[],[18,20],[],[17,18],[19,18],[],[26],[24],[],[23,24],[27,24,28],[24],[29],[],[4],[33,32,35],[],[31,32],[33],[33,34],[32,37,38],[32],[39],[],[],[17,42],[],[],[45],[],[23,49,47,48],[],[51,50],[52,20],[],[19,34],[54,35,53],[],[45],[]],"nodeAttribute":["Expression Stmt ","If Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","Assign Expr PLUS ","Return Stmt ","Method Declaration Throws ","PRIVATE","STATIC","Class Or Interface Type Map ","Simple Name mapOf ","Parameter Object... args ","Block Stmt ","Name Expr key ","Simple Name number ","Class Or Interface Type Object ","Name Expr args ","Simple Name args ","Name Expr args ","Name Expr args ","Class Or Interface Type Object ","Variable Declaration Expr ","Name Expr ctx ","Simple Name map ","Simple Name key ","Variable Declarator HashMap<String, Object> map = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Class Or Interface Type T ","Zero IntegerLiteralExpr","LESS","Field Access Expr ","Simple Name length ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name put ","Cast Expr ","Simple Name newInstance ","Class Or Interface Type String ","Array Access Expr i ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","ReturnStmt"]}
{"fileName":"TestMap.java","Version":"0.9.22","callMethodName":["setUp","test","test_empty","test_null","test_value_is_null","test_integer_key","test_MapKeyCodec","encode","skip_indention","test_indention_with_empty_map","test_int_as_map_key","test_object_key"]}
{"Version":"0.9.22","MethodName":"TestMap_setUp","callMethodNameReferTo":{},"num":19,"succs":[[7,1],[12],[5,6,3,4],[],[5],[],[1,0],[8,10,9],[],[],[11],[],[13,14,9],[],[17,15,16],[],[],[18],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name setUp ","Block Stmt ","Method Call Expr ","Name Expr iter ","ASSIGN","Object Creation Expr ByteArrayOutputStream Optional.empty Optional.empty ","Class Or Interface Type ByteArrayOutputStream ","Assign Expr ASSIGN ","Simple Name append ","Object Creation Expr JsonStream Optional.empty Optional.empty ","Class Or Interface Type JsonStream ","Name Expr baos ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestMap_test","callMethodNameReferTo":{},"num":44,"succs":[[13,1],[2,21],[26,3],[4,29],[32],[10,7,6,8,9,12],[],[8],[],[11],[],[],[0,1,4,2,3],[17],[15],[],[14,15],[18,15,19],[15],[20],[],[14,23,22,24],[],[25],[25],[],[28,16,27],[],[],[30,31],[],[],[34,33,35],[],[38,36,37,39],[42,43],[25],[],[40],[41],[],[],[],[]],"nodeAttribute":["Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Name Expr iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr val ","Simple Name map ","Class Or Interface Type Any ","Variable Declarator HashMap<String, Object> map = ","Return Stmt ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Expression Stmt ","Name Expr ctx ","Simple Name ctClass ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name append ","Binary Expr NOT_EQUALS ","Method Call Expr ","Simple Name append ","Name Expr lines ","Method Call Expr ","Name Expr JsonIterator ","Method Call Expr ","Method Call Expr ","Variable Declarator com.jsoniter.any.Any _attachment_ = ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","'\\''","'\"'","Name Expr baos ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_test_empty","callMethodNameReferTo":{},"num":38,"succs":[[1,12],[2,19],[3,22],[25],[7,6,9,5,8,11],[],[7],[],[10],[],[],[1,2,3,0],[15],[14],[],[14,16,17],[14],[18],[],[21,20,13],[],[],[23,24],[],[],[27,26,28],[],[32,31,30,29],[37,36],[33],[],[34],[35],[],[],[],[],[]],"nodeAttribute":["Assign Expr ASSIGN ","Expression Stmt ","Class Or Interface Type ClassDescriptor ","Variable Declaration Expr ","Method Declaration Throws ","PUBLIC","Name Expr list ","Simple Name test_empty ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr map ","Name Expr sdf ","Variable Declarator HashMap<String, Object> map = ","Assign Expr ASSIGN ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name append ","Simple Name writeVal ","Method Call Expr ","Simple Name append ","Simple Name toInt ","Assign Expr ASSIGN ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name iter ","Simple Name replace ","Simple Name ctor ","Char Literal Expr '\"' ","StringLiteralExpr","'\\''","'\"'","Name Expr baos ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_test_null","callMethodNameReferTo":{},"num":34,"succs":[[1,11],[2,18],[21],[8,6,4,7,10,5],[],[6],[],[9],[],[],[0,1,2],[15,13,14,12],[],[],[16],[17],[],[],[19,20],[],[],[22,23,24],[],[25,26,27,28],[33,32],[29],[],[30],[31],[],[],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_null ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr stream ","Simple Name writeVal ","Object Creation Expr TypeLiteral<HashMap> Optional.empty Optional.empty ","Primitive Type long ","Class Or Interface Type TypeLiteral ","NullLiteralExpr","Return Stmt ","Simple Name append ","Name Expr lines ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","StringLiteralExpr","'\\''","'\"'","Name Expr baos ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_test_value_is_null","callMethodNameReferTo":{},"num":41,"succs":[[1,13],[2,21],[27,3],[4,32],[35],[7,6,9,8,12,10],[],[8],[],[11],[],[],[2,1,4,3,0],[17],[15],[],[14,15],[18,19,15],[15],[20],[],[14,23,22,24],[],[25],[26],[],[],[30,28,29,16],[],[],[31],[],[33,34],[],[],[37,38,36],[],[25],[39,40],[],[]],"nodeAttribute":["Expression Stmt ","Class Or Interface Type HashMap ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_value_is_null ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr ctx ","Simple Name obj ","Name Expr obj ","Variable Declarator HashMap<String, int[]> obj = ","Return Stmt ","Object Creation Expr HashMap<String, int[]> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Expression Stmt ","Primitive Type int ","String Literal Expr Not Empty  ","Null Literal Expr ","StringLiteralExpr","NullLiteralExpr","Method Call Expr ","Simple Name append ","Simple Name writeVal ","Object Creation Expr TypeLiteral<Map<String, int[]>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Return Stmt ","Simple Name append ","Name Expr lines ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr baos ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_test_integer_key","callMethodNameReferTo":{},"num":42,"succs":[[13,1],[21,2],[3,27],[32,4],[35],[8,6,10,9,7,12],[],[8],[],[11],[],[],[4,3,0,2,1],[17],[15],[],[14,15],[15,18,19],[15],[20],[],[14,24,22,23],[],[25],[26],[],[],[28,16,29,30],[],[],[31],[],[34,33],[],[],[36,37,38],[],[39],[41,40],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_integer_key ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr ctx ","Simple Name obj ","Primitive Type int ","Variable Declarator HashMap<Integer, Object> obj = ","Expression Stmt ","Object Creation Expr HashMap<Integer, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name set ","Integer Literal Expr Note Zero  ","Name Expr iter ","IntegerLiteralExpr","NullLiteralExpr","Method Call Expr ","Class Or Interface Type String ","Simple Name writeVal ","Object Creation Expr TypeLiteral<Map<Integer, Object>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Return Stmt ","Simple Name append ","Name Expr lines ","Method Call Expr ","Class Or Interface Type JsonProperty ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr baos ","Simple Name toString "]}
{"Version":"0.9.22","MethodName":"TestMap_test_MapKeyCodec","callMethodNameReferTo":{},"num":77,"succs":[[1,10],[49,2],[57,3],[4,63],[73],[8,6,9,7],[],[8],[],[0,3,1,2,4],[11,14,13,12],[],[],[15],[16],[],[],[19,20,26,24,22,6,21,18,23],[],[20],[],[31,28],[30,32],[25],[],[],[33,34],[28],[],[30],[],[],[],[35],[42],[38],[27],[36],[36,39,40],[36],[27,41],[],[44,43,29],[],[46,45,47],[],[],[48,37],[],[53],[51],[],[50,51],[54,55,51],[51],[56],[],[59,60,50,58],[],[61],[62],[],[],[66],[52],[64],[67,64,68],[64],[69,52,71,70],[],[],[72],[],[75,65,74],[],[76],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Primitive Type long ","Binary Expr EQUALS ","Block Stmt ","Method Call Expr ","Return Stmt ","Simple Name registerMapKeyEncoder ","Class Expr TestObject1.class ","Object Creation Expr Encoder Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Class Or Interface Type Encoder ","Method Declaration Throws ","Simple Name fillCache ","Void Type ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr obj ","Simple Name obj ","Simple Name append ","Simple Name stream ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr mapKey ","Variable Declarator TestObject1 mapKey = ","Class Or Interface Type TestObject1 ","Cast Expr ","Class Or Interface Type TestObject1 ","Method Call Expr ","Simple Name writeVal ","Method Call Expr ","Name Expr String ","Simple Name valueOf ","Field Access Expr ","Simple Name Field ","Variable Declaration Expr ","Name Expr buf ","Simple Name obj ","Primitive Type int ","Variable Declarator HashMap<TestObject1, Object> obj = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<TestObject1, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Primitive Type int ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Null Literal Expr ","Class Or Interface Type TestObject1 ","NullLiteralExpr","Variable Declaration Expr ","Simple Name output ","Name Expr output ","Variable Declarator String output = ","Name Expr stream ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Object Creation Expr TypeLiteral<Map<TestObject1, Object>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Expression Stmt ","Variable Declarator JsonIterator iter = ","StringLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestMap_skip_indention","callMethodNameReferTo":{"90":"JsonStream.java_JsonStream_outer_serialize","59":"JsonStream.java_JsonStream_outer_serialize"},"num":102,"succs":[[14,1],[24,2],[3,29],[4,33],[5,51],[6,62],[7,72],[88,8],[93],[13,12,10,11],[],[12],[],[0,7,4,3,6,5,8,2,1],[20],[16],[],[16,15],[17,16],[16,18],[21,16,22],[16],[23],[],[25,15,27,26],[],[28],[28],[],[17,31,30,32],[],[28],[28],[37],[35],[],[34],[39,34,38],[34],[41,40],[42,44,43],[],[45,47,46],[],[35,50],[48],[],[49],[],[],[],[57],[36,18],[52],[55,53,52,19],[73],[54],[58,59,52],[52],[61,36,60,18],[],[],[64,53,63],[],[67,65,66],[69,68,66],[],[28],[71,66,70],[28],[28],[28],[75],[74],[],[73,77,76],[73],[78,79],[80,82,81],[],[83,84,85],[],[74,87],[86],[],[49],[],[],[54,89,90],[],[92,91,55,19],[],[],[95,56,94],[],[97,96,66],[99,98,66],[28],[101,66,100],[28],[28],[28]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name skip_indention ","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type Any ","Simple Name map ","Name Expr buf ","Name Expr map ","Name Expr map ","Variable Declarator Map<String, String> map = ","Expression Stmt ","Object Creation Expr HashMap<String, String> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Expression Stmt ","Name Expr ctx ","String Literal Expr Not Empty  ","Simple Name get ","StringLiteralExpr","Method Call Expr ","Name Expr pos ","Name Expr notFirst ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Method Call Expr ","Name Expr EncodingMode ","Name Expr dynamicCfg ","Variable Declarator Config dynamicCfg = ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name build ","Method Call Expr ","Simple Name encodingMode ","Field Access Expr ","Object Creation Expr Config.Builder Optional.empty Optional.empty ","Simple Name indentionStep ","Integer Literal Expr Note Zero  ","Class Or Interface Type Builder ","IntegerLiteralExpr","Simple Name DYNAMIC_MODE ","Variable Declaration Expr ","Simple Name output ","Name Expr output ","Class Or Interface Type Object ","Name Expr reflectionCfg ","Name Expr output ","Variable Declarator String output = ","Simple Name append ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name assertEquals ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name reflectionCfg ","Name Expr EncodingMode ","Variable Declarator Config reflectionCfg = ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name build ","Method Call Expr ","Simple Name encodingMode ","Field Access Expr ","Object Creation Expr Config.Builder Optional.empty Optional.empty ","Parameter IOException e ","Integer Literal Expr Note Zero  ","Class Or Interface Type Builder ","Simple Name REFLECTION_MODE ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name assertEquals ","Binary Expr PLUS ","Binary Expr PLUS ","Class Or Interface Type Any ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr "]}
{"Version":"0.9.22","MethodName":"TestMap_test_indention_with_empty_map","callMethodNameReferTo":{"54":"JsoniterSpi.java_JsoniterSpi_outer_getCurrentConfig","29":"JsoniterSpi.java_JsoniterSpi_outer_getCurrentConfig"},"num":66,"succs":[[1,9],[34,2],[43,3],[58],[7,5,6,8],[],[7],[],[1,3,0,2],[18],[11,12],[],[],[10],[16,15,13,10],[],[],[14],[10,19,20],[10],[22,21],[23,24,25],[],[28,27,26],[],[33,12],[30,29],[],[32],[11,31],[],[],[],[],[36,37,35],[],[38],[41,13,39,40],[],[],[],[42],[],[45,44,14],[],[46,47],[50,48,49],[],[53,52,51],[],[16,57],[54,55],[],[32],[15,56],[],[],[],[61,60,59],[],[38],[62,17,63,64],[],[],[65],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_indention_with_empty_map ","Block Stmt ","Variable Declaration Expr ","Simple Name config ","Name Expr JsoniterSpi ","Name Expr EncodingMode ","Name Expr config ","Simple Name append ","Binary Expr MULTIPLY ","Name Expr EncodingMode ","Name Expr config ","Variable Declarator Config config = ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name build ","Method Call Expr ","Simple Name encodingMode ","Field Access Expr ","Method Call Expr ","Variable Declarator int i = ","Name Expr i ","Method Call Expr ","Simple Name copyBuilder ","Simple Name getCurrentConfig ","IntegerLiteralExpr","Simple Name REFLECTION_MODE ","Method Call Expr ","Simple Name assertEquals ","Simple Name head ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Object Creation Expr HashMap<String, String> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Method Call Expr ","Name Expr start ","Method Call Expr ","Binary Expr PLUS ","Field Access Expr ","Method Call Expr ","Simple Name indentionStep ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name copyBuilder ","Simple Name getCurrentConfig ","Simple Name DYNAMIC_MODE ","Method Call Expr ","Simple Name assertEquals ","Null Literal Expr ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Object Creation Expr HashMap<String, String> Optional.empty Optional.empty ","Class Or Interface Type HashMap "]}
{"Version":"0.9.22","MethodName":"TestMap_test_int_as_map_key","callMethodNameReferTo":{},"num":30,"succs":[[8,1],[16,2],[22],[5,7,4,6],[],[6],[],[0,2,1],[12],[10],[],[10,9],[14,10,13],[10],[15],[],[17,9,19,18],[],[20],[21],[],[],[24,25,23],[],[21],[28,26,27,11],[],[],[29],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_int_as_map_key ","Block Stmt ","Variable Declaration Expr ","Name Expr m ","Simple Name m ","Name Expr m ","Variable Declarator HashMap<Integer, String> m = ","Variable Declaration Expr ","Object Creation Expr HashMap<Integer, String> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name put ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","IntegerLiteralExpr","StringLiteralExpr","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Object Creation Expr TypeLiteral<Map<Integer, String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral "]}
{"Version":"0.9.22","MethodName":"TestMap_test_object_key","callMethodNameReferTo":{"24":"JsonStream.java_JsonStream_outer_serialize"},"num":28,"succs":[[1,8],[2,16],[21],[5,4,6,7],[],[6],[],[1,2,0],[12],[10],[],[9,10],[10,14,13],[10],[15],[],[19,9,17,18],[],[20],[20],[],[24,23,22],[],[25],[26,27,11],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_object_key ","Block Stmt ","Variable Declaration Expr ","Name Expr m ","Integer Literal Expr Note Zero  ","Name Expr m ","Variable Declarator HashMap<Integer, Integer> m = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<Integer, Integer> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name put ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize "]}
{"fileName":"TestMap.java","Version":"0.9.22","callMethodName":["test_object_key","test_string_key","test_integer_key","test_MapKeyCodec","decode"]}
{"Version":"0.9.22","MethodName":"TestMap_test_object_key","callMethodNameReferTo":{},"num":33,"succs":[[10,1],[22],[9,3,5,7,6,4],[],[5],[],[8],[],[],[0,1],[13],[12],[],[15,14,12],[12],[17,16,19,18],[],[],[20],[21],[],[],[23,24,11],[],[25],[],[],[28],[29,30,31],[],[20],[32],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Assign Expr ASSIGN ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name len ","Simple Name map ","Variable Declarator Map<Object, Object> map = ","Class Or Interface Type Map ","Method Call Expr ","Name Expr JsonIterator ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Object Creation Expr TypeLiteral<Map<Object, Object>> Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type TypeLiteral ","Method Call Expr ","Class Or Interface Type JsonIterator ","Object Creation Expr HashMap<Object, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Initializer Declaration ","Expression Stmt ","Return Stmt ","Simple Name put ","Name Expr iter ","Name Expr iter ","NullLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestMap_test_string_key","callMethodNameReferTo":{},"num":33,"succs":[[1,10],[22],[9,4,5,3,7,6],[],[5],[],[8],[],[],[0,1],[13],[12],[],[12,15,14],[12],[18,17,19,16],[],[],[20],[21],[],[],[24,11,23],[],[25],[],[],[28],[29,31,30],[],[20],[32],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_string_key ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name any ","Simple Name map ","Variable Declarator Map<String, Object> map = ","Field Access Expr ","Method Call Expr ","Class Or Interface Type WildcardType ","Simple Name deserialize ","String Literal Expr Not Empty  ","Object Creation Expr TypeLiteral<Map<String, Object>> Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type TypeLiteral ","Method Call Expr ","Return Stmt ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Method Call Expr ","Initializer Declaration ","Expression Stmt ","Unary Expr ! ","Simple Name any ","String Literal Expr Not Empty  ","Simple Name code ","NullLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestMap_test_integer_key","callMethodNameReferTo":{},"num":34,"succs":[[1,10],[22],[4,5,3,9,6,7],[],[5],[],[8],[],[],[1,0],[13],[12],[],[15,14,12],[12],[16,18,19,17],[],[],[20],[21],[],[],[23,24,11],[],[25],[],[],[28],[30,29,31],[],[32],[33],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Name Expr list ","Simple Name test_one_element ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name len ","Simple Name any ","Variable Declarator Map<Integer, Object> map = ","Method Call Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Object Creation Expr TypeLiteral<Map<Integer, Object>> Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Object Creation Expr HashMap<Integer, Object> Optional.empty Optional.empty ","Method Call Expr ","Initializer Declaration ","Return Stmt ","Method Call Expr ","Name Expr ctx ","Integer Literal Expr Note Zero  ","Simple Name iter ","IntegerLiteralExpr","NullLiteralExpr"]}
{"Version":"0.9.22","MethodName":"TestMap_test_MapKeyCodec","callMethodNameReferTo":{},"num":125,"succs":[[15,1],[54,2],[3,68],[81,4],[5,87],[6,96],[7,107],[8,112],[117],[12,13,10,11],[],[12],[],[5,1,4,8,6,7,3,2,0],[22,9,53,39],[16,18,17,19],[],[],[20],[21],[],[],[24,28,26,10,25,30,27,23],[],[25],[],[32,33],[29],[],[],[14,34,35],[32],[],[],[36],[44],[40],[31,38],[],[37],[42,41,38],[38],[43],[],[45,47,46],[37,48],[],[49,50,51],[],[],[],[31,52],[],[],[59],[56],[],[55,56],[57],[61,56,60],[56],[63,62,65,64],[],[],[66],[67],[],[],[75],[55],[69],[70,69],[69,71,58],[72],[72,73],[77,69,76],[69],[78,79],[],[80,55],[],[84,83,82],[],[85],[86,70],[],[],[88,90,89],[],[85],[92,91],[71,93,94],[],[],[95],[],[97,57,46],[101,98,100,102,99],[],[],[103,104],[66],[106],[105],[],[],[],[72,108,46],[110,109],[],[111,58],[],[113,115,114],[],[85],[116,73],[],[118,119,120],[],[85],[122,121],[74,124,123],[],[],[95]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_MapKeyCodec ","Block Stmt ","Return Stmt ","Method Call Expr ","Return Stmt ","Simple Name registerMapKeyDecoder ","Class Expr TestObject2.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type TestObject2 ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Name Expr output ","Simple Name decode ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Simple Name val ","Variable Declarator TestObject1 obj = ","Name Expr _firstName_ ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Method Call Expr ","Simple Name Field ","Name Expr keyType ","Simple Name valueOf ","Method Call Expr ","Simple Name readString ","ReturnStmt","Variable Declaration Expr ","Name Expr map ","Simple Name map ","Name Expr map ","Name Expr map ","Variable Declarator Map<TestObject1, Object> map = ","Single Member Annotation Expr @JsonProperty(\"field-1\") ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Object Creation Expr TypeLiteral<Map<TestObject1, Object>> Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type TypeLiteral ","Variable Declaration Expr ","Simple Name keys ","Name Expr keys ","Simple Name head ","Name Expr map1 ","Name Expr keys ","Name Expr map2 ","Variable Declarator ArrayList<TestObject1> keys = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<TestObject1> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Method Call Expr ","Simple Name keySet ","Expression Stmt ","Class Or Interface Type JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Name Expr args ","Expression Stmt ","Simple Name assertEquals ","Simple Name obj ","Field Access Expr ","Method Call Expr ","Simple Name Field ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Object Creation Expr TypeLiteral<Map<TestObject1, Object>> Optional.empty Optional.empty ","Object Creation Expr GsonCompatibilityMode.Builder Optional.empty Optional.empty ","Simple Name build ","Class Or Interface Type Builder ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Object Creation Expr ArrayList<TestObject1> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Method Call Expr ","Simple Name keySet ","Method Call Expr ","Return Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name size ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Field Access Expr ","Method Call Expr ","Simple Name Field ","Simple Name get ","Integer Literal Expr Zero  "]}
