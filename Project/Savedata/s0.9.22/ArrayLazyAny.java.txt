{"fileName":"ArrayLazyAny.java","Version":"0.9.22","callMethodName":["valueType","object","toBoolean","toInt","toLong","toFloat","toDouble","toBigInteger","toBigDecimal","size","iterator","get","get","fillCache","fillCacheUntil","remove","hasNext","next","writeTo","toString"]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_valueType","callMethodNameReferTo":{},"num":11,"succs":[[1,4,3,5,2],[],[],[4],[],[6],[0,8,7],[],[10,9],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","ReturnStmt","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_object","callMethodNameReferTo":{},"num":115,"succs":[[1,8],[12,2,11],[6,3,5,4,7],[],[],[6],[],[0,1],[9,10],[],[37,36,39,38],[],[],[14,40],[43,16,15,41,42],[16,11,10],[17,44],[47,19,18,46,42],[19,49],[20,55],[35,69,68,70,21,33],[71,22],[23,76],[78,29,42,24,79],[25,80],[81,28,82,26],[85,27],[28,11,10],[87,29],[30,92],[93,32,31,94,42],[98,29],[35,103],[34,108,107],[35,109],[112],[],[38],[],[20,16,19,13],[15],[],[],[],[18],[17],[],[48],[],[45,51,50],[],[52,53],[],[54],[],[64],[57],[],[56],[58,56],[59,56],[62,60,56],[61,56],[62,56],[65,56,66],[56],[67,57],[],[22,32,29,21],[33,106],[35],[58,74,73,72,75],[],[],[],[],[28,24],[23],[],[],[27,26],[83,59,84],[],[],[],[77,50,86],[],[89,90,88],[],[],[91,60],[],[31],[95,96,61],[97],[],[],[],[101,99,100],[],[],[62,102],[],[105,104,50],[],[],[34],[],[],[111,110],[],[],[113,114,63],[],[]],"nodeAttribute":["Field Access Expr ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","ReturnStmt","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toBoolean","callMethodNameReferTo":{"33":"JsonIteratorPool.java_JsonIteratorPool_outer_returnJsonIterator","24":"CodegenAccess.java_CodegenAccess_outer_readArrayStart"},"num":36,"succs":[[12,1],[3,22,5,21,2,20],[6,5,23,24],[29,28,4],[30,5],[33],[10,8,9,11,7],[],[],[10],[],[0,1],[16],[14],[],[13,14],[17,18,14],[14],[19],[],[2],[3,27],[5],[],[13,25,26],[],[],[4],[],[],[32,31],[],[],[35,15,34],[],[]],"nodeAttribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type boolean ","Simple Name toBoolean ","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name parse ","Block Stmt ","Catch Clause ","Block Stmt ","ReturnStmt","Method Call Expr ","Name Expr CodegenAccess ","Simple Name readArrayStart ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toInt","callMethodNameReferTo":{},"num":125,"succs":[[3,4,2,5,1],[],[],[4],[],[6],[8,7,0],[],[9,10],[],[16,2,13,15,14],[17,12],[20,10,7],[],[15],[],[11,12],[18,19],[],[47,46,49,48],[22,21,10],[],[],[24,50],[53,26,25,51,52],[26,7,19],[27,54],[57,29,28,56,52],[29,59],[30,65],[45,78,79,80,31,43],[81,32],[33,86],[88,39,52,34,89],[35,90],[91,38,92,36],[95,37],[38,7,19],[97,39],[40,102],[103,42,41,104,52],[108,39],[45,113],[44,118,117],[119,45],[122],[],[48],[],[30,26,29,23],[25],[],[],[],[28],[27],[],[58],[],[55,61,60],[],[62,63],[],[64],[],[74],[67],[],[66],[68,66],[69,66],[72,70,66],[71,66],[72,66],[75,66,76],[66],[77,67],[],[32,42,39,31],[43,116],[45],[84,68,83,82,85],[],[],[],[],[38,34],[33],[],[],[37,36],[93,69,94],[],[],[],[87,60,96],[],[99,100,98],[],[],[101,70],[],[41],[105,106,71],[107],[],[],[],[111,109,110],[],[],[72,112],[],[115,114,60],[],[],[44],[],[],[121,120],[],[],[123,124,73],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name toInt ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toLong","callMethodNameReferTo":{},"num":125,"succs":[[3,4,2,5,1],[],[],[4],[],[6],[0,7,8],[],[9,10],[],[16,2,13,15,14],[17,12],[20,10,7],[],[15],[],[11,12],[18,19],[],[47,46,49,48],[22,21,10],[],[],[24,50],[53,26,25,51,52],[26,7,19],[27,54],[57,29,28,56,52],[29,59],[30,65],[45,78,79,80,31,43],[81,32],[33,86],[88,39,52,34,89],[35,90],[91,38,92,36],[95,37],[38,7,19],[97,39],[40,102],[103,42,41,104,52],[108,39],[45,113],[44,118,117],[119,45],[122],[],[48],[],[30,26,29,23],[25],[],[],[],[28],[27],[],[58],[],[55,61,60],[],[62,63],[],[64],[],[74],[67],[],[66],[68,66],[69,66],[72,70,66],[71,66],[72,66],[75,66,76],[66],[77,67],[],[32,42,39,31],[43,116],[45],[84,68,83,82,85],[],[],[],[],[38,34],[33],[],[],[37,36],[93,69,94],[],[],[],[87,60,96],[],[99,100,98],[],[],[101,70],[],[41],[105,106,71],[107],[],[],[],[111,109,110],[],[],[72,112],[],[115,114,60],[],[],[44],[],[],[121,120],[],[],[123,124,73],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type long ","Simple Name toLong ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toFloat","callMethodNameReferTo":{},"num":125,"succs":[[5,4,1,2,3],[],[],[4],[],[6],[8,0,7],[],[10,9],[],[16,2,13,15,14],[17,12],[20,10,7],[],[15],[],[11,12],[18,19],[],[47,46,49,48],[22,21,10],[],[],[24,50],[53,26,25,51,52],[26,7,19],[27,54],[57,29,28,56,52],[29,59],[30,65],[45,78,79,80,31,43],[81,32],[33,86],[88,39,52,34,89],[35,90],[91,38,92,36],[95,37],[38,7,19],[97,39],[40,102],[103,42,41,104,52],[108,39],[45,113],[44,118,117],[119,45],[122],[],[48],[],[30,26,29,23],[25],[],[],[],[28],[27],[],[58],[],[55,61,60],[],[62,63],[],[64],[],[74],[67],[],[66],[68,66],[69,66],[72,70,66],[71,66],[72,66],[75,66,76],[66],[77,67],[],[32,42,39,31],[43,116],[45],[84,68,83,82,85],[],[],[],[],[38,34],[33],[],[],[37,36],[93,69,94],[],[],[],[87,60,96],[],[99,100,98],[],[],[101,70],[],[41],[105,106,71],[107],[],[],[],[111,109,110],[],[],[72,112],[],[115,114,60],[],[],[44],[],[],[121,120],[],[],[123,124,73],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type float ","Simple Name toFloat ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toDouble","callMethodNameReferTo":{},"num":125,"succs":[[5,2,1,4,3],[],[],[4],[],[6],[8,0,7],[],[10,9],[],[16,2,13,15,14],[17,12],[20,10,7],[],[15],[],[11,12],[18,19],[],[47,46,49,48],[22,21,10],[],[],[24,50],[53,26,25,51,52],[26,7,19],[27,54],[57,29,28,56,52],[29,59],[30,65],[45,78,79,80,31,43],[81,32],[33,86],[88,39,52,34,89],[35,90],[91,38,92,36],[95,37],[38,7,19],[97,39],[40,102],[103,42,41,104,52],[108,39],[45,113],[44,118,117],[119,45],[122],[],[48],[],[30,26,29,23],[25],[],[],[],[28],[27],[],[58],[],[55,61,60],[],[62,63],[],[64],[],[74],[67],[],[66],[68,66],[69,66],[72,70,66],[71,66],[72,66],[75,66,76],[66],[77,67],[],[32,42,39,31],[43,116],[45],[84,68,83,82,85],[],[],[],[],[38,34],[33],[],[],[37,36],[93,69,94],[],[],[],[87,60,96],[],[99,100,98],[],[],[101,70],[],[41],[105,106,71],[107],[],[],[],[111,109,110],[],[],[72,112],[],[115,114,60],[],[],[44],[],[],[121,120],[],[],[123,124,73],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type double ","Simple Name toDouble ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toBigInteger","callMethodNameReferTo":{},"num":128,"succs":[[3,2,5,1,4],[],[],[4],[],[6],[0,8,7],[],[10,9,11],[],[],[12,13],[],[19,2,16,18,17],[20,15],[23,13,7],[],[18],[],[14,15],[21,22],[],[50,49,52,51],[25,24,13],[],[],[27,53],[56,29,28,54,55],[29,7,22],[30,57],[60,32,31,59,55],[32,62],[33,68],[48,81,82,83,34,46],[84,35],[36,89],[91,42,37,92,55],[38,93],[94,41,95,39],[98,40],[41,7,22],[100,42],[43,105],[106,45,44,107,55],[111,42],[48,116],[47,121,120],[48,122],[125],[],[51],[],[33,29,32,26],[28],[],[],[],[31],[30],[],[61],[],[58,64,63],[],[65,66],[],[67],[],[77],[70],[],[69],[71,69],[72,69],[75,73,69],[74,69],[75,69],[78,69,79],[69],[80,70],[],[35,45,42,34],[46,119],[48],[71,87,86,85,88],[],[],[],[],[41,37],[36],[],[],[40,39],[96,72,97],[],[],[],[90,63,99],[],[102,103,101],[],[],[104,73],[],[44],[108,109,74],[110],[],[],[],[114,112,113],[],[],[75,115],[],[118,117,63],[],[],[47],[],[],[124,123],[],[],[126,127,76],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type BigInteger ","Simple Name toBigInteger ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr BigInteger ","Simple Name valueOf ","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toBigDecimal","callMethodNameReferTo":{},"num":128,"succs":[[5,4,3,2,1],[],[],[4],[],[6],[0,8,7],[],[10,11,9],[],[],[13,12],[],[19,2,16,18,17],[20,15],[23,13,7],[],[18],[],[14,15],[21,22],[],[50,49,52,51],[25,24,13],[],[],[27,53],[56,29,28,54,55],[29,7,22],[30,57],[60,32,31,59,55],[32,62],[33,68],[48,81,82,83,34,46],[84,35],[36,89],[91,42,37,92,55],[38,93],[94,41,95,39],[98,40],[41,7,22],[100,42],[43,105],[106,45,44,107,55],[111,42],[48,116],[47,121,120],[48,122],[125],[],[51],[],[33,29,32,26],[28],[],[],[],[31],[30],[],[61],[],[58,64,63],[],[65,66],[],[67],[],[77],[70],[],[69],[71,69],[72,69],[75,73,69],[74,69],[75,69],[78,69,79],[69],[80,70],[],[35,45,42,34],[46,119],[48],[71,87,86,85,88],[],[],[],[],[41,37],[36],[],[],[40,39],[96,72,97],[],[],[],[90,63,99],[],[102,103,101],[],[],[104,73],[],[44],[108,109,74],[110],[],[],[],[114,112,113],[],[],[75,115],[],[118,117,63],[],[],[47],[],[],[124,123],[],[],[126,127,76],[],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type BigDecimal ","Simple Name toBigDecimal ","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr BigDecimal ","Simple Name valueOf ","Method Call Expr ","Simple Name size ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_size","callMethodNameReferTo":{},"num":117,"succs":[[8,1],[12,2,11],[7,4,3,6,5],[],[],[6],[],[0,1],[9,10],[],[39,38,41,40],[],[14,13,2],[],[],[16,42],[45,18,17,43,44],[18,11,10],[19,46],[49,21,20,48,44],[21,51],[22,57],[37,71,70,72,23,35],[73,24],[25,78],[80,31,26,44,81],[27,82],[83,30,84,28],[87,29],[30,11,10],[89,31],[32,94],[95,34,33,96,44],[100,31],[37,105],[36,110,109],[37,111],[114],[],[40],[],[22,18,21,15],[17],[],[],[],[20],[19],[],[50],[],[47,52,53],[],[54,55],[],[56],[],[66],[59],[],[58],[60,58],[61,58],[64,62,58],[63,58],[64,58],[67,58,68],[58],[69,59],[],[24,34,31,23],[35,108],[37],[76,60,75,74,77],[],[],[],[],[30,26],[25],[],[],[29,28],[85,61,86],[],[],[],[79,52,88],[],[91,92,90],[],[],[93,62],[],[33],[97,98,63],[99],[],[],[],[103,101,102],[],[],[64,104],[],[107,106,52],[],[],[36],[],[],[113,112],[],[],[115,116,65],[],[]],"nodeAttribute":["Expression Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","ReturnStmt","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_iterator","callMethodNameReferTo":{},"num":23,"succs":[[13,3,1],[14,2,3,16,15],[5,18,17],[4],[5,21,17],[6,7,9,10,8],[],[],[12,11,9],[],[0],[],[],[2],[],[],[],[],[19,5,20],[],[],[22],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Iterator ","Simple Name iterator ","Block Stmt ","Simple Name Iterator ","Class Or Interface Type Any ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","ReturnStmt","Method Call Expr ","Name Expr cache ","Simple Name iterator ","Object Creation Expr LazyIterator Optional.empty Optional.empty ","Class Or Interface Type LazyIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_get","callMethodNameReferTo":{},"num":326,"succs":[[2,16,15,1],[18,17,4],[24,3,23],[25,17,4],[7,8,6,9,5,10],[],[],[8],[],[12,14],[0],[12,20],[],[12,11],[],[1],[2,22],[],[11,19,21],[],[],[73,72,71,69,70],[3],[],[],[27,13,26],[],[29,28],[],[214,212,213,6,215],[80,31],[81,83,33,82,32],[84,21,33,17],[87,34],[90,35,89,82,36],[92,36],[37,98],[38,109],[40,110,39,75,101],[111,40,21,17],[41,114],[67,130,42,129,65,131],[132,43],[137,44],[45,141,56,140,82],[142,46],[143,144,49,47],[147,48],[149,49],[151,50],[51,159],[162,52],[163,53,55,82,77],[54,165],[154,21,55,17],[56,169],[171,57],[64,172,58,173,82],[177,59],[185,60],[61,188],[56,62,189,82,78],[63,191],[180,56,21,17],[67,196],[201,200,66],[67,202],[68,205],[208],[],[71],[],[20,79],[37,68,40,41,30,33,36],[12,20],[20,74],[12,75,38,20],[76,20],[20,77],[],[32],[],[],[],[85,86,4,74],[],[],[35],[34],[],[91],[],[94,88,93],[],[95,96],[],[97],[],[104],[100],[],[99],[99,101],[102],[105,99,106],[99],[107,100,108],[],[225,6,222,224,223],[39],[],[76,112,113,4],[],[],[125],[116],[],[115],[115,117],[118,115],[115,119],[115,123,120],[115,121],[115,122],[115,123],[127,115,126],[115],[128,116],[],[64,56,42,43],[65,199],[67],[133,135,117,134,136],[],[],[],[],[45,50,55,49,51],[44],[44],[],[],[48,47],[146,118,145],[],[],[],[138,148,93],[],[150],[],[155],[119],[152],[153,152],[157,156,152],[152],[119,158],[],[160,153,161],[],[],[54,53],[164],[],[139,93,166],[168,167,120],[],[],[102,170,93],[97],[59,58,60],[121,174,175],[176],[],[],[],[181],[122],[178],[179,178],[182,178,183],[178],[184,122],[],[179,187,186],[],[],[62,63],[103,190],[],[192,193,93],[],[194,195,123],[],[],[198,197,93],[],[],[66],[],[],[204,203],[],[],[206,124,207],[],[],[209],[],[211,216],[219,29,17],[],[214],[],[210,211],[217,218],[],[254,69,256,255],[],[226,221],[228,108,17],[],[224],[],[220,221],[227,218],[],[230,229,108],[],[],[232,257],[259,234,233,258,82],[234,17,218],[235,260],[263,237,236,262,82],[237,264],[238,268],[253,282,281,283,239,251],[284,240],[241,289],[291,247,82,242,292],[243,293],[294,246,144,244],[297,245],[246,17,218],[299,247],[248,304],[305,250,249,306,82],[309,247],[253,314],[252,319,318],[253,320],[323],[255],[],[238,234,237,231],[233],[],[],[236],[235],[],[91],[261,93,265],[266,267],[],[97],[277],[270],[],[269],[271,269],[272,269],[275,273,269],[274,269],[275,269],[278,269,279],[269],[280,270],[],[240,250,247,239],[251,317],[253],[287,271,286,285,288],[],[],[],[],[246,242],[241],[],[],[245,244],[295,272,296],[],[],[290,93,298],[],[301,302,300],[],[],[303,273],[],[249],[307,308,274],[176],[],[],[312,310,311],[],[],[275,313],[],[316,315,93],[],[],[252],[],[],[322,321],[],[],[324,325,276],[],[]],"nodeAttribute":["Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Name Expr index ","Simple Name index ","Name Expr index ","Primitive Type int ","Block Stmt ","Catch Clause ","ReturnStmt","Method Call Expr ","Simple Name fillCacheUntil ","Simple Name target ","Method Declaration ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Throw Stmt ","PRIVATE","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int target ","Block Stmt ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Primitive Type int ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name get ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","LESS","Method Call Expr ","Name Expr cache ","Simple Name get ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Unary Expr ++ ","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Field Access Expr ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Name Expr cache ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Call Expr ","Name Expr cache ","Simple Name size ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_get","callMethodNameReferTo":{"100":"Any.java_Any_outer_rewrap"},"num":457,"succs":[[1,47],[49,3,2,48,37],[52,3,22,51],[54,4],[61,5],[6,56,62,16],[7,63],[8,66],[10,74,9],[10,15],[76,11],[78,12],[13,90],[93,14,91,9,92],[98,9],[22,100,51,16],[103,104,18,105,20,17],[22,106,51],[117,19,118],[22,119,51],[126,21,125],[22,127,51],[27,28,29,25,24,23,26],[],[],[26],[],[31,44],[38,46],[3,0,4,16],[31],[],[31,30],[31,32],[31,33],[31,34],[31,35],[38],[],[38,37],[38,39],[38,40],[38,41],[42,38],[45],[],[],[2],[],[50,30],[],[],[53],[],[58],[32,39],[55],[55,56],[55,59,60],[55],[32,39],[6,8,7,15],[],[64,65],[],[155,154,157,156],[70],[68],[],[67,68],[72,71,68],[68],[73],[],[12,11],[76],[77],[76],[82],[40,75,33],[79],[79,13,80],[79,84,83],[79],[85,22,86,75,33],[],[38,88,40,87],[],[89],[],[14],[95,80,94],[],[96,97],[],[231,233,232,234,24],[],[],[81,67,99],[],[102,101,69],[],[],[17],[18,116],[124,20],[108,107,22,109,34],[111,113,110],[],[38,115,41,87],[],[57,112,114],[],[281,280,154,279,278],[],[89],[19],[],[],[120,35,42,121],[],[122,123],[],[418,416,417,24,419],[21],[],[],[36,129,128,43],[],[130,123],[],[132,158],[160,134,133,159,48],[134,51,65],[135,161],[164,137,136,163,48],[137,166],[138,171],[153,184,185,186,139,151],[187,140],[141,192],[194,147,142,195,48],[143,196],[197,146,198,144],[201,145],[146,51,65],[203,147],[148,208],[209,150,149,210,48],[214,147],[153,219],[152,224,223],[153,225],[228],[],[156],[],[138,134,137,131],[133],[],[],[136],[135],[],[165],[],[162,168,167],[],[169,170],[],[89],[180],[173],[],[172],[174,172],[175,172],[178,176,172],[177,172],[178,172],[181,172,182],[172],[183,173],[],[140,150,147,139],[151,222],[153],[190,174,189,188,191],[],[],[],[],[146,142],[141],[],[],[145,144],[199,175,200],[],[],[],[193,167,202],[],[205,206,204],[],[],[207,176],[],[149],[211,212,177],[213],[],[],[],[217,215,216],[],[],[178,218],[],[221,220,167],[],[],[152],[],[],[227,226],[],[],[229,230,179],[],[],[],[233],[],[235],[95,236,51],[238,237],[],[],[288,240],[289,290,242,48,241],[291,113,242,51],[296,243],[299,244,298,48,245],[300,245],[246,304],[247,315],[249,316,248,283,307],[317,249,113,51],[250,320],[276,336,335,251,274,337],[338,252],[343,253],[254,265,347,346,48],[348,255],[349,198,256,258],[352,257],[354,258],[356,259],[260,364],[367,261],[368,262,264,285,48],[263,370],[113,359,264,51],[265,374],[376,266],[273,377,267,378,48],[381,268],[389,269],[270,392],[265,271,48,393,286],[272,395],[384,265,113,51],[276,400],[405,404,275],[276,406],[277,409],[412],[279],[],[112,287],[246,277,249,250,239,242,245],[294,112],[112,282],[294,283,247,112],[284,112],[112,285],[],[241],[],[],[292,293,282,295],[],[],[],[428,429,430,427,24,431],[244],[243],[],[165],[301,297,167],[302,303],[],[89],[310],[306],[],[305],[305,307],[308],[311,305,312],[305],[313,306,314],[],[451,24,448,450,449],[248],[],[284,318,319,295],[],[],[331],[322],[],[321],[321,323],[324,321],[321,325],[321,329,326],[321,327],[321,328],[321,329],[321,333,332],[321],[334,322],[],[273,265,251,252],[274,403],[276],[339,341,323,340,342],[],[],[],[],[254,259,264,258,260],[253],[253],[],[],[257,256],[324,351,350],[],[],[344,167,353],[],[355],[],[360],[325],[357],[358,357],[362,361,357],[357],[363,325],[],[365,358,366],[],[],[263,262],[369],[],[345,167,371],[373,372,326],[],[],[308,375,167],[89],[268,267,269],[327,379,380],[213],[],[],[385],[328],[382],[383,382],[386,382,387],[382],[388,328],[],[383,391,390],[],[],[271,272],[309,394],[],[397,396,167],[],[398,329,399],[],[],[402,401,167],[],[],[275],[],[],[408,407],[],[],[410,330,411],[],[],[413],[],[415,420],[422,123,51],[],[418],[],[414,415],[421,65],[],[],[425,436,435,424],[437,51,295],[426,441,440],[442,51,295],[],[429],[],[294,434],[423],[294,112],[294,432],[],[424],[425,439],[432,438,113],[],[426],[],[],[444,433,443],[],[123,445],[],[452,447],[454,314,51],[],[450],[],[446,447],[453,65],[],[456,455,314],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","For Each Stmt ","Name Expr cache ","Variable Declaration Expr ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Parameter ClassCastException e ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name get ","Parameter Object[] keys ","Parameter int idx ","Block Stmt ","Name Expr keys ","Simple Name keys ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Name Expr keys ","Name Expr idx ","Simple Name idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Name Expr idx ","Array Type 1 ","Class Or Interface Type Object ","Primitive Type int ","Block Stmt ","EQUALS","Field Access Expr ","Simple Name length ","ReturnStmt","This Expr ","ThisExpr","Variable Declaration Expr ","Simple Name key ","Name Expr key ","Name Expr key ","Variable Declarator Object key = ","Class Or Interface Type Object ","Array Access Expr idx ","Block Stmt ","Simple Name isWildcard ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Variable Declaration Expr ","Name Expr result ","Simple Name result ","Name Expr result ","Variable Declarator ArrayList<Any> result = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","Name Expr element ","Simple Name element ","Class Or Interface Type Any ","Variable Declaration Expr ","Simple Name mapped ","Name Expr mapped ","Name Expr mapped ","Variable Declarator Any mapped = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","NOT_EQUALS","Field Access Expr ","Simple Name valueType ","Method Declaration ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name add ","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name get ","Binary Expr PLUS ","Simple Name fillCacheUntil ","Cast Expr ","Simple Name target ","Method Declaration ","Class Or Interface Type Integer ","Integer Literal Expr Note Zero  ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Block Stmt ","Class Or Interface Type ClassCastException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Marker Annotation Expr @Override ","Class Or Interface Type ValueType ","Simple Name valueType ","Block Stmt ","Return Stmt ","Field Access Expr ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int target ","Block Stmt ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Primitive Type int ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","LESS","Method Call Expr ","Name Expr cache ","Simple Name get ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Unary Expr ++ ","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Field Access Expr ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Name Expr index ","Name Expr index ","Primitive Type int ","Block Stmt ","Catch Clause ","Method Call Expr ","Simple Name fillCacheUntil ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Call Expr ","Name Expr cache ","Simple Name size "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_fillCache","callMethodNameReferTo":{"82":"CodegenAccess.java_CodegenAccess_outer_nextToken","101":"JsonIteratorPool.java_JsonIteratorPool_outer_returnJsonIterator","70":"CodegenAccess.java_CodegenAccess_outer_readArrayStart","55":"JsonIteratorPool.java_JsonIteratorPool_outer_borrowJsonIterator"},"num":104,"succs":[[1,28],[31,3,2,29,30],[3,32,23],[4,33],[36,6,5,35,30],[6,38],[7,44],[22,57,58,59,8,20],[60,9],[10,65],[67,16,11,68,30],[12,69],[70,15,71,13],[74,14],[15,32,23],[76,16],[17,81],[82,19,18,83,30],[87,16],[22,92],[21,97,96],[22,98],[101],[25,24,27,26],[],[26],[],[7,3,6,0],[2],[],[],[],[],[5],[4],[],[37],[],[34,39,40],[],[41,42],[],[43],[],[53],[46],[],[45],[47,45],[48,45],[51,49,45],[50,45],[51,45],[54,45,55],[45],[56,46],[],[9,19,16,8],[20,95],[22],[47,63,62,61,64],[],[],[],[],[15,11],[10],[],[],[14,13],[72,48,73],[],[],[],[66,39,75],[],[78,79,77],[],[],[80,49],[],[18],[84,85,50],[86],[],[],[],[90,88,89],[],[],[51,91],[],[94,93,39],[],[],[21],[],[],[100,99],[],[],[102,103,52],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Method Declaration ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","ReturnStmt","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_fillCacheUntil","callMethodNameReferTo":{"305":"CodegenAccess.java_CodegenAccess_outer_nextToken","147":"CodegenAccess.java_CodegenAccess_outer_nextToken","323":"JsonIteratorPool.java_JsonIteratorPool_outer_returnJsonIterator","180":"JsonIteratorPool.java_JsonIteratorPool_outer_returnJsonIterator","102":"JsonIteratorPool.java_JsonIteratorPool_outer_borrowJsonIterator","118":"CodegenAccess.java_CodegenAccess_outer_readArrayStart","294":"CodegenAccess.java_CodegenAccess_outer_readArrayStart","279":"JsonIteratorPool.java_JsonIteratorPool_outer_borrowJsonIterator","168":"CodegenAccess.java_CodegenAccess_outer_head","141":"CodegenAccess.java_CodegenAccess_outer_head"},"num":326,"succs":[[52,1],[53,55,3,54,2],[57,39,3,56],[62,4],[65,5,64,54,6],[67,6],[7,73],[8,84],[10,85,9,47,76],[86,10,39,56],[11,89],[37,105,12,104,35,106],[107,13],[112,14],[15,116,26,115,54],[117,16],[118,119,19,17],[122,18],[124,19],[126,20],[21,134],[137,22],[138,23,25,49,54],[24,140],[39,129,25,56],[26,144],[146,27],[34,147,28,148,54],[152,29],[160,30],[31,163],[26,32,54,164,50],[33,166],[155,26,39,56],[37,171],[176,175,36],[37,177],[38,180],[183],[44,43,42,40,41],[],[42],[],[46,51],[7,38,10,11,0,3,6],[60,46],[],[46,45],[60,47,8,46],[48,46],[46,49],[],[2],[],[],[],[],[58,59,45,61],[],[],[],[191,192,190,189,193,194],[5],[4],[],[66],[],[69,63,68],[],[70,71],[],[72],[],[79],[75],[],[74],[74,76],[77],[80,74,81],[74],[82,75,83],[],[215,190,212,214,213],[9],[],[48,87,88,61],[],[],[100],[91],[],[90],[90,92],[93,90],[90,94],[90,98,95],[90,96],[90,97],[90,98],[102,90,101],[90],[103,91],[],[34,26,12,13],[35,174],[37],[108,110,92,109,111],[],[],[],[],[15,20,25,19,21],[14],[14],[],[],[18,17],[93,121,120],[],[],[],[113,68,123],[],[125],[],[130],[94],[127],[128,127],[132,131,127],[127],[94,133],[],[135,128,136],[],[],[24,23],[139],[],[114,68,141],[143,142,95],[],[],[77,145,68],[72],[29,28,30],[96,149,150],[151],[],[],[],[156],[97],[153],[154,153],[157,153,158],[153],[97,159],[],[154,162,161],[],[],[32,33],[78,165],[],[167,168,68],[],[169,98,170],[],[],[173,172,68],[],[],[36],[],[],[179,178],[],[],[181,99,182],[],[],[184],[],[187,199,198,186],[200,56,61],[188,204,203],[205,56,61],[],[],[192],[],[60,197],[185],[60,46],[60,195],[],[186],[187,202],[195,201,39],[],[188],[],[],[207,196,206],[],[208,209],[],[226,224,225,190,227],[216,211],[219,83,56],[],[214],[],[210,211],[217,218],[],[254,40,256,255],[221,220,83],[],[],[223,228],[230,209,56],[],[226],[],[223,222],[229,218],[],[],[232,257],[259,234,233,258,54],[234,56,218],[235,260],[263,237,236,262,54],[237,264],[238,268],[253,281,282,283,239,251],[284,240],[241,289],[291,247,242,292,54],[243,293],[294,246,119,244],[297,245],[246,56,218],[299,247],[248,304],[305,250,249,306,54],[309,247],[253,314],[252,319,318],[320,253],[323],[255],[],[238,234,237,231],[233],[],[],[236],[235],[],[66],[261,265,68],[266,267],[],[72],[277],[270],[],[269],[271,269],[272,269],[275,273,269],[274,269],[275,269],[278,269,279],[269],[280,270],[],[240,250,247,239],[251,317],[253],[271,287,286,285,288],[],[],[],[],[246,242],[241],[],[],[245,244],[295,272,296],[],[],[290,68,298],[],[301,302,300],[],[],[303,273],[],[249],[307,308,274],[151],[],[],[312,310,311],[],[],[275,313],[],[316,315,68],[],[],[252],[],[],[322,321],[],[],[324,325,276],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Throw Stmt ","Method Declaration ","PRIVATE","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int target ","Block Stmt ","Name Expr target ","Simple Name target ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Primitive Type int ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr tail ","ReturnStmt","Method Call Expr ","Name Expr cache ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","LESS","Method Call Expr ","Name Expr cache ","Simple Name get ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Unary Expr ++ ","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Name Expr index ","Name Expr index ","Primitive Type int ","Block Stmt ","Catch Clause ","Method Call Expr ","Simple Name fillCacheUntil ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","Field Access Expr ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"LazyIterator_remove","callMethodNameReferTo":{},"num":9,"succs":[[5,4,1,3,2],[],[],[4],[],[6],[7],[8],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Simple Name remove ","Block Stmt ","Throw Stmt ","Object Creation Expr UnsupportedOperationException Optional.empty Optional.empty ","Class Or Interface Type UnsupportedOperationException "]}
{"Version":"0.9.22","MethodName":"LazyIterator_hasNext","callMethodNameReferTo":{},"num":13,"succs":[[4,1,3,2,5],[],[],[4],[],[6],[8,0,7],[],[11,9,10],[],[],[12],[]],"nodeAttribute":["Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type boolean ","Simple Name hasNext ","Block Stmt ","Return Stmt ","ReturnStmt","Binary Expr NOT_EQUALS ","Name Expr next ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr"]}
{"Version":"0.9.22","MethodName":"LazyIterator_next","callMethodNameReferTo":{},"num":367,"succs":[[1,16],[17,2,18,3,19],[21,3],[23,4],[30,5,9,7,29],[6,31],[9,34],[43,44,8],[9,45],[26,10,48],[11,12,13,14,15],[],[],[14],[],[0,4,9,3],[2],[],[],[20],[],[22],[],[27],[25],[],[24],[28,25,24],[24],[6,5],[42,7],[32,33],[],[],[37,35,36],[],[],[41,38,39],[],[40],[],[92,91,88,90,89],[8],[],[],[46,47,36],[],[20],[],[99,50],[100,101,52,18,51],[102,41,52,48],[107,53],[110,54,109,18,55],[111,55],[56,116],[57,127],[59,128,58,94,119],[129,59,41,48],[60,132],[86,148,61,147,84,149],[150,62],[155,63],[64,75,159,158,18],[160,65],[161,162,68,66],[165,67],[167,68],[169,69],[70,177],[180,71],[181,72,74,96,18],[73,183],[172,41,74,48],[75,187],[189,76],[83,190,77,191,18],[195,78],[203,79],[80,206],[75,81,207,18,97],[82,208],[198,75,41,48],[86,213],[218,217,85],[86,219],[87,222],[225],[],[90],[],[40,98],[56,87,59,60,49,52,55],[105,40],[40,93],[105,94,57,40],[95,40],[40,96],[],[51],[],[],[103,104,93,106],[],[],[],[232,233,12,234,231,235],[54],[53],[],[20],[112,108,36],[113,114],[],[115],[],[122],[118],[],[117],[117,119],[120],[123,117,124],[117],[125,118,126],[],[256,12,253,255,254],[58],[],[95,130,131,106],[],[],[143],[134],[],[133],[133,135],[136,133],[133,137],[133,141,138],[133,139],[133,140],[133,141],[145,133,144],[133],[146,134],[],[83,75,61,62],[84,216],[86],[151,153,135,152,154],[],[],[],[],[64,69,74,68,70],[63],[63],[],[],[67,66],[136,164,163],[],[],[],[156,166,36],[],[168],[],[173],[137],[170],[171,170],[175,174,170],[170],[176,137],[],[178,171,179],[],[],[73,72],[182],[],[157,36,184],[186,185,138],[],[],[120,188,36],[115],[78,77,79],[139,192,193],[194],[],[],[],[199],[140],[196],[197,196],[200,196,201],[196],[140,202],[],[197,205,204],[],[],[81,82],[121,33],[209,210,36],[],[211,141,212],[],[],[215,214,36],[],[],[85],[],[],[221,220],[],[],[223,142,224],[],[],[226],[],[229,240,239,228],[241,48,106],[230,245,244],[246,48,106],[],[233],[],[105,238],[227],[105,40],[105,236],[],[228],[229,243],[236,242,41],[],[230],[],[],[248,237,247],[],[249,250],[],[267,265,266,12,268],[257,252],[260,126,48],[],[255],[],[251,252],[258,259],[],[295,88,297,296],[262,261,126],[],[],[264,269],[271,250,48],[],[267],[],[264,263],[270,259],[],[],[273,298],[300,275,274,299,18],[275,48,259],[276,301],[304,278,277,18,303],[278,305],[279,309],[294,322,323,324,280,292],[325,281],[282,330],[332,288,18,283,333],[284,334],[335,287,162,285],[338,286],[287,48,259],[340,288],[289,345],[346,291,290,347,18],[350,288],[294,355],[293,360,359],[294,361],[364],[296],[],[279,275,278,272],[274],[],[],[277],[276],[],[20],[302,306,36],[307,308],[],[115],[318],[311],[],[310],[312,310],[313,310],[316,314,310],[315,310],[316,310],[319,310,320],[310],[321,311],[],[281,291,288,280],[292,358],[294],[312,328,327,326,329],[],[],[],[],[287,283],[282],[],[],[286,285],[336,313,337],[],[],[331,36,339],[],[342,343,341],[],[],[344,314],[],[290],[348,349,315],[194],[],[],[353,351,352],[],[],[316,354],[],[357,356,36],[],[],[293],[],[],[363,362],[],[],[365,366,317],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter IndexOutOfBoundsException e ","Expression Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type Any ","Simple Name next ","Block Stmt ","Block Stmt ","Name Expr next ","EQUALS","Null Literal Expr ","NullLiteralExpr","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Variable Declaration Expr ","Simple Name current ","Name Expr next ","Name Expr current ","Variable Declarator Any current = ","Class Or Interface Type Any ","Block Stmt ","Catch Clause ","Unary Expr ++ ","Name Expr index ","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Name Expr next ","ASSIGN","Method Call Expr ","Simple Name fillCacheUntil ","Name Expr index ","Simple Name target ","Method Declaration ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Assign Expr ASSIGN ","Name Expr next ","Null Literal Expr ","ReturnStmt","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr LESS ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Throw Stmt ","PRIVATE","Class Or Interface Type Any ","Simple Name fillCacheUntil ","Parameter int target ","Block Stmt ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Name Expr target ","Primitive Type int ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name get ","Simple Name index ","Method Declaration ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name i ","Name Expr cache ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Method Call Expr ","Simple Name size ","Method Declaration ","Block Stmt ","LESS","Method Call Expr ","Name Expr cache ","Simple Name get ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Variable Declaration Expr ","Simple Name element ","Name Expr element ","Name Expr element ","Variable Declarator Any element = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Name Expr cache ","Simple Name add ","Block Stmt ","Unary Expr ++ ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name head ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Try Stmt ","Return Stmt ","Parameter IndexOutOfBoundsException e ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Any ","Simple Name get ","Parameter int index ","Block Stmt ","Name Expr index ","Name Expr index ","Primitive Type int ","Block Stmt ","Catch Clause ","Method Call Expr ","Simple Name fillCacheUntil ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Simple Name e ","Object Creation Expr NotFoundAny Optional.empty Optional.empty ","Class Or Interface Type NotFoundAny ","Method Call Expr ","Simple Name object ","Method Declaration ","Expression Stmt ","Return Stmt ","Marker Annotation Expr @Override ","Primitive Type int ","Simple Name size ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr cache ","Simple Name size ","Field Access Expr ","Return Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name object ","Block Stmt ","Method Call Expr ","Simple Name fillCache ","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","Assign Expr ASSIGN ","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_writeTo","callMethodNameReferTo":{},"num":137,"succs":[[3,1,20],[21,3,23,22,2],[24],[5,4],[5,28],[31],[15,11,9,8,12,7,13,10],[],[],[10],[],[19,17],[14],[],[],[0],[17],[],[16,17],[],[2],[],[],[],[26,6,16,25],[27],[],[],[29,30],[],[59,58,61,60],[33,18,34,32],[],[],[],[36,62],[64,38,37,63,22],[38,65,30],[39,66],[69,41,40,22,68],[41,71],[42,77],[57,91,90,92,43,55],[93,44],[45,98],[100,51,46,101,22],[47,102],[103,50,104,48],[107,49],[50,65,30],[109,51],[52,114],[115,54,53,116,22],[120,51],[57,125],[56,130,129],[131,57],[134],[],[60],[],[42,38,41,35],[37],[],[],[],[40],[39],[],[70],[],[67,72,73],[],[74,75],[],[76],[],[86],[79],[],[78],[80,78],[81,78],[84,82,78],[83,78],[84,78],[87,78,88],[78],[89,79],[],[44,54,51,43],[55,128],[57],[80,96,95,94,97],[],[],[],[],[50,46],[45],[],[],[49,48],[105,81,106],[],[],[],[99,72,108],[],[111,112,110],[],[],[113,82],[],[53],[117,118,83],[119],[],[],[],[123,121,122],[],[],[84,124],[],[127,126,72],[],[],[56],[],[],[133,132],[],[],[135,136,85],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Simple Name writeTo ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr stream ","Simple Name stream ","Name Expr stream ","Class Or Interface Type JsonStream ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr head ","Method Call Expr ","Super Expr ","Simple Name writeTo ","SuperExpr","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Simple Name writeVal ","Name Expr typeLiteral ","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","ReturnStmt","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
{"Version":"0.9.22","MethodName":"ArrayLazyAny_toString","callMethodNameReferTo":{"24":"JsonStream.java_JsonStream_outer_serialize"},"num":129,"succs":[[12,3,1],[15,3,13,14,2],[6,17,16],[4,5],[21,5],[6,24,16],[7,10,9,8,11],[],[],[10],[],[0],[2],[],[],[],[],[6,19,18],[20],[],[],[22,23],[],[52,51,54,53],[25,27,26],[],[],[],[29,55],[57,31,30,56,14],[31,16,23],[32,58],[61,34,33,60,14],[34,63],[35,69],[50,82,83,84,36,48],[85,37],[38,90],[92,44,93,14,39],[40,94],[95,43,96,41],[99,42],[43,16,23],[101,44],[45,106],[107,47,46,108,14],[112,44],[50,117],[49,122,121],[50,123],[126],[],[53],[],[35,31,34,28],[30],[],[],[33],[32],[],[62],[],[59,64,65],[],[66,67],[],[68],[],[78],[71],[],[70],[72,70],[73,70],[76,74,70],[75,70],[76,70],[79,70,80],[70],[81,71],[],[37,47,44,36],[48,120],[50],[72,88,87,86,89],[],[],[],[],[43,39],[38],[],[],[42,41],[97,73,98],[],[],[],[91,64,100],[],[103,104,102],[],[],[105,74],[],[46],[109,110,75],[111],[],[],[],[115,113,114],[],[],[76,116],[],[119,118,64],[],[],[49],[],[],[125,124],[],[],[127,128,77],[],[]],"nodeAttribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Class Or Interface Type String ","Simple Name toString ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","EQUALS","Name Expr head ","ReturnStmt","Method Call Expr ","Super Expr ","Simple Name toString ","SuperExpr","Method Call Expr ","Simple Name fillCache ","Method Declaration ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Name Expr cache ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","While Stmt ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","PRIVATE","Void Type ","Simple Name fillCache ","Block Stmt ","Block Stmt ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr cache ","Name Expr cache ","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Object Creation Expr ArrayList<Any> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Block Stmt ","Catch Clause ","Block Stmt ","Method Call Expr ","Simple Name reset ","Name Expr data ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Name Expr lastParsedPos ","Name Expr lastParsedPos ","Name Expr head ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr CodegenAccess ","Simple Name readArrayStart ","Assign Expr ASSIGN ","Name Expr tail ","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Name Expr CodegenAccess ","Simple Name nextToken ","','","Method Call Expr ","Name Expr cache ","Simple Name add ","Method Call Expr ","Simple Name readAny ","Assign Expr ASSIGN ","Name Expr lastParsedPos ","Name Expr tail ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator "]}
