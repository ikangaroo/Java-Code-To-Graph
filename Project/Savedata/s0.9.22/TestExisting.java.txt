{"fileName":"TestExisting.java","Version":"0.9.22","callMethodName":["test_direct_reuse","test_indirect_reuse","test_reuse_list","test_reuse_linked_list","test_reuse_map"]}
{"Version":"0.9.22","MethodName":"TestExisting_test_direct_reuse","callMethodNameReferTo":{"38":"JsonIterator.java_JsonIterator_outer_parse"},"num":69,"succs":[[15,1],[2,28],[34,3],[4,48],[53,5],[56,6],[61],[10,14,8,9,11,12],[],[10],[],[13],[],[],[2,0,5,1,3,4,6],[24],[17],[],[16],[21,20,16],[35],[18,16],[19],[19,22],[25,26,17],[17],[27],[],[29,30,31],[32,16],[],[33],[],[],[36],[],[35,37,38],[35],[41,39,40],[],[],[45,44,43,42],[33],[],[46],[47],[],[],[51],[18],[49],[52,18,49],[49],[19,30,54],[21,20,55],[],[59,58,57],[],[33],[60,22],[],[62,64,63],[],[66,50,65],[67,23,68],[],[],[],[]],"nodeAttribute":["Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Class Or Interface Type Map ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Assign Expr ASSIGN ","Name Expr decoder ","Simple Name testObj ","Name Expr testObj ","Name Expr ctClass ","Simple Name wrap ","Name Expr testObj ","Name Expr testObj ","Name Expr testObj ","Variable Declarator TestObj1 testObj = ","Class Or Interface Type TestObj1 ","Object Creation Expr TestObj1 Optional.empty Optional.empty ","Class Or Interface Type TestObj1 ","Return Stmt ","Field Access Expr ","ASSIGN","String Literal Expr Not Empty  ","Simple Name encode ","StringLiteralExpr","Variable Declaration Expr ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","'\\''","'\"'","Expression Stmt ","Simple Name oldObj ","Name Expr oldObj ","Variable Declarator TestObj1 oldObj = ","Class Or Interface Type CtMethod ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name read ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name field1 ","Assign Expr ASSIGN ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Name Expr System ","Simple Name identityHashCode ","Name Expr System ","Simple Name identityHashCode "]}
{"Version":"0.9.22","MethodName":"TestExisting_test_indirect_reuse","callMethodNameReferTo":{"49":"JsonIterator.java_JsonIterator_outer_parse"},"num":87,"succs":[[1,17],[32,2],[38,3],[45,4],[59,5],[6,64],[67,7],[8,72],[79],[16,11,10,12,13,14],[],[12],[],[15],[],[],[0,8,6,2,1,7,5,3,4],[28],[19],[],[18],[20],[23,24,20],[46],[21,20],[22],[25,22],[26,22],[29,30,19],[19],[31],[],[33,34,35],[18,36],[],[37],[],[],[34,39,40],[42,41],[44],[43,20],[],[],[],[47],[],[46,48,49],[46],[51,50,52],[],[],[53,54,55,56],[44],[],[57],[58],[],[],[62],[21],[60],[63,60,21],[60],[22,34,65],[23,24,66],[],[69,70,68],[],[44],[71,25],[],[75,74,73],[],[44],[77,76],[78,26],[],[],[81,80,82],[],[83,84,61],[85,27,86],[],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_indirect_reuse ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Primitive Type boolean ","Simple Name testObj ","Name Expr testObj ","Name Expr testObj ","Name Expr testObj ","Name Expr iter ","Name Expr testObj ","Name Expr testObj ","Name Expr testObj ","Name Expr testObj ","Variable Declarator TestObj2 testObj = ","Class Or Interface Type TestObj2 ","Object Creation Expr TestObj2 Optional.empty Optional.empty ","Class Or Interface Type TestObj2 ","Assign Expr ASSIGN ","Return Stmt ","ASSIGN","Simple Name skipFixedBytes ","Simple Name toLong ","Class Or Interface Type TestObj1 ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Return Stmt ","Simple Name field1 ","Simple Name field4 ","StringLiteralExpr","Variable Declaration Expr ","Long Literal Expr Note Zero  ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","'\\''","'\"'","Variable Declaration Expr ","Simple Name oldObj ","Name Expr oldObj ","Variable Declarator TestObj2 oldObj = ","Class Or Interface Type TestObj2 ","Variable Declaration Expr ","Method Call Expr ","Simple Name read ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","Class Or Interface Type Method ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Field Access Expr ","Field Access Expr ","Simple Name field2 ","Simple Name field4 ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name identityHashCode ","Name Expr System ","Simple Name identityHashCode "]}
{"Version":"0.9.22","MethodName":"TestExisting_test_reuse_list","callMethodNameReferTo":{"25":"JsonIterator.java_JsonIterator_outer_parse"},"num":47,"succs":[[1,12],[2,20],[30,3],[39],[6,11,9,7,5,8],[],[7],[],[10],[],[],[1,0,2,3],[16],[14],[],[14,13],[17,14,18],[14],[19],[],[23],[22],[],[24,25,22],[22],[26,28,27],[],[],[29],[],[33],[21,13],[31],[35,31,34],[31],[21,36,37,13],[],[38],[],[42,41,40],[],[32,44,43],[45,46,15],[],[],[],[]],"nodeAttribute":["Return Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Unary Expr ! ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr list1 ","Simple Name list1 ","Name Expr list1 ","Variable Declarator List list1 = ","Class Or Interface Type List ","String Literal Expr Not Empty  ","Class Or Interface Type ArrayList ","Variable Declaration Expr ","Name Expr iter ","Char Literal Expr '\\n' ","Variable Declarator JsonIterator iter = ","Expression Stmt ","Method Call Expr ","Class Or Interface Type TypeVariable ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name list2 ","Name Expr list2 ","Variable Declarator List list2 = ","Class Or Interface Type List ","Method Call Expr ","Simple Name mode ","Object Creation Expr TypeLiteral<List<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name identityHashCode ","Name Expr System ","Simple Name identityHashCode "]}
{"Version":"0.9.22","MethodName":"TestExisting_test_reuse_linked_list","callMethodNameReferTo":{"25":"JsonIterator.java_JsonIterator_outer_parse"},"num":47,"succs":[[1,12],[2,20],[3,30],[39],[6,7,5,8,9,11],[],[7],[],[10],[],[],[1,2,0,3],[16],[14],[],[13,14],[18,14,17],[14],[19],[],[23],[22],[],[25,22,24],[22],[28,26,27],[],[],[29],[],[33],[13,21],[31],[35,31,34],[31],[37,13,36,21],[],[38],[],[40,41,42],[],[43,32,44],[45,15,46],[],[],[],[]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_reuse_linked_list ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr list1 ","Simple Name list1 ","Name Expr list1 ","Variable Declarator LinkedList list1 = ","Expression Stmt ","Object Creation Expr LinkedList Optional.empty Optional.empty ","Class Or Interface Type LinkedList ","Variable Declaration Expr ","Name Expr iter ","Simple Name ctor ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name list2 ","Name Expr list2 ","Variable Declarator List list2 = ","Class Or Interface Type List ","Expression Stmt ","Name Expr tail ","Object Creation Expr TypeLiteral<LinkedList<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Name Expr System ","Simple Name identityHashCode ","Name Expr System ","Simple Name identityHashCode "]}
{"Version":"0.9.22","MethodName":"TestExisting_test_reuse_map","callMethodNameReferTo":{"18":"JsonIterator.java_JsonIterator_outer_parse"},"num":54,"succs":[[1,13],[2,29],[37,3],[41,4],[48],[8,6,10,9,12,7],[],[8],[],[11],[],[],[2,3,1,4,0],[16],[15],[],[15,17,18],[15],[19,21,20],[],[],[25,23,24,22],[26],[],[27],[28],[],[],[],[33],[31],[],[30,31],[35,34,31],[31],[36],[],[30,40,39,38],[],[26],[26],[44],[14,32],[42],[46,42,45],[42],[14,32,47],[],[49,50,51],[],[26],[53,43,52],[],[26]],"nodeAttribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_reuse_map ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonProperty ","Method Call Expr ","Name Expr JsonIterator ","Name Expr clazz ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr '\\'' ","Char Literal Expr '\"' ","StringLiteralExpr","'\\''","'\"'","Variable Declaration Expr ","Name Expr map1 ","Simple Name map1 ","Name Expr map1 ","Variable Declarator HashMap<String, Object> map1 = ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name put ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name map2 ","Name Expr map2 ","Variable Declarator HashMap<String, Object> map2 = ","Class Or Interface Type HashMap ","Method Call Expr ","Simple Name read ","Expression Stmt ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Class Or Interface Type JsonException ","Simple Name get ","String Literal Expr Not Empty  "]}
