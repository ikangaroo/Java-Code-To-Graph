{"fileName":"src/main/java/com/jsoniter/fuzzy/MaybeStringShortDecoder.java","version":"0.9.23","hasMethodName":["decodeShort-MaybeStringShortDecoder-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/fuzzy/MaybeStringShortDecoder.java","version":"0.9.23","methodName":"decodeShort-MaybeStringShortDecoder-JsonIterator","callMethodNameReferTo":{"39":"src/main/java/com/jsoniter/CodegenAccess.java-nextToken-CodegenAccess-JsonIterator","60":"src/main/java/com/jsoniter/CodegenAccess.java-nextToken-CodegenAccess-JsonIterator","45":"src/main/java/com/jsoniter/CodegenAccess.java-unreadByte-CodegenAccess-JsonIterator"},"num":73,"succs":[[1,29],[2,41],[3,42,43,5,32],[45,4],[11,49,5,48],[51,6],[7,58],[62,8],[35,10,9,63,42],[10,64],[11,53,48],[12,18,20,15,17,14,16,13],[],[],[15],[],[22,28],[19],[],[],[10,7,1,0,5,6],[22],[],[21,22],[22,23],[24,22],[25,22],[22,26],[],[37],[21,31],[],[30],[30,26,34,32],[],[33],[35,33,8],[30,38,39],[30],[21,31,40],[],[3,4],[],[44],[],[47,23,46],[],[],[],[24,50],[],[54],[25],[52],[55,52,56],[52],[57,25],[],[59,33,60],[],[26,34,61],[],[9],[44],[27,67,65,66],[],[68],[71,70,69],[],[68],[],[72,36],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Name Expr JsoniterSpi ","Method Declaration Throws ","Name Expr nextToken ","PUBLIC","Primitive Type short ","Simple Name decodeShort ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Name Expr iter ","Simple Name args ","Name Expr iter ","Name Expr size ","Name Expr iter ","Simple Name lang ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name c ","Name Expr CodegenAccess ","Name Expr c ","Name Expr c ","Binary Expr EQUALS ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ''' ","'''","Method Call Expr ","Name Expr CodegenAccess ","Simple Name unreadByte ","ReturnStmt","Method Call Expr ","Simple Name readShort ","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator short val = ","Primitive Type short ","Simple Name addNewMapEncoder ","Simple Name readShort ","Return Stmt ","ASSIGN","Method Call Expr ","Simple Name nextToken ","Block Stmt ","Char Literal Expr ''' ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Primitive Type char "]}
