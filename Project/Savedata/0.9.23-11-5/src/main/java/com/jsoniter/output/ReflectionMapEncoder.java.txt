{"fileName":"src/main/java/com/jsoniter/output/ReflectionMapEncoder.java","version":"0.9.23","hasMethodName":["encode-ReflectionMapEncoder-Object-JsonStream","writeEntry-ReflectionMapEncoder-JsonStream-boolean-Map.Entry<Object,Object>","wrap-ReflectionMapEncoder-Object"]}
{"fileName":"src/main/java/com/jsoniter/output/ReflectionMapEncoder.java","version":"0.9.23","methodName":"encode-ReflectionMapEncoder-Object-JsonStream","callMethodNameReferTo":{},"num":174,"succs":[[1,42],[43,4,2,44,30],[3,46],[4,19,48],[5,49],[59,6],[7,71],[10,72,73,8],[9,75],[10,19,48],[85,11],[12,87],[98,13],[14,106],[15,114],[18,16,115,63],[116,17],[14,119],[122],[23,25,27,20,24,26,22,29,21],[],[],[23],[],[31,40],[41,34],[28],[],[],[10,14,12,5,4,11,18,6,13,0],[31],[],[31,30],[34],[],[34,33],[34,35],[34,36,110],[34,37,110],[34,38],[],[],[3,2],[],[45],[],[33,47],[],[],[52],[32],[50],[54,53,50],[50],[32,55],[56,57,58],[],[],[],[65],[51],[60],[60,61],[60,64,62],[60,63],[60,67,66],[60],[69,68],[70,51],[],[],[8,9],[74,61],[],[],[76,78,77,35],[],[79,80],[82,83],[],[81],[],[],[84],[],[36,86],[],[94],[89],[],[89,111,88],[93,89,38,92],[90,89,111,91],[112,101],[96,95,89],[89],[97],[],[102],[62],[112,99],[93,64,99,100],[104,99,103],[99],[105,62],[],[107,88,108],[],[90,113,37,100,109],[],[],[],[],[138,134,133,139,26,136,140,135,137],[16,17],[],[107,117,101],[64,118],[],[107,120,91],[93,113,121,38,92],[],[39,123],[],[125,127,156],[111,127,126],[130,157],[128,129],[159,129],[130,161],[131,164],[169,132],[113,146,48],[],[135],[],[110,149],[150,111],[112,151],[],[130,124,131,132],[110],[110,141],[110,142],[143,110],[125,111],[145],[112],[112,147],[],[],[152,155,154,153],[],[],[],[],[126],[158,141],[],[160,142],[],[107,162,145],[163],[],[143,165,167,166],[],[147,168],[],[],[170,171,144,172],[],[],[173,148],[]],"attribute":["If Stmt ","Method Call Expr ","Binary Expr EQUALS ","Return Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","While Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Marker Annotation Expr @Override ","PUBLIC","Void Type ","Class Or Interface Type String ","Parameter Object obj ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr obj ","Simple Name obj ","Name Expr obj ","Name Expr stream ","Simple Name stream ","Name Expr stream ","Simple Name append ","Name Expr stream ","Name Expr stream ","Simple Name append ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Block Stmt ","EQUALS","Name Expr iter ","NullLiteralExpr","Name Expr JdkDatetimeSupport ","Simple Name toBoolean ","ReturnStmt","Variable Declaration Expr ","Name Expr len ","Name Expr map ","Variable Declarator Map<Object, Object> map = ","Expression Stmt ","Cast Expr ","Class Or Interface Type Map ","Simple Name Map ","Class Or Interface Type Object ","Class Or Interface Type Object ","Variable Declaration Expr ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type java ","Name Expr iter ","Variable Declarator Iterator<Map.Entry<Object, Object>> iter = ","Variable Declaration Expr ","Method Call Expr ","Method Call Expr ","Simple Name iterator ","Simple Name entrySet ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Simple Name hasNext ","Binary Expr NOT_EQUALS ","Simple Name write ","Cast Expr ","Cast Expr ","Primitive Type byte ","Char Literal Expr '{' ","'{'","Primitive Type byte ","Char Literal Expr '}' ","'}'","Method Call Expr ","Class Or Interface Type String ","Variable Declaration Expr ","Name Expr notFirst ","Name Expr IterImpl ","Name Expr notFirst ","Binary Expr EQUALS ","Name Expr notFirst ","Name Expr entry ","Variable Declarator boolean notFirst = ","Primitive Type boolean ","Boolean Literal Expr false ","false","Variable Declaration Expr ","Name Expr param ","Name Expr entry ","Name Expr entry ","Variable Declarator Map.Entry<Object, Object> entry = ","Method Call Expr ","Method Call Expr ","Simple Name next ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name writeEntry ","Simple Name stream ","Simple Name notFirst ","Simple Name entry ","Method Declaration Throws ","Block Stmt ","Simple Name hasNext ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name next ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name writeEntry ","Class Or Interface Type HashMap ","Simple Name writeObjectEnd ","If Stmt ","Name Expr notFirst ","Expression Stmt ","Block Stmt ","Expression Stmt ","Name Expr JsonIteratorPool ","Expression Stmt ","Expression Stmt ","Return Stmt ","PRIVATE","Name Expr _score_ ","Simple Name writeEntry ","Parameter JsonStream stream ","Parameter boolean notFirst ","Parameter Map.Entry<Object, Object> entry ","Class Or Interface Type IOException ","Block Stmt ","Simple Name append ","Name Expr stream ","Simple Name append ","Class Or Interface Type Object ","Name Expr notFirst ","Name Expr notFirst ","Name Expr entry ","Name Expr entry ","Class Or Interface Type JsonStream ","Primitive Type boolean ","Class Or Interface Type Entry ","Class Or Interface Type Map ","Simple Name Entry ","Class Or Interface Type Object ","Class Or Interface Type Object ","Block Stmt ","Method Call Expr ","Simple Name writeMore ","Method Call Expr ","Simple Name writeIndention ","Method Call Expr ","Boolean Literal Expr true ","true","Method Call Expr ","Simple Name writeObjectField ","Method Call Expr ","Name Expr mapKeyEncoder ","Simple Name getKey ","Method Call Expr ","Simple Name writeVal ","Name Expr valueTypeLiteral ","Method Call Expr ","Simple Name getValue "]}
{"fileName":"src/main/java/com/jsoniter/output/ReflectionMapEncoder.java","version":"0.9.23","methodName":"writeEntry-ReflectionMapEncoder-JsonStream-boolean-Map.Entry<Object,Object>","callMethodNameReferTo":{},"num":58,"succs":[[1,3,38],[25,3,2],[6,39],[4,5],[41,5],[6,43],[7,47],[52,8],[9,27,57],[15,11,10,17,16,13,19,12,14],[],[12],[],[21,31],[32,25],[29,33],[18],[],[],[6,0,7,8],[21],[],[20,21],[21,22],[23,21],[],[1,25],[26],[29],[],[29,28],[],[],[34,37,36,35],[],[],[],[],[2],[40,20],[],[42,22],[],[44,45,26],[],[46],[],[23,50,48,49],[],[28,51],[],[],[53,54,24,55],[],[],[56,30],[],[]],"attribute":["If Stmt ","Name Expr notFirst ","Expression Stmt ","Block Stmt ","Expression Stmt ","Name Expr JsonIteratorPool ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Name Expr _score_ ","Simple Name writeEntry ","Parameter JsonStream stream ","Parameter boolean notFirst ","Parameter Map.Entry<Object, Object> entry ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Simple Name append ","Simple Name stream ","Name Expr stream ","Simple Name append ","Class Or Interface Type Object ","Simple Name notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr entry ","Simple Name entry ","Name Expr entry ","Class Or Interface Type JsonStream ","Primitive Type boolean ","Class Or Interface Type Entry ","Class Or Interface Type Map ","Simple Name Entry ","Class Or Interface Type Object ","Class Or Interface Type Object ","Block Stmt ","Method Call Expr ","Simple Name writeMore ","Method Call Expr ","Simple Name writeIndention ","Method Call Expr ","ASSIGN","Boolean Literal Expr true ","true","Method Call Expr ","Simple Name writeObjectField ","Method Call Expr ","Name Expr mapKeyEncoder ","Simple Name getKey ","Method Call Expr ","Simple Name writeVal ","Name Expr valueTypeLiteral ","Method Call Expr ","Simple Name getValue ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/output/ReflectionMapEncoder.java","version":"0.9.23","methodName":"wrap-ReflectionMapEncoder-Object","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":26,"succs":[[12,1],[2,23,22],[6,7,5,8,3,4],[],[],[6],[],[11,10],[0,1],[10],[],[],[15],[9],[13,10],[17,13,16],[13],[9,18],[21,19,20],[],[],[],[],[2,14,24,25],[],[]],"attribute":["Expression Stmt ","Return Stmt ","Method Declaration ","Marker Annotation Expr @Override ","PUBLIC","Primitive Type int ","Simple Name wrap ","Parameter Object obj ","Block Stmt ","Name Expr obj ","Simple Name obj ","Class Or Interface Type Object ","Variable Declaration Expr ","Simple Name map ","Name Expr map ","Variable Declarator Map<String, Object> map = ","Class Or Interface Type Map ","Cast Expr ","Class Or Interface Type Map ","Simple Name Map ","Class Or Interface Type String ","Class Or Interface Type Object ","ReturnStmt","Method Call Expr ","Name Expr Any ","Simple Name wrap "]}
