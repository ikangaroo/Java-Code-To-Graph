{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","hasMethodName":["genObject-CodegenImplObject-ClassInfo","hasFieldOutput-CodegenImplObject-ClassDescriptor","genField-CodegenImplObject-CodegenResult-Binding-String-int","appendComma-CodegenImplObject-CodegenResult-int","supportCollectionValueNullable-CodegenImplObject-Class"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","methodName":"genObject-CodegenImplObject-ClassInfo","callMethodNameReferTo":{"576":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","259":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","196":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","262":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","71":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","199":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","583":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","265":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","202":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","268":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","524":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","653":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","527":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","211":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","659":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","596":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","214":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","663":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","408":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","153":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","217":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean","604":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","157":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","669":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","544":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","672":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","227":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","293":"src/main/java/com/jsoniter/spi/ClassDescriptor.java-encodeTos-ClassDescriptor-","678":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","553":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","682":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","236":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","111":"src/main/java/com/jsoniter/spi/ClassDescriptor.java-getEncodingClassDescriptor-ClassDescriptor-ClassInfo-boolean","563":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","247":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","567":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","120":"src/main/java/com/jsoniter/spi/ClassDescriptor.java-encodeTos-ClassDescriptor-","569":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","122":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","186":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String","508":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","572":"src/main/java/com/jsoniter/output/CodegenResult.java-buffer-CodegenResult-char","254":"src/main/java/com/jsoniter/output/CodegenResult.java-append-CodegenResult-String"},"num":713,"succs":[[1,62],[2,75],[104,3],[116,4],[5,122],[6,133,47],[136,7,47,107,134],[8,137],[152,11,9],[11,63,10],[13,153],[12],[157,13],[160,14,15],[17,15,117],[16,161],[14,163],[18,176,19],[19,183,108,35],[20,178],[21,184,32],[177,185,22,32],[23,186],[196,24],[199,25],[202,26],[27,205],[211,28],[214,29],[30,217],[227,31],[230,18],[33,34],[34,233],[18,236],[38,246,36],[38,63,9,37],[49,247],[39],[42,40,251],[252,42,69,147,41],[254,49],[45,43,257],[45,69,148,44,258],[259,49],[46],[262,49],[48],[265,49],[268,50],[51,99,271],[55,56,53,57,54,52],[53],[],[55],[],[61,59],[2,5,50,1,4,49,0,3],[59],[],[58,59],[],[65],[64,36],[],[66,63,67],[63],[69,70,68],[71,72],[],[74],[64,73],[],[],[],[100],[77],[],[77,76],[77,76,78],[79,169,77],[77,80],[77,81],[77,82],[83,77],[77,208,84],[77,85],[86,77],[77,87],[88,77],[89,77],[77,208,80],[77,91,90],[77,92],[77,92],[77,92],[93,77,92,95,94],[77,76,96],[77,97],[77,98],[77,102,101],[77],[103],[],[109],[58],[105],[135,106,108,105],[6,105,107],[110,105,111],[105],[58,112,114,113],[],[],[115],[],[118],[14,106],[119,120,117],[117],[106,121],[],[123,76,124],[],[128,125,127,126],[],[],[129],[131,130],[],[60,132],[],[],[8,17,13,7,35],[],[],[277,280,276,53,278,279],[149],[139,142,140,141,80],[161],[139,161],[142,172],[],[144,85,138],[209,138],[143,91,146,138],[209,138],[145],[147,40,145],[142,150,151],[142],[74],[10],[154,155,78],[],[156],[],[79,159,158],[],[129],[16],[162],[161],[165,164,138],[],[168,141,166,173,167,80],[],[139,170,174],[140,171,175],[],[],[],[],[353,358,352,276,354,53,355,357,356],[],[],[20],[178],[182],[177,21,178],[21,178,179],[177,21,178,180],[178],[],[27,30,25,26,22,24,31,23,28,29],[],[188,81,187],[],[189,192,190,191],[],[],[129],[193,194],[195,179],[],[],[198,82,197],[],[129],[83,200,201],[],[129],[203,204,84],[],[129],[143,164,206],[207,144,210,85],[],[],[],[628,276,631,53,630,632,629],[86,213,212],[],[129],[87,215,216],[],[129],[219,88,220,218,221,222],[],[],[129],[224,223],[226],[225,180],[],[],[],[89,228,229],[],[129],[90,232,231],[],[129],[164,234,145],[210,91,146,235],[],[92,238,237],[],[239,240,242,241],[],[],[129],[244,243],[245,181],[],[],[37],[93,249,248],[],[250],[],[41],[253],[],[256,255,94],[],[129],[44],[253],[260,261,95],[],[129],[264,263,96],[],[129],[267,266,97],[],[129],[269,98,270],[],[129],[],[273,284],[274,286,275,285],[136,275,290,271],[291,136,271],[53],[278],[],[135,283],[272,275],[135],[281,135],[],[274],[287,288],[],[281,289],[],[],[226],[286,292],[293,294],[282,295],[],[],[297,400],[298,411],[299,419],[427,300],[435,301],[302,442],[306,303,451],[454,452,304,453,306],[457,305],[309,462],[307,308],[470,308],[475,309],[484,310],[286,312,311,485],[312,489],[313,491],[314,501],[511,315],[286,316,512,317],[514,317],[318,330,516],[518,453,330,319,517],[520,320],[69,321,389,323,521],[322,522],[524,323],[527,324],[540,325],[543,328,326],[327,328,401],[544,340],[329],[340,553],[340,331,332],[559,332],[562,338,333],[338,334,326,401],[335,563],[567,336],[569,337],[340,572],[339],[340,576],[582,341],[342,493,494,343],[583,343],[346,344,589],[590,69,346,345,422],[348,591],[347],[348,596],[602,349],[603,351,350,495,504],[351,604],[173,395,271],[353],[],[169,396],[397,170],[171,398],[399,172],[298,312,299,351,300,296,302,309,314,301,317,297,313,348,343],[169],[359,169],[169,208,360],[361,169],[361,169,362],[169,208],[169,364],[169,365],[169,366],[169,367],[169,368,364],[169,363,369],[169,370],[169,371,370],[169,372],[170],[374,170],[375,170],[376,303,170],[377,303,170],[376,303,170],[379,378,303,170],[380,170],[384,383,381,170],[318,170,382],[170,382],[171],[171,385],[171],[171,387,386],[172],[172,389,320],[361,390,392],[390,209],[394,391,172,364],[172,209],[393],[],[],[],[],[403],[402],[],[404,401,405],[401],[69,406,407],[409,408],[74],[410,402],[],[],[415],[374],[412],[413,412],[416,417,412],[412],[418,374],[],[423],[413,421],[],[420],[424,420,425],[420],[426,413,421],[],[431],[375],[428,430],[429],[428,432,433],[428],[434,375],[],[437],[377,437],[441],[379,436,437],[438,487],[438,439],[437],[444],[378,444],[450],[443,380,444],[445],[446,445],[447,445],[448,447,445],[444],[304,305],[376,455],[],[456],[],[],[164,436,458],[459,460],[461,377],[],[],[164,443,463],[466,465,464],[129],[],[468,467],[378,469],[],[],[438,164,471],[473,472],[379,474],[],[],[476,164,445],[477,478,465],[480,465,479],[129],[129],[482,481],[483,380],[],[],[311],[439,488,486],[],[],[276,692,693,53,691,694],[164,429,490],[226],[496],[440],[492],[493,341],[493,341],[492,498,497],[492],[499,286],[440,500],[],[505],[503],[],[502],[502,506,507],[502],[508,509],[503,510],[],[],[316],[513,381],[],[164,493,515],[115],[325,319,323,324],[519,382],[456],[],[321,322],[74],[164,390,523],[253],[359,525,526],[],[129],[529,528,360],[],[530,465,531],[532,533,465],[129],[129],[535,534,536,446],[],[],[537,538],[539,383],[],[],[164,391,541],[361,210,392,542],[],[327],[545,546,362],[],[547,548,549],[],[],[551,550,465],[552,385,465],[129],[129],[555,554,363],[],[557,556,558,386],[],[],[129],[164,560,393],[394,210,364,561],[],[335,334,337,336],[565,564,365],[],[566],[],[366,568,387],[],[571,570,367],[],[566],[574,573,368],[],[575],[],[578,577,369],[],[580,388,581,579],[],[],[129],[342],[585,370,584],[],[588,447,586,587],[],[],[129],[345],[456],[448,593,594,371,494,592,430],[],[],[595,384],[],[598,372,597],[],[599,600,601,414,449],[],[],[129],[350],[],[606,373,605],[],[129],[608,644],[615,609,656],[615,69,657,610,638],[613,658,611],[645,613,612],[627,659],[614],[627,663],[616,666,622],[639,69,622,617,667],[620,618,668],[645,620,619],[627,669],[621],[627,672],[623,624],[624,675],[677,625],[627,647,286,626],[627,678],[641,210,271],[629],[],[642,208],[209,643],[627,608,607],[208],[633,208],[208],[208,635],[634,208,636],[209],[609,209,638],[639,609,616,209,638],[640],[],[],[648],[646],[],[645,618,611],[645,649,650],[645],[651,69,652],[654,653],[74],[646,655],[],[],[610],[253],[612],[633,660,661],[],[662],[],[634,664,665],[],[129],[617],[253],[619],[670,671,635],[],[129],[674,636,673],[],[129],[164,676,640],[253],[626],[637,679,680],[],[129],[699,682],[684,683,695,700],[684,701,488,271],[702,685],[696,704,687,703,686],[687,271,488,706],[707,688],[708,690,697,709,689],[690,271,488,711],[712,488,271],[692],[],[698,487],[690,684,687,681],[487],[695,487],[696,487],[],[683],[],[226],[686],[705],[],[],[226],[689],[710],[],[],[226],[115]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","For Each Stmt ","Name Expr encodeTos ","Variable Declaration Expr ","Expression Stmt ","For Each Stmt ","Field Access Expr ","Variable Declaration Expr ","If Stmt ","Variable Declarator Any any = ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr annotations ","Expression Stmt ","Block Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type CodegenResult ","Simple Name genObject ","Parameter ClassInfo classInfo ","Block Stmt ","Name Expr classInfo ","Simple Name classInfo ","Name Expr classInfo ","Class Or Interface Type ClassInfo ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Name Expr ctx ","Simple Name ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr val ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Variable Declarator CodegenResult ctx = ","Class Or Interface Type CodegenResult ","Object Creation Expr CodegenResult Optional.empty Optional.empty ","Class Or Interface Type CodegenResult ","Variable Declaration Expr ","Simple Name desc ","Name Expr desc ","Boolean Literal Expr true ","Name Expr desc ","Variable Declarator ClassDescriptor desc = ","Class Or Interface Type ClassDescriptor ","Method Call Expr ","Name Expr ClassDescriptor ","Simple Name getEncodingClassDescriptor ","Boolean Literal Expr false ","false","Variable Declaration Expr ","Simple Name encodeTos ","Variable Declarator List<EncodeTo> encodeTos = ","Class Or Interface Type List ","Method Call Expr ","Simple Name encodeTos ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Field Access Expr ","Simple Name getCanonicalName ","Simple Name clazz ","Block Stmt ","Simple Name hasFieldOutput ","Simple Name desc ","Method Declaration ","Variable Declaration Expr ","Simple Name jsoniter ","Name Expr encodeTo ","Name Expr encodeTo ","Name Expr notFirst ","Simple Name notFirst ","Name Expr notFirst ","Name Expr notFirst ","Simple Name jsoniter ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Variable Declarator int notFirst = ","Primitive Type int ","Integer Literal Expr Zero  ","Block Stmt ","Method Call Expr ","Class Or Interface Type String ","Char Literal Expr '{' ","'{'","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Simple Name encodeTo ","Simple Name jsoniter ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name genField ","Field Access Expr ","Field Access Expr ","String Literal Expr Not Empty  ","Simple Name binding ","Simple Name toName ","Simple Name notFirst ","Method Declaration ","Simple Name binding ","Simple Name toName ","Block Stmt ","Class Or Interface Type ArrayList ","Simple Name unwrapper ","Name Expr unwrapper ","Name Expr unwrapper ","Name Expr unwrapper ","Class Or Interface Type UnwrapperDescriptor ","Simple Name unwrappers ","Block Stmt ","Simple Name isMap ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Simple Name getName ","Simple Name method ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name reportError ","Simple Name ctx ","Simple Name notFirst ","Method Declaration ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name encode ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","String Literal Expr Not Empty  ","Method Call Expr ","Boolean Literal Expr true ","Field Access Expr ","Simple Name getType ","Simple Name mapValueTypeLiteral ","true","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Name Expr compTypeDecoder ","Simple Name length ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name newInstance ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Simple Name getName ","Simple Name method ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr '}' ","'}'","Block Stmt ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name charAt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name buffer ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt","If Stmt ","Unary Expr ! ","Field Access Expr ","Return Stmt ","PRIVATE","Primitive Type boolean ","Simple Name hasFieldOutput ","Parameter ClassDescriptor desc ","Block Stmt ","Name Expr desc ","Name Expr desc ","Class Or Interface Type ClassDescriptor ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Field Access Expr ","Simple Name isEmpty ","Simple Name unwrappers ","Name Expr iter ","Unary Expr ! ","Method Call Expr ","Method Call Expr ","Simple Name isEmpty ","Simple Name encodeTos ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Unary Expr ! ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Unary Expr ! ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Method Declaration ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Name Expr nullable ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr OR ","Expression Stmt ","Assign Expr ASSIGN ","Primitive Type int ","Simple Name genField ","Parameter CodegenResult ctx ","Parameter Binding binding ","Parameter String toName ","Parameter int notFirst ","Block Stmt ","Simple Name idx ","Name Expr ctx ","Name Expr ctx ","Name Expr val ","Name Expr len ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Simple Name element ","Name Expr binding ","Name Expr binding ","Name Expr toName ","Name Expr toName ","Simple Name result ","Name Expr toName ","Name Expr notFirst ","Name Expr notFirst ","Name Expr cacheKey ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Class Or Interface Type CodegenResult ","Class Or Interface Type Binding ","Class Or Interface Type String ","Primitive Type int ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Variable Declaration Expr ","Simple Name fieldCacheKey ","Name Expr fieldCacheKey ","Name Expr fieldCacheKey ","Variable Declarator String fieldCacheKey = ","Simple Name append ","Method Call Expr ","Simple Name encoderCacheKey ","Variable Declaration Expr ","Simple Name encoder ","Name Expr JsoniterSpi ","Name Expr encoder ","Variable Declarator Encoder encoder = ","Class Or Interface Type Encoder ","Method Call Expr ","Simple Name getEncoder ","Variable Declaration Expr ","Simple Name isCollectionValueNullable ","Name Expr isCollectionValueNullable ","Name Expr isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Field Access Expr ","Simple Name isCollectionValueNullable ","Variable Declaration Expr ","Name Expr valueClazz ","Simple Name valueClazz ","Name Expr valueClazz ","Name Expr valueClazz ","Parameter Object obj ","Class Or Interface Type Class ","Variable Declaration Expr ","Name Expr valueAccessor ","Simple Name valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Class Or Interface Type String ","Block Stmt ","Field Access Expr ","NOT_EQUALS","Null Literal Expr ","Simple Name field ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Field Access Expr ","Simple Name getType ","Simple Name field ","Assign Expr ASSIGN ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Method Call Expr ","Field Access Expr ","Simple Name getName ","Simple Name field ","Assign Expr ASSIGN ","Method Call Expr ","Field Access Expr ","Simple Name getReturnType ","Simple Name method ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Name Expr Double ","Method Call Expr ","Field Access Expr ","Simple Name getName ","Simple Name method ","Block Stmt ","Method Call Expr ","Simple Name supportCollectionValueNullable ","Simple Name clazz ","Method Declaration ","Assign Expr ASSIGN ","Name Expr head ","Variable Declaration Expr ","Simple Name nullable ","Name Expr nullable ","Name Expr nullable ","Binary Expr EQUALS ","Binary Expr EQUALS ","Primitive Type boolean ","Unary Expr ! ","Method Call Expr ","Simple Name isPrimitive ","Variable Declaration Expr ","Simple Name omitZero ","Name Expr JsoniterSpi ","Name Expr omitZero ","Variable Declarator boolean omitZero = ","Primitive Type boolean ","Method Call Expr ","Method Call Expr ","Simple Name omitDefaultValue ","Simple Name getCurrentConfig ","Block Stmt ","Field Access Expr ","Simple Name isNullable ","Assign Expr ASSIGN ","Boolean Literal Expr false ","Block Stmt ","Field Access Expr ","Null Literal Expr ","Simple Name defaultValueToOmit ","Block Stmt ","Integer Literal Expr Zero  ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr String ","Simple Name format ","Method Call Expr ","Field Access Expr ","Simple Name code ","Simple Name defaultValueToOmit ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name appendComma ","Block Stmt ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name length ","Simple Name format ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name appendComma ","Block Stmt ","Method Call Expr ","Simple Name mapped ","Char Literal Expr ''' ","'''","Method Call Expr ","Name Expr mapped ","Method Call Expr ","Name Expr result ","Simple Name put ","Method Call Expr ","Simple Name mapped ","Char Literal Expr ':' ","':'","Method Call Expr ","Name Expr result ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name mapped ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Null Literal Expr ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","Field Access Expr ","Simple Name valueType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name rewrap ","Name Expr result ","String Literal Expr Not Empty  ","Block Stmt ","OR","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Name Expr JsonIteratorPool ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Primitive Type int ","Simple Name appendComma ","Parameter CodegenResult ctx ","Parameter int notFirst ","Block Stmt ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Class Or Interface Type CodegenResult ","Primitive Type int ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr JsoniterSpi ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Block Stmt ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ',' ","','","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Return Stmt ","Primitive Type boolean ","Simple Name supportCollectionValueNullable ","Simple Name annotations ","Block Stmt ","Name Expr cache ","Name Expr clazz ","Name Expr clazz ","Class Or Interface Type Class ","Block Stmt ","Simple Name isArray ","Boolean Literal Expr true ","Block Stmt ","Class Expr Map.class ","Simple Name isAssignableFrom ","Class Or Interface Type Any ","Boolean Literal Expr true ","Block Stmt ","Class Expr Collection.class ","Simple Name isAssignableFrom ","Class Or Interface Type Collection ","Void Type ","Name Expr lines "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","methodName":"hasFieldOutput-CodegenImplObject-ClassDescriptor","callMethodNameReferTo":{},"num":29,"succs":[[1,15],[2,17,3,16],[4,3,22,21],[24,4,21],[7,10,5,6,8,9],[6],[],[8],[],[12,14],[0,3],[12],[],[11,12],[],[2],[18,19],[],[11,20],[],[],[],[23],[],[17,25],[26,27],[13,28],[],[]],"attribute":["If Stmt ","Unary Expr ! ","Field Access Expr ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Primitive Type boolean ","Simple Name hasFieldOutput ","Parameter ClassDescriptor desc ","Block Stmt ","Name Expr desc ","Simple Name desc ","Name Expr desc ","Class Or Interface Type ClassDescriptor ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Field Access Expr ","Simple Name isEmpty ","Simple Name unwrappers ","ReturnStmt","Name Expr iter ","true","Unary Expr ! ","Method Call Expr ","Method Call Expr ","Simple Name isEmpty ","Simple Name encodeTos "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","methodName":"genField-CodegenImplObject-CodegenResult-Binding-String-int","callMethodNameReferTo":{"225":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","120":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","408":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-","313":"src/main/java/com/jsoniter/output/CodegenImplNative.java-genWriteOp-CodegenImplNative-CodegenResult-String-Type-boolean-boolean","138":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getEncoder-JsoniterSpi-String","268":"src/main/java/com/jsoniter/output/CodegenResult.java-bufferToWriteOp-CodegenResult-String"},"num":436,"succs":[[1,111],[2,124],[3,132],[140,4],[148,5],[6,155],[10,164,7],[167,165,8,166,10],[170,9],[13,176],[11,12],[185,12],[190,13],[199,14],[201,16,15,200],[16,205],[17,208],[18,218],[228,19],[201,20,229,21],[231,21],[22,34,234],[236,166,34,23,235],[238,24],[118,25,99,27,239],[26,240],[243,27],[246,28],[259,29],[265,32,30],[31,32,112],[266,44],[33],[44,275],[44,35,36],[281,36],[284,42,37],[42,38,30,112],[39,285],[289,40],[291,41],[44,294],[43],[44,298],[304,45],[46,210,211,47],[305,47],[50,48,311],[312,118,50,49,135],[52,313],[51],[52,318],[324,53],[325,55,54,212,221],[55,326],[56,106,329],[60,65,59,57,61,58,62,63,64],[58],[],[60],[],[67,107],[83,108],[95,109],[110,100],[2,16,3,55,4,0,6,13,5,18,21,1,17,52,47],[67],[],[66,67],[67,262,68],[69,67],[69,67,70],[67,262],[67,72],[67,73],[67,74],[67,75],[67,76,72],[67,71,77],[67,78],[67,79,78],[67,80],[83],[],[82,83],[84,83],[85,7,83],[86,7,83],[85,7,83],[88,87,7,83],[89,83],[93,92,90,83],[22,83,91],[83,91],[95],[],[95,94],[95],[95,97,96],[100],[],[100,99,24],[69,101,103],[101,263],[105,102,100,72],[100,263],[104],[],[],[],[],[114],[113],[],[115,112,116],[112],[118,117,119],[121,120],[],[123],[122,113],[],[],[],[128],[82],[125],[126,125],[129,130,125],[125],[131,82],[],[136],[126,134],[],[133],[137,133,138],[133],[139,126,134],[],[144],[84],[141,143],[142],[141,145,146],[141],[147,84],[],[150],[86,150],[154],[88,149,150],[151,203],[151,152],[150],[157],[87,157],[163],[156,89,157],[158],[159,158],[160,158],[161,160,158],[157],[8,9],[85,168],[],[169],[],[],[171,149,172],[],[173,174],[175,86],[],[],[171,156,177],[180,179,178],[181],[],[183,182],[],[87,184],[],[],[151,171,186],[187,188],[88,189],[],[],[191,171,158],[192,193,179],[195,179,194],[181],[181],[197,196],[198,89],[],[],[15],[152,204,202],[],[],[],[57,341,58,342,340,343],[171,142,206],[207],[],[213],[153],[209],[210,45],[210,45],[209,215,214],[209],[216,201],[153,217],[],[222],[220],[],[219],[219,223,224],[219],[225,226],[220,227],[],[],[20],[230,90],[],[171,210,232],[233],[],[29,23,27,28],[237,91],[169],[],[25,26],[123],[171,101,241],[242],[],[244,66,245],[],[181],[248,247,68],[],[249,179,250],[251,252,179],[181],[181],[254,253,255,159],[],[],[256,257],[258,92],[],[],[171,102,260],[69,264,103,261],[],[],[],[383,57,386,58,385,387,384],[31],[267,268,70],[],[269,271,270],[],[],[273,272,179],[274,179,94],[181],[181],[276,277,71],[],[279,278,280,96],[],[],[181],[171,282,104],[105,264,72,283],[],[39,38,41,40],[287,286,73],[],[288],[],[74,290,97],[],[293,292,75],[],[288],[296,295,76],[],[297],[],[300,299,77],[],[302,98,303,301],[],[],[181],[46],[307,78,306],[],[310,160,308,309],[],[],[181],[49],[169],[315,161,316,79,211,143,314],[],[],[317,93],[],[320,80,319],[],[321,322,127,323,162],[],[],[181],[54],[],[328,81,327],[],[181],[],[348,331],[333,332,344,349],[333,350,204,329],[351,334],[345,353,336,352,335],[336,204,329,355],[356,337],[357,339,346,358,338],[339,204,329,360],[361,204,329],[341],[],[347,203],[336,339,333,330],[203],[344,203],[345,203],[],[332],[],[207],[335],[354],[],[],[207],[338],[359],[],[],[207],[233],[363,399],[370,364,411],[370,118,412,365,393],[368,413,366],[400,368,367],[382,414],[369],[382,418],[421,371,377],[394,118,372,422,377],[375,373,423],[400,375,374],[382,424],[376],[382,427],[378,379],[379,430],[432,380],[402,201,382,381],[382,433],[396,264,329],[384],[],[397,262],[263,398],[382,363,362],[262],[388,262],[262],[390,262],[389,262,391],[263],[364,263,393],[394,364,371,263,393],[395],[],[],[403],[401],[],[400,373,366],[400,404,405],[400],[406,118,407],[409,408],[123],[401,410],[],[],[365],[242],[367],[388,415,416],[],[417],[],[389,419,420],[],[181],[372],[242],[374],[425,426,390],[],[181],[429,391,428],[],[181],[171,431,395],[242],[381],[392,434,435],[],[181]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Unary Expr ! ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Unary Expr ! ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Method Declaration ","Binary Expr EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Name Expr nullable ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr OR ","Expression Stmt ","Assign Expr ASSIGN ","Method Declaration ","PRIVATE","STATIC","Primitive Type int ","Simple Name genField ","Parameter CodegenResult ctx ","Parameter Binding binding ","Parameter String toName ","Parameter int notFirst ","Block Stmt ","Simple Name idx ","String Literal Expr Not Empty  ","Name Expr ctx ","Name Expr ctx ","Name Expr val ","Name Expr len ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr ctx ","Name Expr ctx ","Name Expr out ","Name Expr binding ","Simple Name binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Name Expr binding ","Simple Name element ","Name Expr binding ","Name Expr binding ","Name Expr toName ","Simple Name toName ","Name Expr toName ","Simple Name result ","Name Expr toName ","Name Expr notFirst ","Simple Name notFirst ","Name Expr notFirst ","Name Expr cacheKey ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Class Or Interface Type CodegenResult ","Class Or Interface Type Binding ","Class Or Interface Type String ","Primitive Type int ","Variable Declaration Expr ","Simple Name noIndention ","Name Expr JsoniterSpi ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name fieldCacheKey ","Name Expr fieldCacheKey ","Name Expr fieldCacheKey ","Variable Declarator String fieldCacheKey = ","Simple Name append ","Method Call Expr ","Simple Name encoderCacheKey ","Variable Declaration Expr ","Simple Name encoder ","Name Expr JsoniterSpi ","Name Expr encoder ","Variable Declarator Encoder encoder = ","Class Or Interface Type Encoder ","Method Call Expr ","Simple Name getEncoder ","Variable Declaration Expr ","Simple Name isCollectionValueNullable ","Name Expr isCollectionValueNullable ","Name Expr isCollectionValueNullable ","Variable Declarator boolean isCollectionValueNullable = ","Primitive Type boolean ","Field Access Expr ","Simple Name isCollectionValueNullable ","Variable Declaration Expr ","Name Expr valueClazz ","Simple Name valueClazz ","Name Expr valueClazz ","Name Expr valueClazz ","Parameter Object obj ","Class Or Interface Type Class ","Variable Declaration Expr ","Name Expr valueAccessor ","Simple Name valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Name Expr valueAccessor ","Class Or Interface Type String ","Block Stmt ","Field Access Expr ","NOT_EQUALS","Null Literal Expr ","Simple Name field ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Field Access Expr ","Simple Name getType ","Simple Name field ","Assign Expr ASSIGN ","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS","Method Call Expr ","StringLiteralExpr","Field Access Expr ","Simple Name getName ","Simple Name field ","Assign Expr ASSIGN ","Method Call Expr ","Field Access Expr ","Simple Name getReturnType ","Simple Name method ","Assign Expr ASSIGN ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Name Expr Double ","Method Call Expr ","Field Access Expr ","Simple Name getName ","Simple Name method ","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Simple Name supportCollectionValueNullable ","Simple Name clazz ","Method Declaration ","Assign Expr ASSIGN ","Name Expr head ","true","Variable Declaration Expr ","Simple Name nullable ","Name Expr nullable ","Name Expr nullable ","Binary Expr EQUALS ","Binary Expr EQUALS ","Primitive Type boolean ","Unary Expr ! ","Method Call Expr ","Simple Name isPrimitive ","Variable Declaration Expr ","Simple Name omitZero ","Name Expr JsoniterSpi ","Name Expr omitZero ","Variable Declarator boolean omitZero = ","Primitive Type boolean ","Method Call Expr ","Method Call Expr ","Simple Name omitDefaultValue ","Simple Name getCurrentConfig ","Block Stmt ","Field Access Expr ","Simple Name isNullable ","Assign Expr ASSIGN ","Boolean Literal Expr false ","false","Block Stmt ","Field Access Expr ","Null Literal Expr ","Simple Name defaultValueToOmit ","Block Stmt ","Integer Literal Expr Zero  ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr String ","Simple Name format ","Method Call Expr ","Field Access Expr ","Simple Name code ","Simple Name defaultValueToOmit ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name appendComma ","Simple Name ctx ","Simple Name notFirst ","Method Declaration ","Block Stmt ","Method Call Expr ","Simple Name append ","Method Call Expr ","Name Expr CodegenResult ","Simple Name bufferToWriteOp ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name length ","Simple Name format ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name appendComma ","Block Stmt ","Method Call Expr ","Simple Name mapped ","Char Literal Expr ''' ","'''","Method Call Expr ","Name Expr mapped ","Method Call Expr ","Name Expr result ","Simple Name put ","Method Call Expr ","Simple Name mapped ","Char Literal Expr ':' ","':'","Method Call Expr ","Name Expr result ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Method Call Expr ","Simple Name mapped ","Method Call Expr ","Name Expr String ","Simple Name format ","String Literal Expr Not Empty  ","Block Stmt ","Null Literal Expr ","Method Call Expr ","Name Expr CodegenImplNative ","Simple Name genWriteOp ","Field Access Expr ","Simple Name valueType ","Method Call Expr ","Simple Name append ","Method Call Expr ","Simple Name rewrap ","Name Expr result ","String Literal Expr Not Empty  ","Block Stmt ","OR","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Return Stmt ","Primitive Type boolean ","Simple Name supportCollectionValueNullable ","Simple Name annotations ","Block Stmt ","Name Expr cache ","Name Expr clazz ","Name Expr clazz ","Class Or Interface Type Class ","Block Stmt ","Simple Name isArray ","Boolean Literal Expr true ","Block Stmt ","Class Expr Map.class ","Simple Name isAssignableFrom ","Class Or Interface Type Any ","Boolean Literal Expr true ","Block Stmt ","Class Expr Collection.class ","Simple Name isAssignableFrom ","Class Or Interface Type Collection ","Void Type ","Name Expr lines ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Name Expr JsonIteratorPool ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Primitive Type int ","Simple Name appendComma ","Parameter CodegenResult ctx ","Parameter int notFirst ","Block Stmt ","Name Expr ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Class Or Interface Type CodegenResult ","Primitive Type int ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr JsoniterSpi ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Block Stmt ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ',' ","','","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Block Stmt ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  "]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","methodName":"appendComma-CodegenImplObject-CodegenResult-int","callMethodNameReferTo":{"52":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-"},"num":86,"succs":[[1,42],[8,2,56],[8,50,57,3,35],[6,59,4],[43,6,5],[20,60],[7],[20,64],[9,68,15],[37,50,15,69,10],[13,11,70],[43,13,12],[20,71],[14],[20,74],[16,17],[17,77],[80,18],[20,45,81,19],[20,82],[39,21,85],[24,22,27,23,26,28,25],[23],[],[25],[],[40,30],[36,41],[20,1,0],[30],[],[29,30],[30],[30,32],[31,30,33],[36],[],[2,36,35],[37,2,9,36,35],[38],[],[],[46],[44],[],[43,11,4],[43,47,48],[43],[49,50,51],[53,52],[],[55],[44,54],[],[],[],[3],[58],[],[5],[29,61,62],[],[63],[],[31,65,66],[],[67],[],[10],[58],[12],[72,73,32],[],[67],[76,33,75],[],[67],[78,79,38],[],[58],[19],[],[34,83,84],[],[67],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Name Expr JsonIteratorPool ","Block Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","If Stmt ","Name Expr noIndention ","Expression Stmt ","Block Stmt ","Expression Stmt ","Block Stmt ","Binary Expr EQUALS ","If Stmt ","Unary Expr ! ","Expression Stmt ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Primitive Type int ","Simple Name appendComma ","Parameter CodegenResult ctx ","Parameter int notFirst ","Block Stmt ","Name Expr ctx ","Simple Name ctx ","Primitive Type int ","Name Expr ctx ","Name Expr ctx ","Name Expr ctx ","Name Expr notFirst ","Simple Name notFirst ","Name Expr notFirst ","Name Expr notFirst ","Name Expr notFirst ","Class Or Interface Type CodegenResult ","Primitive Type int ","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr JsoniterSpi ","Name Expr noIndention ","Variable Declarator boolean noIndention = ","Primitive Type boolean ","Binary Expr EQUALS ","Method Call Expr ","EQUALS","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name indentionStep ","Simple Name getCurrentConfig ","Zero IntegerLiteralExpr","Block Stmt ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","Method Call Expr ","Simple Name buffer ","Char Literal Expr ',' ","','","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Integer Literal Expr Note Zero  ","Block Stmt ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","ASSIGN","Integer Literal Expr Note Zero  ","Block Stmt ","LOGICAL_COMPLEMENT","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/output/CodegenImplObject.java","version":"0.9.23","methodName":"supportCollectionValueNullable-CodegenImplObject-Class","callMethodNameReferTo":{},"num":39,"succs":[[22,1],[3,2,17,23],[3,25,24,10],[27,4],[19,6,29,28,5],[6,24,10,31],[32,7],[33,20,9,34,8],[9,10,24,36],[37,10,24],[11,14,12,15,13,16],[12],[],[14],[],[21,18],[3,6,9,0],[18],[],[17,18],[19,18],[],[2],[],[],[26],[],[5],[30],[],[],[26],[8],[35],[],[],[26],[38],[]],"attribute":["If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","If Stmt ","Method Call Expr ","Return Stmt ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Primitive Type boolean ","Simple Name supportCollectionValueNullable ","Simple Name annotations ","Block Stmt ","Name Expr cache ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Class Or Interface Type Class ","Block Stmt ","Simple Name isArray ","ReturnStmt","Boolean Literal Expr true ","true","Block Stmt ","Class Expr Map.class ","Simple Name isAssignableFrom ","Class Or Interface Type Any ","Boolean Literal Expr true ","Block Stmt ","Class Expr Collection.class ","Simple Name isAssignableFrom ","Class Or Interface Type Collection ","Void Type ","Name Expr lines ","false"]}
