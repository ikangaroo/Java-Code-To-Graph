{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","hasMethodName":["test_int_list-TestGenerics-","test_string_list-TestGenerics-","test_linked_list-TestGenerics-","test_string_set-TestGenerics-","test_string_map-TestGenerics-","test_integer_map-TestGenerics-","test_list_of_list-TestGenerics-","test_complex_object-TestGenerics-","getField6-TestGenerics.Class1-","getField7-TestGenerics.Class1-","setField8-TestGenerics.Class1-List<A>","test_generic_super_class-TestGenerics-","test_issue_103-TestGenerics-","test_wildcard-TestGenerics-"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_int_list-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":47,"succs":[[11,1],[21,2],[30],[5,10,6,7,8,4],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[16,13,15],[13],[17,18,19],[],[],[20],[],[24],[12],[22],[22,25,26],[22],[28,27,12],[],[29],[],[33,31,32],[],[36,35,34],[41,42,23],[],[],[38,37,39],[40],[40],[40],[],[],[44,43],[],[],[46],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name setInterfaces ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name tail ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","String Literal Expr Not Empty  ","Name Expr val ","Variable Declarator List<Integer> val = ","Class Or Interface Type List ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<ArrayList<Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertArrayEquals ","Array Creation Expr Integer Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Class Or Interface Type Integer ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Simple Name toArray ","Array Creation Expr Integer Array Creation Level Not Empty ","Class Or Interface Type Integer ","Array Creation Level Dimension NotEmpty ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_string_list-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":51,"succs":[[11,1],[2,27],[36],[10,7,6,5,8,4],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[16,15,13],[13],[17,18,19],[],[],[21,20,23,22],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,28,31],[28],[12,34,33],[],[35],[],[39,38,37],[],[42,40,41],[45,46,29],[],[],[43,44],[24],[24],[],[47,48],[],[],[50],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_string_list ","Throws","Simple Name STATIC_MODE ","IOException","Block Stmt ","Variable Declaration Expr ","Null Literal Expr ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator List<String> val = ","Return Stmt ","Method Call Expr ","Name Expr baos ","Object Creation Expr TypeLiteral<List<String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Expression Stmt ","Array Creation Expr String Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Simple Name field1 ","Array Creation Level Dimension Empty ","Array Initializer Expr ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name toArray ","Array Creation Expr String Array Creation Level Not Empty ","Class Or Interface Type String ","Char Literal Expr ''' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_linked_list-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":51,"succs":[[1,11],[27,2],[36],[6,8,5,10,7,4],[],[6],[],[9],[],[],[1,2,0],[14],[13],[],[16,15,13],[13],[19,17,18],[],[],[22,21,23,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,28,31],[28],[33,34,12],[],[35],[],[38,39,37],[],[41,42,40],[46,45,29],[],[],[43,44],[24],[24],[],[47,48],[],[],[50],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Assign Expr ASSIGN ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","String Literal Expr Not Empty  ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Name Expr Array ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Simple Name val ","Name Expr val ","Variable Declarator List<String> val = ","Name Expr JsonIterator ","Method Call Expr ","Primitive Type byte ","Object Creation Expr TypeLiteral<LinkedList<String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Return Stmt ","Array Creation Expr String Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Simple Name field1 ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Class Or Interface Type MyDate2 ","String Literal Expr Not Empty  ","Simple Name toArray ","Array Creation Expr String Array Creation Level Not Empty ","Class Or Interface Type String ","Array Creation Level Dimension NotEmpty ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_string_set-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":50,"succs":[[11,1],[2,27],[36],[8,5,6,10,7,4],[],[6],[],[9],[],[],[2,0,1],[14],[13],[],[16,15,13],[13],[17,18,19],[],[],[21,20,23,22],[24],[],[25],[26],[],[],[],[30],[12],[28],[31,28,32],[28],[33,12,34],[],[35],[],[37,38,39],[],[41,40,42],[45,29,44],[],[],[43],[24],[],[46,47],[],[],[49],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_string_set ","Throws","Method Call Expr ","IOException","Block Stmt ","Throw Stmt ","Name Expr iter ","Name Expr hash ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Variable Declarator Set<String> val = ","Method Call Expr ","Method Call Expr ","Name Expr iter ","Object Creation Expr TypeLiteral<Set<String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Class Or Interface Type EntryIterator ","Array Creation Expr String Array Creation Level Not Empty Array Initializer Expr ","Method Call Expr ","Name Expr stream ","Array Creation Level Dimension Empty ","Array Initializer Expr ","String Literal Expr Not Empty  ","Simple Name toArray ","Array Creation Expr String Array Creation Level Not Empty ","Class Or Interface Type String ","Array Creation Level Dimension NotEmpty ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_string_map-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":42,"succs":[[11,1],[27,2],[36],[8,5,7,6,10,4],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[13,15,16],[13],[18,19,17],[],[],[20,23,21,22],[24],[],[25],[26],[],[],[],[30],[12],[28],[31,28,32],[28],[12,33,34],[],[35],[],[38,37,39],[],[24],[40,41,29],[],[24]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Field Access Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Name Expr iter ","Char Literal Expr 'n' ","Variable Declarator JsonIterator iter = ","Expression Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Name Expr obj ","Name Expr val ","Variable Declarator Map<String, String> val = ","Class Or Interface Type Map ","Method Call Expr ","Name Expr iter ","Object Creation Expr TypeLiteral<Map<String, String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Expression Stmt ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name get ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_integer_map-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":46,"succs":[[1,11],[2,27],[36],[5,7,6,8,10,4],[],[6],[],[9],[],[],[2,0,1],[14],[13],[],[16,13,15],[13],[18,19,17],[],[],[22,23,21,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,31,28],[28],[12,34,33],[],[35],[],[39,37,38],[],[40,41,42],[29,45,44],[],[],[43],[],[],[24]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_integer_map ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Char Literal Expr 'r' ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator Map<String, Integer> val = ","Method Call Expr ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<Map<String, Integer>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Simple Name get ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_list_of_list-TestGenerics-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":43,"succs":[[1,11],[21,2],[30],[6,8,7,5,10,4],[],[6],[],[9],[],[],[1,0,2],[14],[13],[],[15,13,16],[13],[19,17,18],[],[],[20],[],[24],[12],[22],[26,25,22],[22],[27,28,12],[],[29],[],[31,33,32],[],[34,36,35],[38,39,40],[],[],[37],[],[42,23,41],[],[37],[],[37]],"attribute":["Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_list_of_list ","Throws","Class Or Interface Type Exception ","Exception","Block Stmt ","Expression Stmt ","Simple Name tail ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name listOfList ","Name Expr listOfList ","Variable Declarator List<List<Integer>> listOfList = ","Expression Stmt ","Method Call Expr ","Simple Name read ","Object Creation Expr TypeLiteral<List<List<Integer>>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Binary Expr PLUS ","Method Call Expr ","Simple Name binding ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name get ","Integer Literal Expr Note Zero  ","Simple Name get ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_complex_object-TestGenerics-","callMethodNameReferTo":{"17":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","34":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T"},"num":58,"succs":[[12,1],[28,2],[38,3],[44],[6,7,11,8,9,5],[],[7],[],[10],[],[],[0,3,2,1],[15],[14],[],[17,16,14],[14],[20,19,18],[],[],[21,23,22,24],[25],[],[26],[27],[],[],[],[32],[13],[29],[29,30],[29,34,33],[29],[36,13,35],[],[37],[],[39,41,40],[],[42],[43,30],[],[],[46,45,47],[],[49,50,48],[53,52,51],[],[],[42],[55,56,54],[],[42],[31,57],[],[42],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_complex_object ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Class Or Interface Type Long ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name val ","String Literal Expr Not Empty  ","Name Expr val ","Variable Declarator ComplexObject val = ","Class Or Interface Type ComplexObject ","Method Call Expr ","Simple Name read ","Class Expr ComplexObject.class ","Class Or Interface Type ComplexObject ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","IntegerLiteralExpr","Simple Name field1 ","Method Call Expr ","Return Stmt ","Method Call Expr ","Method Call Expr ","Name Expr Integer ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name get ","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name get ","Integer Literal Expr Note Zero  ","Simple Name field2 "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"getField6-TestGenerics.Class1-","callMethodNameReferTo":{},"num":16,"succs":[[3,4,2,1],[],[7,3,6],[],[5],[0,14,13],[],[9,8,10],[],[],[11,12],[],[],[],[15],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type List ","Simple Name getField6 ","Block Stmt ","Simple Name assertEquals ","Simple Name List ","Class Or Interface Type Map ","String Literal Expr Not Empty  ","Class Or Interface Type A ","Class Or Interface Type List ","Simple Name List ","Class Or Interface Type B ","ReturnStmt","Name Expr iter ","NullLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"getField7-TestGenerics.Class1-","callMethodNameReferTo":{},"num":10,"succs":[[4,3,2,1],[],[3],[],[5],[7,6,0],[],[8],[],[]],"attribute":["Method Declaration ","PUBLIC","Class Or Interface Type T ","Class Or Interface Type Exception ","Block Stmt ","Expression Stmt ","ReturnStmt","Name Expr iter ","NullLiteralExpr","Type Parameter T "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"setField8-TestGenerics.Class1-List<A>","callMethodNameReferTo":{},"num":10,"succs":[[3,4,5,2,1],[],[3],[],[7,6],[],[9,8],[],[],[]],"attribute":["Method Declaration ","PUBLIC","Void Type ","Simple Name setField8 ","Parameter List<A> a ","Block Stmt ","Class Or Interface Type List ","Simple Name a ","Simple Name List ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_generic_super_class-TestGenerics-","callMethodNameReferTo":{"3":"src/main/java/com/jsoniter/spi/ClassDescriptor.java-allDecoderBindings-ClassDescriptor-"},"num":157,"succs":[[1,26],[2,40],[3,56,4],[61,27,6,4],[5,58],[3,62],[70,8,7],[76,75,10,8],[72,9],[84,7],[11,92],[12,101],[13,109],[117,14],[15,125],[16,133],[17,141],[149],[25,21,22,23,20,19],[],[21],[],[24],[],[],[17,13,16,14,12,6,10,0,11,1,2,15],[29],[28],[],[31,28,30],[28],[33,35,34,32],[],[],[37,36],[39],[],[38],[],[],[52],[42],[],[41,42],[42,43],[44,42],[42,45],[46,42],[47,42],[48,42],[49,42],[50,42],[53,54,42],[42],[55],[],[5],[58],[60],[57,58],[58],[],[41,65,64,63],[],[66,57],[67,68],[],[59,69],[],[],[9],[72],[74],[72,71],[72],[80,79,77,78],[],[],[],[81,82],[39],[],[83],[],[85,87,43,86],[],[71,88],[89,90],[],[91,73],[],[],[93,94],[],[96,97,95],[44,98,99],[],[100],[],[100],[],[103,102],[],[106,104,105],[107,108,45],[],[100],[],[100],[110,111],[],[112,114,113],[46,115,116],[],[100],[],[100],[119,118],[],[122,121,120],[124,123,47],[],[100],[],[100],[127,126],[],[129,128,130],[131,132,48],[],[100],[],[100],[134,135],[],[137,136,138],[49,140,139],[],[100],[],[100],[142,143],[],[146,145,144],[50,147,148],[],[100],[],[100],[150,151],[],[153,152,154],[156,51,155],[],[100],[],[100]],"attribute":["Expression Stmt ","Expression Stmt ","If Stmt ","Method Call Expr ","Variable Declaration Expr ","Expression Stmt ","For Each Stmt ","Field Access Expr ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_generic_super_class ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr desc ","Simple Name desc ","Variable Declarator ClassDescriptor desc = ","Expression Stmt ","Method Call Expr ","Name Expr ClassDescriptor ","Simple Name getDecodingClassDescriptor ","Object Creation Expr ClassInfo Optional.empty Optional.empty ","Boolean Literal Expr true ","Class Or Interface Type ClassInfo ","Class Expr Class3.class ","Class Or Interface Type Class3 ","true","Method Call Expr ","Name Expr fieldDecoderCacheKeys ","Simple Name fieldDecoderCacheKeys ","Class Or Interface Type ParameterizedTypeImpl ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Name Expr fieldDecoderCacheKeys ","Variable Declarator Map<String, String> fieldDecoderCacheKeys = ","Class Or Interface Type Map ","Object Creation Expr HashMap<String, String> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Block Stmt ","Name Expr field ","Simple Name field ","Name Expr field ","Class Or Interface Type Binding ","Simple Name allDecoderBindings ","Method Call Expr ","Simple Name put ","Field Access Expr ","Method Call Expr ","Simple Name name ","Field Access Expr ","Simple Name getDecoderCacheKey ","Simple Name valueTypeLiteral ","Block Stmt ","Name Expr field ","Simple Name field ","Name Expr field ","Class Or Interface Type Binding ","Method Call Expr ","Simple Name getters ","Name Expr ClassDescriptor ","Simple Name getEncodingClassDescriptor ","Object Creation Expr ClassInfo Optional.empty Optional.empty ","Boolean Literal Expr true ","Class Or Interface Type ClassInfo ","Class Expr Class3.class ","Class Or Interface Type Class3 ","Method Call Expr ","Primitive Type int ","Field Access Expr ","Method Call Expr ","Simple Name name ","Field Access Expr ","Simple Name getDecoderCacheKey ","Simple Name valueTypeLiteral ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Name Expr buffered ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name endsWith ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Name Expr ctx ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Method Call Expr ","Simple Name endsWith ","String Literal Expr Not Empty  ","Name Expr idx ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_issue_103-TestGenerics-","callMethodNameReferTo":{},"num":39,"succs":[[8,1],[21,2],[31],[6,5,7,4],[],[6],[],[0,1,2],[11],[10],[],[13,10,12],[10],[14,15,17,16],[18],[],[19],[20],[],[],[],[24],[9],[22],[22,25,26],[22],[28,9,27,29],[],[],[30],[],[33,32,34],[],[35],[37,36],[],[23,38],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name fillCacheUntil ","Block Stmt ","Variable Declaration Expr ","Name Expr json ","Simple Name json ","Variable Declarator String json = ","Class Or Interface Type String ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name res ","Name Expr buf ","Variable Declarator NetRes res = ","Class Or Interface Type String ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Object Creation Expr TypeLiteral<NetRes<User>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Simple Name assertEquals ","Simple Name setDefault ","Method Call Expr ","Class Or Interface Type User ","Field Access Expr ","Simple Name getClass ","Simple Name results "]}
{"fileName":"src/test/java/com/jsoniter/TestGenerics.java","version":"0.9.23","methodName":"test_wildcard-TestGenerics-","callMethodNameReferTo":{"15":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":32,"succs":[[1,10],[22],[9,7,5,4,6,3],[],[5],[],[8],[],[],[0,1],[13],[12],[],[14,12,15],[12],[18,16,17,19],[],[],[20],[21],[],[],[25,24,23],[],[26],[27,28,29],[],[30,11],[],[31],[],[]],"attribute":["Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Void Type ","Name Expr CodegenAccess ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Variable Declarator TestObject7 obj = ","Class Or Interface Type TestObject7 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr BINARY_AND ","Class Expr TestObject7.class ","StringLiteralExpr","Class Or Interface Type TestObject7 ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readSlice ","Simple Name get ","Integer Literal Expr Zero  ","Primitive Type float ","Zero IntegerLiteralExpr"]}
