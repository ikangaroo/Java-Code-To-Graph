{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","hasMethodName":["test_size-TestList-","test_to_boolean-TestList-","test_to_int-TestList-","test_get-TestList-","test_get_from_nested-TestList-","test_iterator-TestList-","test_to_string-TestList-","test_for_each-TestList-"]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_size-TestList-","callMethodNameReferTo":{"25":"src/main/java/com/jsoniter/any/Any.java-size-Any-","13":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":27,"succs":[[1,7],[22],[5,6,4,3],[],[5],[],[1,0],[11],[9],[],[8],[8,12,13],[8],[16,15,14],[],[],[9,18,17,19,20],[],[21],[21],[21],[],[23,24,25],[],[21],[26,10],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Method Declaration ","PUBLIC","Primitive Type long ","Simple Name test_size ","Block Stmt ","Expression Stmt ","Simple Name any ","Name Expr stream ","Name Expr any ","Variable Declarator Any any = ","Name Expr ctx ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name asList ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name size "]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_to_boolean-TestList-","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","40":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","25":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","29":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":42,"succs":[[9,1],[2,23],[27,3],[38],[6,8,5,7],[],[7],[],[2,1,0,3],[16],[11],[],[10],[12,10,14],[],[13],[18,17,10],[10],[21,20,19],[],[],[22,11],[],[25,24],[],[12,26],[],[28,13,29],[],[30,32,31],[],[],[33,34,14,35],[],[36],[37],[],[],[39,40],[],[15,41],[]],"attribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Method Call Expr ","Block Stmt ","Variable Declaration Expr ","Name Expr str ","Name Expr Collections ","Name Expr any ","Name Expr any ","Class Or Interface Type Object ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name emptyList ","Method Call Expr ","Method Call Expr ","Method Call Expr ","Simple Name writeNull ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr Any ","Void Type ","Method Call Expr ","Name Expr stream ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Field Access Expr ","Method Call Expr ","Simple Name toBoolean "]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_to_int-TestList-","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","26":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","43":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","31":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":45,"succs":[[1,9],[23,2],[29,3],[40],[8,7,6,5],[],[7],[],[1,0,3,2],[16],[11],[],[10],[12,14,10],[],[13],[17,18,10],[10],[21,19,20],[],[],[22,11],[],[26,25,24],[],[27],[28,12],[],[],[31,30,13],[],[33,34,32],[],[],[36,37,35,14],[],[38],[39],[],[],[43,42,41],[],[39],[15,44],[]],"attribute":["Method Call Expr ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_to_int ","Block Stmt ","Variable Declaration Expr ","Simple Name len ","Name Expr Collections ","Name Expr any ","Name Expr any ","Name Expr Base64 ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Simple Name get ","Simple Name lang ","Method Call Expr ","Simple Name emptyList ","Method Call Expr ","Return Stmt ","Class Or Interface Type T ","Method Call Expr ","Zero IntegerLiteralExpr","Simple Name toInt ","Method Call Expr ","ASSIGN","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name asList ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Assign Expr ASSIGN ","Expression Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Binary Expr PLUS "]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_get-TestList-","callMethodNameReferTo":{"25":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","26":"src/main/java/com/jsoniter/any/Any.java-get-Any-int","13":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":31,"succs":[[1,7],[22],[6,4,5,3],[],[5],[],[1,0],[11],[9],[],[8],[13,8,12],[8],[14,15,16],[],[],[19,18,9,17],[],[20],[21],[],[],[25,24,23],[],[20],[27,26],[29,28,10],[],[],[30],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Name Expr IterImpl ","Block Stmt ","Variable Declaration Expr ","Simple Name any ","Name Expr Arrays ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Simple Name set ","Simple Name code ","Method Call Expr ","Simple Name asList ","String Literal Expr Not Empty  ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Name Expr JsonIterator ","Simple Name setMode ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_get_from_nested-TestList-","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","17":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","33":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","42":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","43":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int"},"num":49,"succs":[[8,1],[29,2],[39],[7,5,6,4],[],[6],[],[0,2,1],[15],[12,11,10],[],[],[],[9],[13,9],[9,16,17],[9],[18,20,19],[],[],[22,23,10,21],[],[11,24,25],[12,28,27],[],[26],[],[],[26],[31,30,32],[],[26],[34,33],[37,13,36,35],[],[],[38],[38],[],[41,42,40],[],[26],[43,44],[47,46,45,14],[],[],[48],[38],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_get_from_nested ","Block Stmt ","Variable Declaration Expr ","Simple Name any ","Name Expr Arrays ","Name Expr Collections ","Name Expr Collections ","Name Expr any ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name asList ","Method Call Expr ","Method Call Expr ","Simple Name singletonList ","String Literal Expr Not Empty  ","StringLiteralExpr","Simple Name singletonList ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","Integer Literal Expr Zero  ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name get ","Char Literal Expr '*' ","Integer Literal Expr Zero  ","'*'"]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_iterator-TestList-","callMethodNameReferTo":{"17":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","40":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-"},"num":50,"succs":[[1,12],[2,26],[3,34,4],[6,4,13],[5,36],[3,38],[42],[9,11,10,8],[],[10],[],[1,2,0,6],[15],[14],[],[17,16,13],[13],[18,19,20],[],[],[21,22,24,14,23],[],[25],[25],[25],[],[30],[28],[],[27,28],[31,32,28],[28],[33],[],[5],[36],[37],[36],[27,39,40],[],[41,35],[],[43,44,29],[],[47,46,45,49,48],[],[],[25],[25],[25]],"attribute":["Expression Stmt ","Expression Stmt ","If Stmt ","Simple Name obj ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_iterator ","Block Stmt ","Variable Declaration Expr ","Simple Name any ","Name Expr Arrays ","Expression Stmt ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name asList ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Name Expr list ","Simple Name list ","Name Expr list ","Variable Declarator ArrayList<Integer> list = ","Method Call Expr ","Object Creation Expr ArrayList<Integer> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Block Stmt ","String Literal Expr Not Empty  ","Simple Name toFloat ","Class Or Interface Type Any ","Method Call Expr ","Char Literal Expr 'n' ","Method Call Expr ","Simple Name toInt ","Method Call Expr ","Return Stmt ","Method Call Expr ","Simple Name length ","Simple Name create ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_to_string-TestList-","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","51":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","43":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","12":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","14":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":53,"succs":[[1,9],[2,25],[40,3],[48],[6,8,5,7],[],[7],[],[2,1,3,0],[11,12,10],[],[13],[15,14],[],[18,16,17],[],[],[],[19,23,21,20,22],[],[],[24],[24],[24],[],[30],[27],[],[26],[28,26],[31,32,26],[26],[35,34,33],[],[],[37,39,36,38,27],[],[24],[24],[24],[43,41,42],[28,44],[],[45,47,46],[],[],[],[24],[51,49,50],[],[13],[29,52],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_to_string ","Block Stmt ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","StringLiteralExpr","Method Call Expr ","Simple Name toString ","Class Or Interface Type com ","Name Expr iter ","Method Call Expr ","Name Expr Arrays ","Simple Name asList ","Integer Literal Expr Note Zero  ","Name Expr j ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Expression Stmt ","Name Expr ctx ","Name Expr Arrays ","Primitive Type int ","Name Expr val ","Variable Declarator Any any = ","Name Expr buf ","Method Call Expr ","Name Expr arr ","Simple Name wrap ","Method Call Expr ","Class Or Interface Type Object ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr ''' ","Method Call Expr ","Name Expr stream ","Name Expr Any ","Simple Name wrap ","Integer Literal Expr Note Zero  ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/any/TestList.java","version":"0.9.23","methodName":"test_for_each-TestList-","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/any/Any.java-iterator-Any-","14":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String"},"num":29,"succs":[[8,1],[18,2],[25],[7,5,6,4],[],[6],[],[0,2,1],[12],[10],[],[9],[9,14,13],[9],[15,10,16],[],[17],[],[21],[11],[19],[19,23,22],[19],[11,24],[],[27,26],[],[28,20],[]],"attribute":["Expression Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Primitive Type long ","Simple Name test_for_each ","Block Stmt ","Variable Declaration Expr ","Simple Name a ","Name Expr JsonIterator ","Integer Literal Expr Zero  ","Variable Declarator Any a = ","Primitive Type int ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","This Expr ","Class Or Interface Type Byte ","Variable Declarator Iterator<Any> iter = ","Class Or Interface Type Iterator ","Method Call Expr ","Simple Name iterator ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name hasNext "]}
