{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","hasMethodName":["test_skip_number-TestSkip-","test_skip_string-TestSkip-","test_skip_string_streaming-TestSkip-","test_skip_object-TestSkip-","test_skip_array-TestSkip-","test_skip_nested-TestSkip-"]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_number-TestSkip-","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","41":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","30":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-"},"num":48,"succs":[[14,1],[2,28],[32,3],[34,4],[38,5],[44],[9,13,10,11,8,7],[],[9],[],[12],[],[],[2,1,4,5,0,3],[21],[16],[],[15,16],[17,16],[18,16],[19,16],[22,23,16],[16],[26,24,25],[],[],[27],[],[30,29],[],[31,15],[],[33,17],[],[35,36],[],[18,37],[],[40,41,39],[],[42],[43,19],[],[],[45,46],[],[47,20],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Simple Name assertEquals ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_skip_number ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Primitive Type long ","Name Expr iter ","Name Expr iter ","Name Expr size ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Name Expr jsonStream ","Method Call Expr ","Simple Name readArray ","Simple Name assertFalse ","Simple Name hash ","Expression Stmt ","Name Expr jsonStream ","Method Call Expr ","Simple Name readShort ","Expression Stmt ","Class Or Interface Type JsonIterator ","Name Expr e ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Expression Stmt ","Name Expr JsoniterSpi ","Simple Name addNewMapEncoder ","Simple Name readShort "]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_string-TestSkip-","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","52":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","9":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","42":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","47":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-"},"num":54,"succs":[[1,14],[34,2],[3,38],[40,4],[44,5],[50],[8,13,10,11,9,7],[],[9],[],[12],[],[],[3,0,1,5,4,2],[21],[16],[],[16,15],[16,17],[16,18],[16,19],[16,22,23],[16],[26,24,25],[],[],[28,30,27,29],[31],[],[32],[33],[],[],[],[35,36],[],[37,15],[],[39,17],[],[42,41],[],[18,43],[],[46,45,47],[],[48],[49,19],[],[],[51,52],[],[53,20],[]],"attribute":["Expression Stmt ","Assign Expr ASSIGN ","Simple Name assertEquals ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Method Call Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Name Expr JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Name Expr JsonStream ","Method Call Expr ","Cast Expr ","Name Expr existingObj ","Simple Name skip ","Expression Stmt ","Name Expr JsonStream ","Method Call Expr ","Simple Name getLength ","Expression Stmt ","Return Stmt ","Class Or Interface Type T ","Method Call Expr ","IntegerLiteralExpr","Simple Name encoder ","Variable Declaration Expr ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name readArray "]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_string_streaming-TestSkip-","callMethodNameReferTo":{"103":"src/main/java/com/jsoniter/JsonIterator.java-skip-JsonIterator-","56":"src/main/java/com/jsoniter/JsonIterator.java-skip-JsonIterator-","120":"src/main/java/com/jsoniter/JsonIterator.java-skip-JsonIterator-","91":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","108":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-","125":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-"},"num":127,"succs":[[1,27],[5,4,2,54,55],[56,3],[5,58],[5,62,61],[6,63],[7,74],[76,8],[9,86],[10,88],[11,93],[12,103],[13,105],[14,110],[15,120],[122],[20,24,22,19,17,21,18],[],[],[20],[],[23],[],[],[9,13,1,11,0,15,7,6,14,5,10,8,12],[26],[],[41],[29],[],[28,29],[30],[31,30],[32],[32,33],[32,34],[35],[36,35],[35,37],[38],[38,39],[43,42,29],[29],[44,45,46,47],[],[],[49,48],[53],[],[51,50],[52],[],[],[],[2,3],[4,60],[57,28],[],[59],[],[],[],[],[64,65,30],[],[66,67,68,69],[],[],[71,70],[53],[],[73,72],[52],[],[75,31],[],[64,32,77],[81,80,79,78],[],[],[83,82],[53],[],[85,84],[52],[],[87,33],[],[89,90,91],[],[53],[92,34],[],[64,35,94],[97,95,98,96],[],[],[99,100],[53],[],[102,101],[52],[],[104,36],[],[106,108,107],[],[53],[37,109],[],[111,64,38],[112,113,115,114],[],[],[117,116],[53],[],[119,118],[52],[],[39,121],[],[125,123,124],[],[53],[126,40],[]],"attribute":["Expression Stmt ","If Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Expression Stmt ","Simple Name assertEquals ","Expression Stmt ","Simple Name assertEquals ","Expression Stmt ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Expression Stmt ","Simple Name assertEquals ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_skip_string_streaming ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Variable Declaration Expr ","Simple Name fail ","String Literal Expr Not Empty  ","Primitive Type byte ","Class Or Interface Type java ","Name Expr desc ","Primitive Type byte ","Name Expr iter ","This Expr ","Name Expr list ","Name Expr ctor ","Class Or Interface Type List ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Name Expr Array ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","StringLiteralExpr","IntegerLiteralExpr","Block Stmt ","Catch Clause ","Method Call Expr ","Simple Name skip ","Name Expr stream ","Name Expr type ","Block Stmt ","Class Or Interface Type JsonException ","Name Expr e ","Variable Declaration Expr ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","Method Call Expr ","Simple Name lang ","Method Call Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","Name Expr JsoniterSpi ","Simple Name skip ","Method Call Expr ","Class Or Interface Type JsonIterator ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name writeTo ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","Method Call Expr ","Simple Name skip ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readInt ","Assign Expr ASSIGN ","Method Call Expr ","Field Access Expr ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","Method Call Expr ","Simple Name skip ","Method Call Expr ","Return Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name readInt "]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_object-TestSkip-","callMethodNameReferTo":{"52":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","42":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","47":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-"},"num":54,"succs":[[14,1],[2,34],[38,3],[40,4],[5,44],[50],[8,9,11,13,10,7],[],[9],[],[12],[],[],[2,0,5,1,3,4],[21],[16],[],[16,15],[16,17],[16,18],[19,16],[16,23,22],[16],[26,24,25],[],[],[30,29,28,27],[31],[],[32],[33],[],[],[],[35,36],[],[15,37],[],[17,39],[],[41,42],[],[18,43],[],[47,45,46],[],[48],[19,49],[],[],[52,51],[],[53,20],[]],"attribute":["Expression Stmt ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Return Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_skip_object ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Char Literal Expr 'n' ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Expression Stmt ","Method Call Expr ","Class Or Interface Type TypeVariable ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertNull ","Field Access Expr ","Simple Name readArray ","Name Expr JsoniterSpi ","Simple Name skip ","Method Call Expr ","Name Expr jsonStream ","Method Call Expr ","Simple Name readArray ","Expression Stmt ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name valueOf ","Assign Expr ASSIGN ","Unary Expr ++ ","Method Call Expr ","Simple Name readArray "]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_array-TestSkip-","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","52":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","42":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","47":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-"},"num":54,"succs":[[1,14],[34,2],[3,38],[4,40],[44,5],[50],[8,13,10,11,9,7],[],[9],[],[12],[],[],[3,2,0,4,1,5],[21],[16],[],[15,16],[17,16],[18,16],[19,16],[22,23,16],[16],[25,24,26],[],[],[29,30,28,27],[31],[],[32],[33],[],[],[],[35,36],[],[37,15],[],[39,17],[],[42,41],[],[43,18],[],[46,45,47],[],[48],[49,19],[],[],[51,52],[],[53,20],[]],"attribute":["Expression Stmt ","Method Call Expr ","Simple Name assertEquals ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Variable Declarator boolean escaped = ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Null Literal Expr ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Name Expr jsonStream ","Method Call Expr ","Simple Name readArray ","Class Or Interface Type TestObject3 ","Simple Name skip ","Return Stmt ","Name Expr jsonStream ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Class Or Interface Type JsonProperty ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Method Call Expr ","Simple Name assertFalse ","Method Call Expr ","Simple Name readArray "]}
{"fileName":"src/test/java/com/jsoniter/TestSkip.java","version":"0.9.23","methodName":"test_skip_nested-TestSkip-","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","52":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","42":"src/main/java/com/jsoniter/JsonIterator.java-readArray-JsonIterator-","47":"src/main/java/com/jsoniter/JsonIterator.java-readInt-JsonIterator-"},"num":54,"succs":[[1,14],[34,2],[3,38],[40,4],[5,44],[50],[13,11,10,9,8,7],[],[9],[],[12],[],[],[3,1,5,0,2,4],[21],[16],[],[15,16],[16,17],[18,16],[19,16],[23,16,22],[16],[26,24,25],[],[],[28,30,29,27],[31],[],[32],[33],[],[],[],[36,35],[],[37,15],[],[39,17],[],[42,41],[],[18,43],[],[47,46,45],[],[48],[19,49],[],[],[51,52],[],[20,53],[]],"attribute":["Expression Stmt ","Expression Stmt ","Array Access Expr count++ ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_skip_nested ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Boolean Literal Expr true ","Null Literal Expr ","Class Or Interface Type Gson ","Name Expr iter ","Expression Stmt ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Simple Name assertNull ","Method Call Expr ","Simple Name readArray ","Simple Name assertFalse ","Simple Name gson ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Array Access Expr count++ ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Simple Name readInt ","Method Call Expr ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name readArray "]}
