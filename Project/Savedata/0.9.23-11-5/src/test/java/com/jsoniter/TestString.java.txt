{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","hasMethodName":["test_ascii_string-TestString-","test_ascii_string_with_escape-TestString-","test_utf8_string-TestString-","test_incomplete_escape-TestString-","test_surrogate-TestString-","test_larger_than_buffer-TestString-","test_string_across_buffer-TestString-","test_utf8-TestString-","test_normal_escape-TestString-","test_unicode_escape-TestString-","test_null_string-TestString-","test_incomplete_string-TestString-","test_invalid_string-TestString-","test_long_string-TestString-","test_long_string_in_streaming-TestString-"]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_ascii_string-TestString-","callMethodNameReferTo":{"65":"src/main/java/com/jsoniter/JsonIterator.java-readStringAsSlice-JsonIterator-","37":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","23":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","42":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","58":"src/main/java/com/jsoniter/JsonIterator.java-readStringAsSlice-JsonIterator-","46":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":68,"succs":[[1,14],[34,2],[39,3],[4,44],[54,5],[61],[13,11,10,9,7,8],[],[9],[],[12],[],[],[4,1,3,2,5,0],[21],[16],[],[16,15],[16,17],[18],[18,19],[16,23,22],[16],[26,24,25],[],[],[29,28,27,30],[31],[],[32],[33],[],[],[],[36,37,35],[],[31],[15,38],[],[42,40,41],[],[31],[17,43],[],[18,45,46],[],[47,49,48],[],[],[50,53,52,51],[31],[],[32],[33],[57,55,56],[],[31],[58,59],[19,60],[],[],[63,62,64],[],[31],[66,65],[20,67],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_ascii_string ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr user ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertEquals ","Simple Name isArray ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString ","Variable Declaration Expr ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name clazz ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Return Stmt ","Class Or Interface Type Binding ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name readStringAsSlice ","Method Call Expr ","Name Expr JsonIterator ","Simple Name setMode ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name readStringAsSlice "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_ascii_string_with_escape-TestString-","callMethodNameReferTo":{"29":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":31,"succs":[[1,10],[26],[7,9,5,6,4,3],[],[5],[],[8],[],[],[1,0],[13],[12],[],[15,12,14],[12],[17,18,16],[],[],[20,22,19,21],[23],[],[24],[25],[],[],[],[28,29,27],[],[23],[30,11],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_ascii_string_with_escape ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_utf8_string-TestString-","callMethodNameReferTo":{"29":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":31,"succs":[[10,1],[26],[9,4,6,7,5,3],[],[5],[],[8],[],[],[1,0],[13],[12],[],[15,14,12],[12],[18,16,17],[],[],[21,20,22,19],[23],[],[24],[25],[],[],[],[27,29,28],[],[23],[11,30],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_utf8_string ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name wrap ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name toInt ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getName ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_incomplete_escape-TestString-","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","25":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-"},"num":32,"succs":[[13,1],[4,24,23,2],[3,25],[27],[30,31],[10,7,8,9,12,6],[],[8],[],[11],[],[],[0,1],[16],[15],[],[18,15,17],[15],[20,21,19],[],[],[22],[],[3,2],[4,29],[14,26],[],[28],[],[],[],[]],"attribute":["Method Call Expr ","Try Stmt ","Method Call Expr ","Name Expr decoder ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Binary Expr NOT_EQUALS ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Name Expr copy ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Simple Name create ","StringLiteralExpr","Block Stmt ","Catch Clause ","Method Call Expr ","Simple Name readString ","Class Or Interface Type Object ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_surrogate-TestString-","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":25,"succs":[[1,10],[20],[9,4,5,6,7,3],[],[5],[],[8],[],[],[0,1],[13],[12],[],[14,15,12],[12],[16,18,17],[],[],[19],[],[22,23,21],[],[19],[24,11],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Primitive Type long ","Simple Name test_surrogate ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Char Literal Expr 't' ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Name Expr field ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_larger_than_buffer-TestString-","callMethodNameReferTo":{"29":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":31,"succs":[[10,1],[26],[4,5,6,9,3,7],[],[5],[],[8],[],[],[1,0],[13],[12],[],[12,14,15],[12],[17,18,16],[],[],[21,20,22,19],[23],[],[24],[25],[],[],[],[29,28,27],[],[23],[11,30],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_larger_than_buffer ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr anyEncoder "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_string_across_buffer-TestString-","callMethodNameReferTo":{"51":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","72":"src/main/java/com/jsoniter/JsonIterator.java-readStringAsSlice-JsonIterator-","79":"src/main/java/com/jsoniter/JsonIterator.java-readStringAsSlice-JsonIterator-"},"num":82,"succs":[[1,17],[2,43],[3,48],[53,4],[5,68],[75],[12,7,9,11,14,10,8],[],[],[10],[],[13],[],[],[1,5,2,3,4,0],[16],[],[24],[19],[],[19,18],[19,20],[21],[21,22],[26,25,19],[19],[29,30,28,27],[],[],[32,31],[42],[],[33,34],[38,37,35,36],[],[39],[],[40],[41],[],[],[],[],[46,45,44],[],[39],[47,18],[],[51,50,49],[],[39],[52,20],[],[55,54,21],[],[58,56,57,59],[],[],[60,61],[42],[],[62,63],[65,66,67,64],[],[39],[],[40],[41],[69,70,71],[],[39],[73,72],[22,74],[],[],[78,77,76],[],[39],[79,80],[23,81],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @org.junit.experimental.categories.Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_string_across_buffer ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Variable Declaration Expr ","Name Expr iter ","Null Literal Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Method Call Expr ","Simple Name getBytes ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","IntegerLiteralExpr","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Parameter JsonIterator iter ","Class Or Interface Type Annotation ","Expression Stmt ","Class Or Interface Type JsonIterator ","Binary Expr MINUS ","Method Call Expr ","Name Expr extensions ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Method Call Expr ","Simple Name getBytes ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name readStringAsSlice ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Method Call Expr ","Simple Name toString ","Simple Name readStringAsSlice "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_utf8-TestString-","callMethodNameReferTo":{"56":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-"},"num":59,"succs":[[1,14],[2,42],[53],[6,7,9,4,11,8,5],[],[],[7],[],[10],[],[],[1,2,0],[13],[],[17],[16],[],[18,19,16],[16],[21,23,26,24,25,22,20,27],[28],[29,30],[33,32],[34,35],[37,36],[38,39],[40,41],[28],[],[],[31],[],[],[31],[],[31],[],[31],[],[31],[],[31],[45],[15],[43],[46,43,47],[43],[50,49,51,48],[],[],[15,52],[31],[],[54,55,56],[],[57],[44,58],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @org.junit.experimental.categories.Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_utf8 ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Variable Declaration Expr ","Name Expr bytes ","Name Expr lines ","Variable Declarator byte[] bytes = ","Name Expr stream ","Array Initializer Expr ","Char Literal Expr ''' ","Cast Expr ","Cast Expr ","Class Or Interface Type IOException ","Cast Expr ","Cast Expr ","Cast Expr ","Char Literal Expr ''' ","'''","Primitive Type byte ","Null Literal Expr ","IntegerLiteralExpr","Primitive Type byte ","Integer Literal Expr Note Zero  ","Primitive Type byte ","Integer Literal Expr Note Zero  ","Primitive Type byte ","Integer Literal Expr Note Zero  ","Primitive Type byte ","Integer Literal Expr Note Zero  ","Primitive Type byte ","Integer Literal Expr Note Zero  ","Variable Declaration Expr ","Class Or Interface Type Long ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_normal_escape-TestString-","callMethodNameReferTo":{"46":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-"},"num":49,"succs":[[14,1],[2,31],[43],[11,6,7,8,9,5,4],[],[],[7],[],[10],[],[],[2,0,1],[13],[],[17],[16],[],[18,16,19],[16],[21,22,20,23],[24],[26,25],[29,28],[24],[],[],[27],[],[],[30],[],[34],[15],[32],[36,35,32],[32],[38,37,39,40],[],[],[15,41],[42],[],[],[44,46,45],[],[47],[33,48],[],[]],"attribute":["Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @org.junit.experimental.categories.Category(StreamingCategory.class) ","PUBLIC","Primitive Type long ","Simple Name test_normal_escape ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Return Stmt ","Name Expr bytes ","Simple Name bytes ","Variable Declarator byte[] bytes = ","Class Or Interface Type String ","Array Initializer Expr ","Char Literal Expr ''' ","Cast Expr ","Cast Expr ","Char Literal Expr ''' ","'''","Primitive Type byte ","Name Expr iter ","''","Primitive Type byte ","Char Literal Expr 't' ","'t'","Variable Declaration Expr ","Simple Name iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","IntegerLiteralExpr","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name iter ","Method Call Expr ","StringLiteralExpr","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_unicode_escape-TestString-","callMethodNameReferTo":{"62":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-"},"num":65,"succs":[[1,14],[2,47],[59],[11,7,6,4,8,9,5],[],[],[7],[],[10],[],[],[2,0,1],[13],[],[17],[16],[],[16,18,19],[16],[22,24,23,26,27,25,21,20],[28],[30,29],[32,33],[35,36],[39,38],[41,42],[44,45],[28],[],[],[31],[],[],[34],[],[],[37],[],[],[40],[],[],[43],[],[],[46],[],[50],[15],[48],[51,52,48],[48],[56,55,54,53],[],[],[57,15],[58],[],[],[61,60,62],[],[63],[64,49],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration Throws ","Single Member Annotation Expr @org.junit.experimental.categories.Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_unicode_escape ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Variable Declaration Expr ","Name Expr bytes ","Name Expr lines ","Variable Declarator byte[] bytes = ","Simple Name append ","Array Initializer Expr ","Unary Expr -- ","Cast Expr ","Cast Expr ","Cast Expr ","Cast Expr ","Cast Expr ","Cast Expr ","Char Literal Expr ''' ","'''","Primitive Type byte ","Char Literal Expr '' ","''","Primitive Type byte ","Char Literal Expr 'u' ","'u'","Primitive Type byte ","Char Literal Expr '4' ","'4'","Primitive Type byte ","Char Literal Expr 'e' ","'e'","Primitive Type byte ","Char Literal Expr '2' ","'2'","Primitive Type byte ","Char Literal Expr 'd' ","'d'","Variable Declaration Expr ","Null Literal Expr ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","IntegerLiteralExpr","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Simple Name readDouble "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_null_string-TestString-","callMethodNameReferTo":{"29":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":32,"succs":[[10,1],[26],[7,9,6,4,5,3],[],[5],[],[8],[],[],[0,1],[13],[12],[],[15,14,12],[12],[18,17,16],[],[],[20,22,21,19],[23],[],[24],[25],[],[],[],[28,29,27],[],[30],[31,11],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_null_string ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Field Access Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertEquals ","Null Literal Expr ","Method Call Expr ","NullLiteralExpr","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_incomplete_string-TestString-","callMethodNameReferTo":{"14":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":26,"succs":[[13,3,1,12],[2,14],[21],[24,25],[11,9,7,8,6,5],[],[7],[],[10],[],[],[0],[1,2],[3,23],[18,15,16,17],[],[],[19],[20],[],[],[22],[],[],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Unary Expr ++ ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_incomplete_string ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","Method Call Expr ","Return Stmt ","Parameter Exception e ","String Literal Expr Not Empty  ","Class Expr String.class ","StringLiteralExpr","Class Or Interface Type String ","Simple Name append ","Name Expr type ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_invalid_string-TestString-","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":47,"succs":[[1,15,2],[2,21,20,19],[3,17],[1,33,34,6,35,5,4],[1,36],[43,1,42],[1,46,45],[12,10,14,11,9,8],[],[10],[],[13],[],[],[0],[3],[17],[18],[17],[],[],[24,29,25,22,28,27,30,26,31,23],[32],[32],[32],[32],[32],[32],[32],[32],[32],[32],[],[4],[41,5],[44,6],[38,37,16,39],[],[],[40],[],[],[],[],[],[],[]],"attribute":["For Each Stmt ","Array Creation Expr String Array Creation Level Not Empty Array Initializer Expr ","Variable Declaration Expr ","Try Stmt ","Expression Stmt ","Parameter JsonException e ","Parameter IndexOutOfBoundsException e ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_invalid_string ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Name Expr str ","Simple Name str ","Class Or Interface Type String ","Class Or Interface Type String ","Array Creation Level Dimension Empty ","Array Initializer Expr ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Expression Stmt ","String Literal Expr Not Empty  ","StringLiteralExpr","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Class Expr String.class ","Name Expr mapped ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Class Or Interface Type IndexOutOfBoundsException ","Name Expr i "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_long_string-TestString-","callMethodNameReferTo":{"23":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-","15":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":25,"succs":[[1,10],[20],[5,4,6,7,9,3],[],[5],[],[8],[],[],[1,0],[13],[12],[],[14,15,12],[12],[18,17,16],[],[],[19],[],[23,21,22],[],[19],[11,24],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Field Access Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString "]}
{"fileName":"src/test/java/com/jsoniter/TestString.java","version":"0.9.23","methodName":"test_long_string_in_streaming-TestString-","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/JsonIterator.java-readString-JsonIterator-"},"num":34,"succs":[[1,13],[29],[10,3,6,8,5,7,4],[],[],[6],[],[9],[],[],[1,0],[12],[],[16],[15],[],[17,15,18],[15],[20,21,22,19],[],[],[24,23],[28],[],[26,25],[27],[],[],[],[31,30,32],[],[27],[14,33],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_long_string_in_streaming ","Throws","Simple Name typeLiteral ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Variable Declaration Expr ","Name Expr iter ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name getBytes ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString "]}
