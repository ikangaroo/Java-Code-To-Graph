{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","hasMethodName":["test_array_of_objects-TestNested-","test_get_all_array_elements_via_any-TestNested-","skip_get_all_object_values_via_any-TestNested-","test_get_all_with_some_invalid_path-TestNested-","test_recursive_class-TestNested-"]}
{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","methodName":"test_array_of_objects-TestNested-","callMethodNameReferTo":{"81":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","22":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","38":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T"},"num":91,"succs":[[1,14],[2,33],[42,3],[72,4],[5,76],[83],[13,11,9,10,8,7],[],[9],[],[12],[],[],[5,2,4,3,1,0],[20],[16],[],[16,15],[16,17],[16,18],[21,22,16],[16],[25,23,24],[],[],[29,27,26,28],[30],[],[31],[32],[],[],[],[36],[15],[34],[37,34,38],[34],[39,40,15],[],[41],[],[44,45,35,43],[],[],[46,47,48],[],[],[49,50],[51],[62],[],[],[54],[56,55,57],[],[],[30],[59],[60,56,61],[],[30],[],[],[65],[67,66,56],[],[30],[69],[71,56,70],[],[30],[73,74,17],[],[18,75],[],[79],[19],[77],[80,77,81],[77],[82,19],[],[86,85,84],[],[30],[89,87,78,88],[],[90],[30],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_array_of_objects ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name that ","Name Expr iter ","Void Type ","Void Type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type SimpleObject ","Method Call Expr ","Name Expr JsonIterator ","Simple Name chars ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Simple Name objects ","Class Or Interface Type Decoder ","Variable Declarator SimpleObject[] objects = ","Simple Name setContentView ","Method Call Expr ","Simple Name read ","Class Expr SimpleObject[].class ","Array Type 1 ","Method Call Expr ","Simple Name append ","Simple Name assertArrayEquals ","Array Creation Expr SimpleObject Array Creation Level Not Empty Array Initializer Expr ","Class Or Interface Type SimpleObject ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Object Creation Expr SimpleObject Optional.empty Optional.empty ","Object Creation Expr SimpleObject Optional.empty Optional.empty ","Class Or Interface Type SimpleObject ","Initializer Declaration ","Expression Stmt ","Assign Expr ASSIGN ","Name Expr field1 ","ASSIGN","Simple Name data ","Expression Stmt ","Assign Expr ASSIGN ","Class Or Interface Type String ","String Literal Expr Not Empty  ","Class Or Interface Type SimpleObject ","Initializer Declaration ","Expression Stmt ","Assign Expr ASSIGN ","Class Or Interface Type Object ","Name Expr iter ","Expression Stmt ","Return Stmt ","Name Expr field2 ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name reset ","Field Access Expr ","Name Expr any ","Return Stmt ","Simple Name len ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Simple Name println ","Method Call Expr ","Return Stmt ","Name Expr iter ","Method Call Expr ","Simple Name toString ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","IntegerLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","methodName":"test_get_all_array_elements_via_any-TestNested-","callMethodNameReferTo":{"49":"src/main/java/com/jsoniter/any/Any.java-asList-Any-","34":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","52":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","22":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","42":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","59":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","46":"src/main/java/com/jsoniter/any/Any.java-rewrap-Any-List<Any>"},"num":61,"succs":[[14,1],[2,27],[39,3],[44,4],[51,5],[56],[13,11,9,10,7,8],[],[9],[],[12],[],[],[2,0,5,4,1,3],[20],[16],[],[16,18],[16,15],[17],[16,22,21],[16],[24,25,23],[],[],[26],[],[32],[15],[28],[19,28,29],[30],[28,34,33],[28],[15,35,36,37],[],[38],[26],[],[42,41,40],[],[26],[29,43],[],[45,46,17],[],[47,49,48],[],[],[18,50],[],[52,45,30],[53,19,54,55],[],[38],[26],[57,58,59],[],[26],[60,31],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_get_all_array_elements_via_any ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Name Expr ctx ","Class Or Interface Type Any ","Name Expr any ","Char Literal Expr '8' ","Variable Declarator Any any = ","Name Expr val ","Method Call Expr ","Name Expr JsonIterator ","Simple Name reportError ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Class Or Interface Type Object ","Name Expr number ","Simple Name append ","Class Or Interface Type String ","Assign Expr ASSIGN ","Class Or Interface Type Any ","Method Call Expr ","Simple Name get ","Name Expr obj ","String Literal Expr Not Empty  ","'*'","Method Call Expr ","Return Stmt ","Simple Name valueType ","Method Call Expr ","Simple Name toString ","Expression Stmt ","ASSIGN","Method Call Expr ","Name Expr Any ","Simple Name object ","Method Call Expr ","Simple Name asList ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name get ","Char Literal Expr '*' ","Simple Name pType ","Method Call Expr ","Field Access Expr ","Simple Name simpleObj ","Method Call Expr ","Simple Name cacheKey "]}
{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","methodName":"skip_get_all_object_values_via_any-TestNested-","callMethodNameReferTo":{"34":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","50":"src/main/java/com/jsoniter/any/Any.java-asMap-Any-","53":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","22":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","43":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","60":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","47":"src/main/java/com/jsoniter/any/Any.java-rewrap-Any-List<Any>"},"num":62,"succs":[[14,1],[2,27],[40,3],[4,45],[52,5],[57],[8,10,9,13,11,7],[],[9],[],[12],[],[],[3,2,0,5,4,1],[20],[16],[],[16,18],[16,15],[17],[22,21,16],[16],[23,25,24],[],[],[26],[],[32],[15],[28],[29,28,19],[30],[34,33,28],[28],[37,35,36,15],[],[38],[39],[],[],[43,41,42],[],[26],[29,44],[],[46,47,17],[],[49,50,48],[],[],[51,18],[],[46,30,53],[56,55,19,54],[],[38],[39],[58,59,60],[],[26],[31,61],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name skip_get_all_object_values_via_any ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Integer Literal Expr Note Zero  ","Name Expr len ","Primitive Type int ","Name Expr any ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Name Expr stream ","Name Expr result ","Simple Name append ","Name Expr result ","Variable Declarator Any result = ","Class Or Interface Type Map ","Method Call Expr ","Simple Name get ","Char Literal Expr '*' ","Integer Literal Expr Note Zero  ","'*'","IntegerLiteralExpr","Expression Stmt ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Method Call Expr ","Simple Name asMap ","Assign Expr ASSIGN ","Method Call Expr ","Simple Name get ","Char Literal Expr '*' ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","methodName":"test_get_all_with_some_invalid_path-TestNested-","callMethodNameReferTo":{"64":"src/main/java/com/jsoniter/any/Any.java-asList-Any-","96":"src/main/java/com/jsoniter/any/Any.java-asMap-Any-","33":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","49":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","82":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","67":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","99":"src/main/java/com/jsoniter/any/Any.java-get-Any-Object[]-int","57":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","74":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","61":"src/main/java/com/jsoniter/any/Any.java-rewrap-Any-List<Any>","77":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String","93":"src/main/java/com/jsoniter/any/Any.java-rewrap-Any-List<Any>"},"num":108,"succs":[[1,20],[2,38],[3,54],[4,59],[5,66],[6,71],[76,7],[8,81],[9,87],[92,10],[98,11],[103],[17,15,14,19,16,13],[],[15],[],[18],[],[],[3,4,8,9,1,10,6,2,5,11,0,7],[31],[22],[],[24,22],[21,22],[23],[23,25],[26],[29,26],[27,26],[28],[33,32,22],[22],[35,34,36],[],[],[37],[],[47],[21],[39],[40,39,25],[41],[27,41,42],[43],[44,43,30],[45],[48,39,49],[39],[52,21,51,50],[],[53],[37],[],[57,55,56],[],[37],[40,58],[],[60,23,61],[],[62,63,64],[],[],[24,65],[],[60,41,67],[70,69,68,25],[],[53],[37],[74,73,72],[],[37],[42,75],[],[60,26,77],[80,78,79],[],[],[37],[43,60,82],[27,85,83,84],[],[53],[86],[],[88,90,89],[],[37],[44,91],[],[60,93,28],[94,95,96],[],[],[29,97],[],[60,45,99],[102,101,100,30],[],[53],[86],[106,105,104],[],[37],[107,46],[]],"attribute":["Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Variable Declaration Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name put ","Simple Name any ","Name Expr ctx ","Name Expr any ","Name Expr any ","Primitive Type int ","Name Expr arr ","Primitive Type int ","Name Expr any ","Primitive Type int ","Variable Declarator Any any = ","Name Expr buf ","Method Call Expr ","Name Expr JsonIterator ","Simple Name reportError ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name append ","Name Expr result ","Simple Name append ","Simple Name field2 ","Simple Name append ","Name Expr result ","Class Or Interface Type Object ","Name Expr result ","Method Call Expr ","Class Or Interface Type Any ","Method Call Expr ","Char Literal Expr ''' ","Char Literal Expr '*' ","String Literal Expr Not Empty  ","'*'","Variable Declaration Expr ","Class Or Interface Type JsonIterator ","Simple Name setter ","Method Call Expr ","Simple Name toString ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr Any ","Simple Name rewrap ","Method Call Expr ","Simple Name asList ","Assign Expr ASSIGN ","Method Call Expr ","Integer Literal Expr Note Zero  ","Char Literal Expr '*' ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Name Expr stream ","Method Call Expr ","Simple Name toString ","Method Call Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Method Call Expr ","Simple Name add ","Name Expr Any ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Class Or Interface Type ParameterizedType ","Simple Name toString ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr Any ","Simple Name Object ","Method Call Expr ","Name Expr lines ","Method Call Expr ","Method Call Expr ","Name Expr len ","Char Literal Expr '*' ","Integer Literal Expr Note Zero  ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Parameter JsonStream stream ","Name Expr cacheKey "]}
{"fileName":"src/test/java/com/jsoniter/TestNested.java","version":"0.9.23","methodName":"test_recursive_class-TestNested-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":24,"succs":[[7,1],[13],[5,6,4,3],[],[5],[],[0,1],[8],[9,11,10],[10],[],[12],[],[14,15],[],[17,16],[18,19,20,21],[],[],[],[22],[23],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_recursive_class ","Block Stmt ","Variable Declaration Expr ","Variable Declarator com.jsoniter.output.TestNested.TestObject3 obj = ","Class Or Interface Type TestObject3 ","Simple Name obj ","Object Creation Expr com.jsoniter.output.TestNested.TestObject3 Optional.empty Optional.empty ","Class Or Interface Type TestObject3 ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","Simple Name reference ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject3.class ","StringLiteralExpr","Class Or Interface Type TestObject3 "]}
