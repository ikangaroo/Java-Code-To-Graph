{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","hasMethodName":["test_int-TestAny-","test_long-TestAny-","test_float-TestAny-","test_double-TestAny-","test_null-TestAny-","test_boolean-TestAny-","test_string-TestAny-","test_list-TestAny-","test_array-TestAny-","test_not_found-TestAny-","skip_map-TestAny-","skip_my_class-TestAny-","test_object-TestAny-"]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_int-TestAny-","callMethodNameReferTo":{"97":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","67":"src/main/java/com/jsoniter/any/Any.java-toLong-Any-","83":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","40":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","88":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","73":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-","62":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","47":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object"},"num":99,"succs":[[17,1],[37,2],[44,3],[4,51],[5,59],[64,6],[70,7],[8,75],[9,80],[85,10],[11,91],[94],[14,16,15,13],[],[15],[],[5,8,0,6,11,9,3,4,2,10,7,1],[30],[19],[],[18,19],[20,19],[21,19],[22,19],[19,23],[19,24],[25,19],[26,19],[19,27],[19,28],[31,19,32],[19],[33,35,34],[],[],[36],[],[39,40,38],[],[41,42],[18,43],[],[],[],[47,46,45],[],[48],[50,20,49],[],[],[],[53,54,52],[],[56,57,55],[21,58],[],[],[36],[],[62,61,60],[],[36],[22,63],[],[66,65,67],[],[68],[23,69],[],[],[71,72,73],[],[],[24,74],[],[76,77,78],[],[],[25,79],[],[83,82,81],[],[48],[26,84],[],[86,88,87],[],[89],[27,90],[],[],[92,93,28],[],[36],[95,96,97],[],[48],[98,29],[]],"attribute":["Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name jsoniter ","Block Stmt ","Expression Stmt ","Name Expr any ","Simple Name any ","Name Expr any ","Name Expr any ","Name Expr obj ","Name Expr any ","Name Expr obj ","Name Expr any ","Simple Name get ","Name Expr any ","Class Or Interface Type Any ","Name Expr any ","Variable Declarator Any any = ","Name Expr Any ","Simple Name CodegenAccess ","Name Expr Any ","Simple Name wrap ","Name Expr val ","IntegerLiteralExpr","Expression Stmt ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Simple Name valueType ","Class Or Interface Type Object ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name emptyList ","Method Call Expr ","Return Stmt ","Method Call Expr ","Name Expr classAndArgs ","Name Expr Integer ","Simple Name encoder ","Simple Name get ","Simple Name length ","Expression Stmt ","Class Or Interface Type JsonIterator ","Char Literal Expr ''' ","Method Call Expr ","Simple Name toInt ","Variable Declaration Expr ","Expression Stmt ","Simple Name head ","Method Call Expr ","LongLiteralExpr","Simple Name toLong ","Expression Stmt ","Expression Stmt ","Class Or Interface Type List ","Method Call Expr ","Simple Name toDouble ","Variable Declaration Expr ","Assign Expr ASSIGN ","Double Literal Expr Note Zero  ","Simple Name createDecoder ","Simple Name valueOf ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Expression Stmt ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","true","Simple Name toBoolean ","Name Expr JsonIterator ","Simple Name any ","Char Literal Expr '}' ","Variable Declaration Expr ","Field Access Expr ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name parseInt "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_long-TestAny-","callMethodNameReferTo":{"52":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","68":"src/main/java/com/jsoniter/any/Any.java-toFloat-Any-","38":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","87":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","73":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","58":"src/main/java/com/jsoniter/any/Any.java-toLong-Any-","45":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","30":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","78":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","63":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-"},"num":89,"succs":[[16,1],[2,35],[42,3],[49,4],[5,55],[6,60],[65,7],[8,70],[9,75],[10,81],[84],[13,14,15,12],[],[14],[],[5,6,0,8,10,2,9,3,7,1,4],[28],[18],[],[18,17],[19,18],[20,18],[18,21],[22,18],[18,23],[18,24],[18,25],[26,18],[30,18,29],[18],[33,32,31],[],[],[34],[],[38,37,36],[],[39,40],[17,41],[],[],[],[44,43,45],[],[46],[47,19,48],[],[],[],[52,50,51],[],[53],[20,54],[],[],[56,58,57],[],[34],[59,21],[],[61,62,63],[],[],[22,64],[],[66,67,68],[],[],[69,23],[],[72,71,73],[],[46],[74,24],[],[78,77,76],[],[79],[80,25],[],[],[83,26,82],[],[34],[86,87,85],[],[46],[27,88],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name encodeInt ","Block Stmt ","Expression Stmt ","Name Expr any ","Simple Name any ","Name Expr any ","Name Expr obj ","Char Literal Expr '}' ","Name Expr any ","String Literal Expr Not Empty  ","Name Expr any ","Simple Name obj ","Name Expr ctx ","Name Expr len ","Variable Declarator Any any = ","Name Expr com ","Method Call Expr ","Simple Name set ","Simple Name wrap ","Long Literal Expr Note Zero  ","LongLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name NUMBER ","Simple Name valueType ","Variable Declaration Expr ","Expression Stmt ","Simple Name param ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Expression Stmt ","Simple Name assertEquals ","Char Literal Expr '1' ","Method Call Expr ","IntegerLiteralExpr","Simple Name toInt ","Expression Stmt ","Class Or Interface Type JsonIterator ","Simple Name iter ","Method Call Expr ","Simple Name toLong ","Method Call Expr ","Simple Name assertEquals ","Name Expr Long ","Method Call Expr ","Simple Name toDouble ","Expression Stmt ","Simple Name assertEquals ","Simple Name iter ","Method Call Expr ","Simple Name toFloat ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Method Call Expr ","Expression Stmt ","Char Literal Expr 'n' ","Method Call Expr ","true","Simple Name toBoolean ","Return Stmt ","Name Expr col ","Primitive Type long ","Method Call Expr ","Return Stmt ","Boolean Literal Expr false ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_float-TestAny-","callMethodNameReferTo":{"81":"src/main/java/com/jsoniter/any/Any.java-set-Any-int","51":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","68":"src/main/java/com/jsoniter/any/Any.java-toFloat-Any-","37":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","87":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","73":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","44":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","30":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","78":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","63":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-"},"num":89,"succs":[[1,16],[2,34],[41,3],[4,48],[54,5],[6,60],[65,7],[8,70],[9,75],[81,10],[84],[13,15,14,12],[],[14],[],[6,9,7,8,0,2,1,4,3,5,10],[28],[18],[],[18,17],[18,19],[20,18],[21,18],[22,18],[23,18],[24,18],[25,18],[18,26],[29,30,18],[18],[33,32,31],[],[],[],[37,36,35],[],[38,39],[40,17],[],[],[],[42,43,44],[],[45],[47,19,46],[],[],[],[49,50,51],[],[52],[20,53],[],[],[57,55,56],[],[58],[59,21],[],[],[62,63,61],[],[],[22,64],[],[68,66,67],[],[],[23,69],[],[73,71,72],[],[45],[74,24],[],[76,78,77],[],[79],[80,25],[],[],[82,83,26],[],[],[86,85,87],[],[45],[27,88],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Switch Entry Stmt ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Primitive Type int ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Primitive Type int ","Name Expr any ","Variable Declarator Any any = ","Name Expr ctx ","Method Call Expr ","Name Expr arr ","Name Expr iter ","Double Literal Expr Note Zero  ","Method Call Expr ","Return Stmt ","Field Access Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name setter ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name readValue ","Return Stmt ","Return Stmt ","Simple Name add ","Method Call Expr ","IntegerLiteralExpr","Simple Name toInt ","Return Stmt ","Simple Name assertEquals ","Null Literal Expr ","Name Expr JsonIterator ","LongLiteralExpr","Class Or Interface Type Object ","Method Call Expr ","Expression Stmt ","Simple Name ctor ","Method Call Expr ","Simple Name toDouble ","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name iter ","Method Call Expr ","Simple Name toFloat ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name iter ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Simple Name set ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_double-TestAny-","callMethodNameReferTo":{"81":"src/main/java/com/jsoniter/any/Any.java-set-Any-int","51":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","68":"src/main/java/com/jsoniter/any/Any.java-toFloat-Any-","37":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","87":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","57":"src/main/java/com/jsoniter/any/Any.java-toLong-Any-","73":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","44":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","78":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","63":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-"},"num":89,"succs":[[1,16],[2,34],[3,41],[4,48],[5,54],[6,60],[65,7],[8,70],[75,9],[10,81],[84],[13,15,14,12],[],[14],[],[1,4,8,5,2,7,3,10,6,0,9],[28],[18],[],[18,17],[18,19],[18,20],[18,21],[18,22],[23,18],[18,24],[25,18],[26,18],[18,29,30],[18],[32,33,31],[],[],[],[35,37,36],[],[39,38],[17,40],[],[],[],[42,44,43],[],[45],[47,19,46],[],[],[],[51,49,50],[],[52],[20,53],[],[],[56,55,57],[],[58],[59,21],[],[],[61,62,63],[],[],[64,22],[],[68,67,66],[],[],[23,69],[],[73,71,72],[],[45],[74,24],[],[78,76,77],[],[79],[25,80],[],[],[26,82,83],[],[],[86,85,87],[],[45],[27,88],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_double ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Name Expr obj ","Name Expr any ","String Literal Expr Not Empty  ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr ctx ","Name Expr pos ","Variable Declarator Any any = ","Name Expr buf ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Null Literal Expr ","Method Call Expr ","Class Or Interface Type JsonIterator ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name NUMBER ","Simple Name valueType ","Variable Declaration Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","IntegerLiteralExpr","Simple Name toInt ","Variable Declaration Expr [FINAL] ","Return Stmt ","Null Literal Expr ","Method Call Expr ","LongLiteralExpr","Simple Name toLong ","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name iter ","Method Call Expr ","Simple Name toDouble ","Method Call Expr ","Array Access Expr count++ ","Simple Name size ","Method Call Expr ","Simple Name toFloat ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","Method Call Expr ","Array Access Expr count++ ","Simple Name iter ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Primitive Type int ","Name Expr type ","Variable Declaration Expr ","Marker Annotation Expr @JsonCreator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_null-TestAny-","callMethodNameReferTo":{"48":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","18":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","35":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","42":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","28":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-"},"num":50,"succs":[[1,10],[25,2],[32,3],[39,4],[45],[7,9,8,6],[],[8],[],[1,4,3,2,0],[16],[12],[],[11,12],[13,12],[14,12],[17,18,12],[12],[20,19,21],[],[],[23,22],[],[24],[],[28,27,26],[],[29,30],[31,11],[],[],[],[34,33,35],[],[36],[38,13,37],[],[],[],[41,40,42],[],[43],[44,14],[],[],[46,48,47],[],[36],[15,49],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Marker Annotation Expr @Override ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Name Expr ctx ","Name Expr any ","Name Expr any ","Name Expr any ","Variable Declarator Any any = ","Name Expr buf ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Cast Expr ","Class Or Interface Type Object ","Char Literal Expr '' ","NullLiteralExpr","Method Call Expr ","Array Access Expr count++ ","Method Call Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name NULL ","Simple Name valueType ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Array Access Expr count++ ","Boolean Literal Expr false ","Method Call Expr ","false","Simple Name toBoolean ","Method Call Expr ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_boolean-TestAny-","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","52":"src/main/java/com/jsoniter/any/Any.java-toLong-Any-","68":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","39":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","24":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","58":"src/main/java/com/jsoniter/any/Any.java-toFloat-Any-","63":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-"},"num":70,"succs":[[1,13],[2,29],[36,3],[43,4],[49,5],[55,6],[60,7],[65],[11,12,10,9],[],[11],[],[0,2,1,5,7,6,4,3],[22],[15],[],[15,14],[15,16],[15,17],[15,18],[15,19],[15,20],[15,23,24],[15],[25,26,27],[],[],[28],[],[32,31,30],[],[34,33],[35,14],[],[],[],[37,39,38],[],[40],[41,16,42],[],[],[],[46,44,45],[],[47],[48,17],[],[],[50,51,52],[],[53],[18,54],[],[],[57,58,56],[],[],[59,19],[],[62,63,61],[],[],[64,20],[],[66,67,68],[],[40],[21,69],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Null Literal Expr ","Simple Name test_boolean ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Name Expr buf ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr any ","Simple Name buf ","Variable Declarator Any any = ","Name Expr buf ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Boolean Literal Expr true ","true","Method Call Expr ","Array Access Expr count++ ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name BOOLEAN ","Simple Name valueType ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Simple Name encodeLong ","Name Expr classInfo ","Return Stmt ","Field Access Expr ","Integer Literal Expr Note Zero  ","Simple Name encodeFloat ","IntegerLiteralExpr","Simple Name toInt ","Method Call Expr ","Array Access Expr count++ ","Long Literal Expr Note Zero  ","Method Call Expr ","LongLiteralExpr","Simple Name toLong ","Method Call Expr ","Array Access Expr count++ ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name toFloat ","Method Call Expr ","Field Access Expr ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name toDouble ","Method Call Expr ","Class Or Interface Type SimpleObject ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_string-TestAny-","callMethodNameReferTo":{"64":"src/main/java/com/jsoniter/any/Any.java-toFloat-Any-","80":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","36":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","52":"src/main/java/com/jsoniter/any/Any.java-toInt-Any-","69":"src/main/java/com/jsoniter/any/Any.java-toDouble-Any-","58":"src/main/java/com/jsoniter/any/Any.java-toLong-Any-","74":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","43":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","28":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","46":"src/main/java/com/jsoniter/any/Any.java-set-Any-int"},"num":82,"succs":[[1,15],[33,2],[40,3],[46,4],[49,5],[55,6],[61,7],[8,66],[9,71],[77],[13,14,12,11],[],[13],[],[1,3,9,6,0,8,2,5,4,7],[26],[17],[],[17,16],[18,17],[19,17],[17,20],[17,21],[17,22],[17,23],[17,24],[17,27,28],[17],[30,29,31],[],[],[32],[],[36,34,35],[],[37,38],[16,39],[],[],[],[41,42,43],[],[32],[18,45,44],[],[],[19,48,47],[],[32],[51,50,52],[],[53],[20,54],[],[],[58,56,57],[],[59],[60,21],[],[],[63,62,64],[],[],[22,65],[],[69,68,67],[],[],[70,23],[],[74,73,72],[],[75],[24,76],[],[],[79,80,78],[],[32],[81,25],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_string ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Name Expr val ","Name Expr any ","Name Expr ctx ","Name Expr idx ","Name Expr any ","Char Literal Expr ''' ","Name Expr any ","Simple Name put ","Integer Literal Expr Note Zero  ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name STRING ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name set ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type TestObject18 ","Simple Name obj ","Method Call Expr ","IntegerLiteralExpr","Simple Name toInt ","Method Call Expr ","Simple Name assertEquals ","Name Expr keys ","Method Call Expr ","LongLiteralExpr","Simple Name toLong ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name INVALID ","Method Call Expr ","Simple Name assertEquals ","Name Expr Byte ","Method Call Expr ","Simple Name toDouble ","Method Call Expr ","Name Expr JsonIterator ","Name Expr iter ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Assign Expr ASSIGN ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_list-TestAny-","callMethodNameReferTo":{"33":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","51":"src/main/java/com/jsoniter/any/Any.java-get-Any-int","21":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","40":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","59":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","47":"src/main/java/com/jsoniter/any/Any.java-object-Any-"},"num":67,"succs":[[1,11],[30,2],[3,37],[4,44],[56,5],[62],[9,10,8,7],[],[9],[],[3,1,0,2,5,4],[19],[13],[],[12],[14,12],[15,12],[16,12],[17,12],[21,12,20],[12],[24,23,22],[],[],[27,13,26,25,28],[],[29],[29],[29],[],[32,31,33],[],[34,35],[14,36],[],[],[],[38,40,39],[],[41],[43,42,15],[],[],[],[46,45,47],[],[50,48,49],[51,52],[],[],[29],[54,16,53],[],[],[55],[],[57,59,58],[],[60],[17,61],[],[],[65,64,63],[],[41],[18,66],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Marker Annotation Expr @Override ","Block Stmt ","Return Stmt ","Name Expr ctx ","Simple Name result ","Name Expr any ","Name Expr any ","Name Expr any ","Simple Name add ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name put ","Name Expr iter ","Method Call Expr ","Simple Name asList ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Assign Expr PLUS ","Field Access Expr ","Method Call Expr ","Field Access Expr ","Name Expr cache ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name nextToken ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Name Expr Integer ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name object ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Class Or Interface Type JsonIterator ","Simple Name head ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Binary Expr NOT_EQUALS ","Name Expr encodeTo "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_array-TestAny-","callMethodNameReferTo":{"34":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","66":"src/main/java/com/jsoniter/any/Any.java-toString-Any-","20":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","52":"src/main/java/com/jsoniter/any/Any.java-get-Any-int","41":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","60":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-"},"num":68,"succs":[[1,11],[31,2],[3,38],[45,4],[5,57],[63],[8,9,10,7],[],[9],[],[3,1,0,5,4,2],[18],[13],[],[12,13],[14,13],[15,13],[16,13],[19,20,13],[13],[23,21,22],[],[],[26,24,25],[],[],[27,29,28],[30],[30],[30],[],[34,32,33],[],[35,36],[37,12],[],[],[],[39,41,40],[],[42],[43,14,44],[],[],[],[46,48,47],[],[49,51,50],[52,53],[],[],[30],[15,54,55],[],[],[56],[],[60,58,59],[],[61],[16,62],[],[],[65,64,66],[],[42],[67,17],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_array ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr any ","Name Expr idx ","Simple Name put ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Class Or Interface Type Exception ","Simple Name ARRAY ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","Simple Name getField1 ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Parameter StringBuilder lines ","Name Expr Integer ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name object ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Return Stmt ","Null Literal Expr ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_not_found-TestAny-","callMethodNameReferTo":{"13":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":35,"succs":[[1,8],[2,24],[29],[7,5,6,4],[],[6],[],[1,2,0],[11],[10],[],[10,12,13],[10],[15,16,14],[],[],[17,19,18],[],[],[22,21,20],[23],[23],[23],[],[26,25,27],[],[],[28],[],[32,9,31,33,30],[],[34],[34],[34],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Simple Name List ","Simple Name test_not_found ","Block Stmt ","Method Call Expr ","Class Or Interface Type Any ","Class Or Interface Type Any ","Assign Expr ASSIGN ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Array Creation Expr int Array Creation Level Not Empty Array Initializer Expr ","Primitive Type int ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Assign Expr ASSIGN ","Simple Name append ","Class Expr JsonException.class ","Class Or Interface Type JsonException ","Variable Declaration Expr ","Name Expr pos ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Name Expr target ","StringLiteralExpr"]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"skip_map-TestAny-","callMethodNameReferTo":{"48":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","65":"src/main/java/com/jsoniter/any/Any.java-get-Any-int","55":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","72":"src/main/java/com/jsoniter/any/Any.java-toBoolean-Any-","42":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","61":"src/main/java/com/jsoniter/any/Any.java-object-Any-","78":"src/main/java/com/jsoniter/any/Any.java-toString-Any-"},"num":80,"succs":[[14,1],[2,23],[29,3],[33,4],[45,5],[6,52],[7,58],[8,69],[75],[11,12,13,10],[],[12],[],[3,8,6,2,1,4,7,5,0],[19],[16],[],[15,16],[16,17],[20,21,16],[16],[22],[],[15,24,25,26],[],[27],[28],[],[],[30,17,31,32],[],[27],[27],[40],[18],[34],[35,34],[34,36],[37,34],[34,38],[34,42,41],[34],[43,18,44],[],[],[46,47,48],[],[49,50],[35,51],[],[],[],[54,53,55],[],[27],[56,36,57],[],[],[60,61,59],[],[63,62,64],[66,65],[],[],[28],[37,67,68],[],[],[27],[72,70,71],[],[73],[74,38],[],[],[76,78,77],[],[27],[39,79],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Name Expr existing ","Block Stmt ","Expression Stmt ","Primitive Type int ","Simple Name val ","Name Expr out ","Name Expr val ","Binary Expr PLUS ","Class Or Interface Type HashMap ","Object Creation Expr HashMap<String, Object> Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Method Call Expr ","Class Or Interface Type Any ","Simple Name element ","Integer Literal Expr Note Zero  ","StringLiteralExpr","IntegerLiteralExpr","Method Call Expr ","Class Or Interface Type Any ","Simple Name element ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name any ","Name Expr any ","Name Expr any ","Name Expr any ","Name Expr pos ","Name Expr any ","Expression Stmt ","Class Or Interface Type Any ","Method Call Expr ","Simple Name add ","Simple Name wrap ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name OBJECT ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Name Expr Integer ","Simple Name valueOf ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name object ","Simple Name get ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertEquals ","Null Literal Expr ","Method Call Expr ","true","Simple Name toBoolean ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"skip_my_class-TestAny-","callMethodNameReferTo":{"51":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-","58":"src/main/java/com/jsoniter/output/JsonStream.java-serialize-JsonStream-Object","28":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int","45":"src/main/java/com/jsoniter/any/Any.java-wrap-Any-int"},"num":61,"succs":[[1,11],[20,2],[3,26],[4,39],[48,5],[55],[8,9,10,7],[],[9],[],[1,2,3,5,4,0],[16],[13],[],[12],[14],[13,17,18],[13],[19],[],[21,22,23],[24,12],[],[25],[],[],[22,28,27],[29,14],[30,31,32],[],[],[],[34,35,33],[],[],[36,37],[38],[38],[],[43],[15],[40],[40,41],[40,44,45],[40],[46,15,47],[],[],[49,51,50],[],[52,53],[41,54],[],[],[],[56,57,58],[],[25],[60,42,59],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name skip_my_class ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name val ","Name Expr val ","Name Expr val ","Variable Declarator MyClass val = ","Class Or Interface Type MyClass ","Object Creation Expr MyClass Optional.empty Optional.empty ","Class Or Interface Type MyClass ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Array Access Expr i ","Simple Name field1 ","StringLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Method Call Expr ","Name Expr stream ","Name Expr Any ","Simple Name wrap ","Array Creation Expr long Array Creation Level Not Empty Array Initializer Expr ","Primitive Type long ","Array Creation Level Dimension Empty ","Array Initializer Expr ","Integer Literal Expr Note Zero  ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Class Or Interface Type Any ","Name Expr buf ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr Any ","Simple Name wrap ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Simple Name fromNames ","Simple Name OBJECT ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize "]}
{"fileName":"src/test/java/com/jsoniter/output/TestAny.java","version":"0.9.23","methodName":"test_object-TestAny-","callMethodNameReferTo":{"21":"src/main/java/com/jsoniter/any/Any.java-valueType-Any-"},"num":34,"succs":[[8,1],[18,2],[25],[7,5,6,4],[],[6],[],[2,0,1],[11],[10],[],[12,10,13],[10],[16,15,14],[],[],[17],[],[19,20,21],[],[23,22],[9,24],[],[],[],[27,28,26],[],[29],[32,31,30],[],[],[],[33],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_object ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Class Or Interface Type Any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Primitive Type int ","Primitive Type byte ","Object Creation Expr Object Optional.empty Optional.empty ","Class Or Interface Type Object ","Method Call Expr ","Class Or Interface Type TestObject10 ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name OBJECT ","Simple Name valueType ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr 'r' ","Method Call Expr ","StringLiteralExpr","Name Expr JsonStream ","Simple Name serialize ","Object Creation Expr Object Optional.empty Optional.empty ","Class Or Interface Type Object "]}
