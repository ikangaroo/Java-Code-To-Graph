{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","hasMethodName":["parse-JsonIterator-InputStream-int","parse-JsonIterator-byte[]","parse-JsonIterator-byte[]-int-int","parse-JsonIterator-String","parse-JsonIterator-Slice","reset-JsonIterator-byte[]","reset-JsonIterator-byte[]-int-int","reset-JsonIterator-Slice","reset-JsonIterator-InputStream","close-JsonIterator-","unreadByte-JsonIterator-","reportError-JsonIterator-String-String","currentBuffer-JsonIterator-","readNull-JsonIterator-","readBoolean-JsonIterator-","readShort-JsonIterator-","readInt-JsonIterator-","readLong-JsonIterator-","readArray-JsonIterator-","readNumberAsString-JsonIterator-","handle-JsonIterator.ReadArrayCallback-JsonIterator-Object","readArrayCB-JsonIterator-ReadArrayCallback-Object","readString-JsonIterator-","readStringAsSlice-JsonIterator-","readObject-JsonIterator-","handle-JsonIterator.ReadObjectCallback-JsonIterator-String-Object","readObjectCB-JsonIterator-ReadObjectCallback-Object","readFloat-JsonIterator-","readDouble-JsonIterator-","readBigDecimal-JsonIterator-","readBigInteger-JsonIterator-","readAny-JsonIterator-","read-JsonIterator-","read-JsonIterator-T","currentConfig-JsonIterator-","read-JsonIterator-TypeLiteral<T>-T","read-JsonIterator-Class<T>","read-JsonIterator-TypeLiteral<T>","read-JsonIterator-Type","whatIsNext-JsonIterator-","skip-JsonIterator-","deserialize-JsonIterator-Config-String-Class<T>","deserialize-JsonIterator-String-Class<T>","deserialize-JsonIterator-Config-String-TypeLiteral<T>","deserialize-JsonIterator-String-TypeLiteral<T>","deserialize-JsonIterator-Config-byte[]-Class<T>","deserialize-JsonIterator-byte[]-Class<T>","deserialize-JsonIterator-Config-byte[]-TypeLiteral<T>","deserialize-JsonIterator-byte[]-TypeLiteral<T>","deserialize-JsonIterator-Config-String","deserialize-JsonIterator-String","deserialize-JsonIterator-Config-byte[]","deserialize-JsonIterator-byte[]","findLastNotSpacePos-JsonIterator-byte[]","setMode-JsonIterator-DecodingMode","enableStreamingSupport-JsonIterator-"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"parse-JsonIterator-InputStream-int","callMethodNameReferTo":{},"num":63,"succs":[[1,16],[20,2,19],[7,6,9,4,5,8,3],[4],[],[6],[],[14,11],[13,15],[1,0],[11],[],[13],[],[],[],[18,17],[],[39,38,4,40,3],[],[21,10,22,23,24],[],[25,26],[27],[27],[],[],[],[29,41],[30,31],[18,31,19],[42,32],[34,36,47,33,49,48],[50],[35,55,54],[56],[37,59,58],[60],[39],[],[32,31,28],[30],[44,45,43],[],[],[46],[],[33],[34,53],[57,36],[18,51,52],[],[],[35],[],[],[],[37],[],[],[61,62],[],[]],"attribute":["Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter InputStream in ","Parameter int bufSize ","Block Stmt ","Name Expr in ","Simple Name in ","Name Expr bufSize ","Simple Name bufSize ","Class Or Interface Type InputStream ","Primitive Type int ","Method Call Expr ","Simple Name enableStreamingSupport ","Method Declaration ","ReturnStmt","Object Creation Expr JsonIterator Optional.empty Optional.empty ","Parameter float newVal ","Array Creation Expr byte Array Creation Level Not Empty ","Integer Literal Expr Zero  ","Integer Literal Expr Zero  ","Primitive Type byte ","Array Creation Level Dimension NotEmpty ","Zero IntegerLiteralExpr","If Stmt ","Name Expr isStreamingEnabled ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Parameter JsonException e ","Throw Stmt ","Parameter Exception e ","Throw Stmt ","Void Type ","Simple Name enableStreamingSupport ","Block Stmt ","Block Stmt ","Assign Expr ASSIGN ","Name Expr isStreamingEnabled ","ASSIGN","Boolean Literal Expr true ","true","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Name Expr DynamicCodegen ","Simple Name enableStreamingSupport ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"parse-JsonIterator-byte[]","callMethodNameReferTo":{},"num":22,"succs":[[6,3,4,2,5,1],[2],[],[4],[],[11,9],[7],[0,14,13],[9],[],[8,9],[12],[],[],[8,17,16,15,18],[],[19],[20],[10,21],[],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter byte[] buf ","Block Stmt ","Return Stmt ","Name Expr buf ","Simple Name buf ","Name Expr buf ","Array Type 1 ","Primitive Type byte ","ReturnStmt","Object Creation Expr JsonIterator Optional.empty Optional.empty ","Class Or Interface Type JsonIterator ","Null Literal Expr ","Integer Literal Expr Zero  ","Field Access Expr ","NullLiteralExpr","Zero IntegerLiteralExpr","Simple Name length "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"parse-JsonIterator-byte[]-int-int","callMethodNameReferTo":{},"num":25,"succs":[[4,7,5,2,6,8,3,1],[2],[],[4],[],[11,16],[13,18],[19,15],[9],[21,0,20],[11],[],[13],[],[15],[],[17],[],[],[],[],[14,23,10,12,22],[],[24],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter byte[] buf ","Parameter int head ","Parameter int tail ","Block Stmt ","Return Stmt ","Name Expr buf ","Simple Name buf ","Name Expr head ","Simple Name head ","Name Expr tail ","Simple Name tail ","Array Type 1 ","Primitive Type byte ","Primitive Type int ","Primitive Type int ","ReturnStmt","Object Creation Expr JsonIterator Optional.empty Optional.empty ","Class Or Interface Type JsonIterator ","Null Literal Expr ","NullLiteralExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"parse-JsonIterator-String","callMethodNameReferTo":{},"num":35,"succs":[[3,4,5,2,6,1],[2],[],[4],[],[10,9],[7],[12,0,11],[9],[],[],[],[14,13,16],[],[17,15,8],[],[21,18,19,20,2,1],[],[19],[],[25,15],[22],[27,16,11],[15],[23,15],[26],[],[23,30,29,28,31],[],[32],[33],[24,34],[],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter String str ","Block Stmt ","Return Stmt ","Name Expr str ","Simple Name str ","Class Or Interface Type String ","ReturnStmt","Method Call Expr ","Simple Name parse ","Method Call Expr ","Simple Name buf ","Method Declaration ","Simple Name getBytes ","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter byte[] buf ","Block Stmt ","Return Stmt ","Name Expr buf ","Name Expr buf ","Array Type 1 ","Primitive Type byte ","Object Creation Expr JsonIterator Optional.empty Optional.empty ","Class Or Interface Type JsonIterator ","Null Literal Expr ","Integer Literal Expr Zero  ","Field Access Expr ","NullLiteralExpr","Zero IntegerLiteralExpr","Simple Name length "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"parse-JsonIterator-Slice","callMethodNameReferTo":{},"num":24,"succs":[[4,2,5,3,6,1],[2],[],[4],[],[9,12],[7],[14,0,13],[9],[],[9,8],[9,10],[],[],[17,15,19,18,16],[],[20],[8,21],[22,10],[23,11],[],[],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","Class Or Interface Type JsonIterator ","Simple Name parse ","Parameter Slice slice ","Block Stmt ","Return Stmt ","Name Expr slice ","Simple Name slice ","Name Expr slice ","Name Expr slice ","Class Or Interface Type Slice ","ReturnStmt","Object Creation Expr JsonIterator Optional.empty Optional.empty ","Class Or Interface Type JsonIterator ","Null Literal Expr ","Method Call Expr ","Method Call Expr ","Method Call Expr ","NullLiteralExpr","Simple Name data ","Simple Name head ","Simple Name tail "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"reset-JsonIterator-byte[]","callMethodNameReferTo":{},"num":33,"succs":[[1,15],[2,21],[27],[9,5,8,7,4,6],[5],[],[7],[],[11,13],[2,1,0],[11],[],[10,11],[14],[],[10,17,16],[19,18],[],[20],[],[],[23,17,22],[24,25],[26],[20],[],[],[17,28,29],[30,31],[12,32],[20],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","FINAL","Void Type ","Simple Name reset ","Parameter byte[] buf ","Block Stmt ","Name Expr buf ","Simple Name buf ","Name Expr buf ","Array Type 1 ","Primitive Type byte ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name buf ","ThisExpr","Assign Expr ASSIGN ","Simple Name fillCache ","Integer Literal Expr Zero  ","This Expr ","Simple Name head ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Field Access Expr ","This Expr ","Simple Name tail ","Simple Name length "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"reset-JsonIterator-byte[]-int-int","callMethodNameReferTo":{},"num":36,"succs":[[22,1],[2,28],[32],[5,7,9,11,10,6,8,4],[5],[],[7],[],[13,18],[15,20],[17,21],[2,1,0],[13],[],[15],[],[17],[],[19],[],[],[],[24,12,23],[26,25],[],[27],[],[],[24,14,29],[31,30],[27],[],[24,16,33],[34,35],[27],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","FINAL","Void Type ","Simple Name reset ","Parameter byte[] buf ","Parameter int head ","Parameter int tail ","Block Stmt ","Primitive Type int ","Simple Name buf ","Name Expr head ","Simple Name head ","Name Expr tail ","Simple Name tail ","Array Type 1 ","Primitive Type byte ","Primitive Type int ","Primitive Type int ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name buf ","ThisExpr","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name tail "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"reset-JsonIterator-Slice","callMethodNameReferTo":{},"num":35,"succs":[[1,15],[2,23],[29],[5,9,6,8,7,4],[5],[],[7],[],[14,11],[0,2,1],[11],[],[11,10],[11,12],[],[16,17,18],[20,19],[],[10,22],[21],[],[],[],[25,17,24],[27,26],[12,28],[21],[],[],[30,17,31],[33,32],[34,13],[21],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","FINAL","Void Type ","Simple Name reset ","Parameter Slice value ","Block Stmt ","Name Expr value ","Simple Name value ","Name Expr value ","Name Expr value ","Class Or Interface Type Slice ","Expression Stmt ","Field Access Expr ","ASSIGN","Method Call Expr ","This Expr ","Simple Name buf ","ThisExpr","Simple Name data ","Assign Expr ASSIGN ","Field Access Expr ","Method Call Expr ","This Expr ","Simple Name head ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","Method Call Expr ","This Expr ","Simple Name tail ","Simple Name tail "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"reset-JsonIterator-InputStream","callMethodNameReferTo":{"58":"src/main/java/com/jsoniter/JsonIterator.java-enableStreamingSupport-JsonIterator-","14":"src/main/java/com/jsoniter/JsonIterator.java-enableStreamingSupport-JsonIterator-"},"num":71,"succs":[[14,1],[18,2],[24,3],[30],[9,6,7,10,8,5],[6,45],[],[8],[],[13,12],[2,3,1,0],[12],[],[],[15,17,16],[],[],[47,46,45,48,5],[20,11,19],[22,21],[],[23],[],[],[20,25,26],[27,28],[29],[23],[],[],[20,31,32],[34,33],[29],[23],[],[36,49],[37,38],[17,38,50],[51,39],[41,43,55,40,57,56],[58],[42,63,62],[64],[44,67,66],[68],[],[47],[],[39,38,35],[37],[],[20,53,52],[],[54],[],[40],[41,61],[65,43],[17,59,60],[],[],[42],[],[],[],[44],[],[],[69,70],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","FINAL","Void Type ","Simple Name reset ","Parameter InputStream in ","Block Stmt ","Name Expr in ","Simple Name in ","Class Or Interface Type InputStream ","Method Call Expr ","Name Expr JsonIterator ","Simple Name enableStreamingSupport ","Method Declaration ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name in ","ThisExpr","Assign Expr ASSIGN ","Field Access Expr ","Integer Literal Expr Zero  ","This Expr ","Simple Name head ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Field Access Expr ","Integer Literal Expr Zero  ","This Expr ","Simple Name tail ","If Stmt ","Name Expr isStreamingEnabled ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Parameter JsonException e ","Throw Stmt ","Parameter Exception e ","Throw Stmt ","STATIC","Void Type ","Simple Name enableStreamingSupport ","Block Stmt ","Block Stmt ","ReturnStmt","Assign Expr ASSIGN ","Name Expr isStreamingEnabled ","Boolean Literal Expr true ","true","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Name Expr DynamicCodegen ","Simple Name enableStreamingSupport ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"close-JsonIterator-","callMethodNameReferTo":{},"num":20,"succs":[[12,1],[14,15,16,2],[18],[5,9,7,11,8,6,4],[5],[],[7],[],[10],[],[],[0],[2],[1],[],[],[17],[],[13,19,3],[]],"attribute":["If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Void Type ","Simple Name close ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Name Expr in ","Name Expr in ","NOT_EQUALS","Null Literal Expr ","NullLiteralExpr","Method Call Expr ","Simple Name close "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"unreadByte-JsonIterator-","callMethodNameReferTo":{},"num":107,"succs":[[9,1],[10,11,3,2,12],[14,3],[22],[5,6,7,8],[],[7],[],[3,0],[2],[],[],[13],[],[16,20,15,17],[],[21,18],[19,21],[],[],[5,37,39,36,40,38,35],[],[23,24],[],[],[26,45],[27,59],[48,60,29,61,28],[62,29],[30,65],[31,74],[75,77,76,32,33],[78,33],[34,80],[88],[5],[37],[],[43,18],[19,44],[34,26,25,30,29,33],[18],[19],[],[],[53],[47],[],[46],[46,48,27],[49],[49,50],[49,51],[46,54,55],[46],[57,47,56],[],[58],[],[28],[],[13],[63,49,64],[],[13],[71],[50,67],[],[66,69,51],[31],[68],[73,66,72],[66],[56,50,67],[32],[],[],[],[79,63,68],[69,56,51],[84],[82,70,52],[],[81],[86,81,85],[81],[82,70,87,52],[],[90,89],[],[91,92,93],[94,92,95],[],[106,105],[96,92,83],[21],[97,92,98],[99,92,100],[21],[102,92,101],[],[42,103,92],[21],[41,104,92],[21],[],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Method Declaration ","FINAL","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","PUBLIC","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"reportError-JsonIterator-String-String","callMethodNameReferTo":{},"num":88,"succs":[[1,24],[2,38],[27,39,4,3,40],[42,4],[5,45],[6,54],[55,57,56,7,8],[58,8],[9,60],[68],[12,14,16,17,13,15,11],[12],[],[14],[],[22,19],[21,23],[9,1,0,5,4,8],[19],[],[21],[],[],[],[32],[26],[],[25],[25,27,2],[28],[28,29],[28,30],[25,33,34],[25],[36,26,35],[],[37],[],[3],[],[41],[],[43,28,44],[],[41],[51],[29,47],[],[46,49,30],[6],[48],[53,46,52],[46],[35,29,47],[7],[],[],[],[59,43,48],[49,35,30],[64],[62,50,31],[],[61],[66,61,65],[61],[62,50,67,31],[],[70,69],[],[71,72,73],[74,72,75],[],[87,86],[76,72,63],[85],[77,72,78],[79,72,80],[85],[82,72,81],[],[20,83,72],[85],[18,84,72],[85],[],[],[]],"attribute":["Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Method Declaration ","PUBLIC","FINAL","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Simple Name op ","Name Expr msg ","Simple Name msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","StringLiteralExpr","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"currentBuffer-JsonIterator-","callMethodNameReferTo":{},"num":57,"succs":[[1,12],[2,25],[3,27,26,15,4],[29,4],[5,32],[43,6,42],[8,11,9,10,7],[8],[],[10],[],[1,5,0,4],[19],[14],[],[13],[13,2,15],[16],[16,17],[20,13,21],[13],[14,23,22],[],[24],[],[3],[],[28],[],[30,31,16],[],[28],[37],[35,34,18,17],[],[],[33],[39,33,38],[33],[40,34,41,17],[],[35,22,18],[],[44,45,46],[48,47,45],[],[56,55],[49,45,36],[54],[51,45,50],[53,52,45],[54],[54],[],[],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr LESS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration ","PUBLIC","FINAL","Class Or Interface Type String ","Simple Name currentBuffer ","Block Stmt ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr head ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Binary Expr MINUS ","ReturnStmt","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Name Expr iter ","StringLiteralExpr","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readNull-JsonIterator-","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int","22":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator"},"num":147,"succs":[[16,1],[26,2],[28,3,27,5,19],[4,30],[7,5,33,34],[6,36],[7,33,42],[9,11,10,15,12,13,8],[9],[],[11],[],[14],[],[],[6,5,1,0],[20],[18],[],[17],[17,21,22],[17],[18,23,24],[],[25],[],[4,3],[],[29],[],[31,32],[],[9,48,49,50],[],[35],[],[40,38,39,37],[],[],[25],[41],[],[43],[],[51,45],[52,53,47,46,54],[56,47],[64],[49],[],[47,44],[46],[],[],[55],[],[58,62,57,59],[],[63,60],[61,63],[],[],[9,78,80,77,81,79,8],[],[65,66],[],[],[68,86],[99,69],[100,89,70,71,101],[102,71],[72,105],[73,114],[115,117,116,74,75],[118,75],[76,120],[128],[78],[],[84,60],[61,85],[76,68,67,72,71,75],[60],[61],[],[],[94],[88],[],[87],[87,89,69],[90],[90,91],[90,92],[87,95,96],[87],[98,88,97],[],[41],[70],[],[55],[103,90,104],[],[55],[111],[91,107],[],[109,106,92],[73],[108],[113,106,112],[106],[97,91,107],[74],[],[],[],[119,103,108],[109,97,92],[124],[122,110,93],[],[121],[126,121,125],[121],[122,110,127,93],[],[130,129],[],[131,132,133],[134,132,135],[],[146,145],[136,132,123],[63],[137,132,138],[139,132,140],[63],[142,132,141],[],[83,143,132],[63],[82,144,132],[63],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Variable Declarator int size = ","Return Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Primitive Type boolean ","Simple Name readNull ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","This Expr ","ThisExpr","Block Stmt ","NOT_EQUALS","Char Literal Expr 'n' ","'n'","Method Call Expr ","Simple Name unreadByte ","Method Declaration ","ReturnStmt","Boolean Literal Expr false ","false","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Boolean Literal Expr true ","true","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readBoolean-JsonIterator-","callMethodNameReferTo":{"35":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int","27":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator","47":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int"},"num":144,"succs":[[19,1],[31,2],[33,5,3,32,22],[35,4],[10,5,41,42],[44,6],[33,23,45,7,9],[8,47],[10,41,52,9],[54],[12,16,14,18,15,13,11],[12],[],[14],[],[17],[],[],[5,0,9,1],[25],[21],[],[20],[20,22],[20,23],[26,20,27],[20],[29,21,28],[],[30],[],[3,4],[34],[],[],[38,39,36,37],[],[],[30],[40],[],[],[43],[],[8,7],[46],[],[48,51,50,49],[],[],[30],[40],[53],[],[60,56,55,57],[],[61,58],[59,24,63,62],[],[],[12,75,77,74,78,76,11],[],[61],[],[65,83],[66,96],[86,97,67,98,68],[100,68],[69,103],[70,112],[113,115,114,71,72],[116,72],[73,118],[126],[75],[],[81,58],[59,82],[73,65,64,69,68,72],[58],[59],[],[],[91],[85],[],[84],[84,86,66],[87],[87,88],[87,89],[84,92,93],[84],[95,85,94],[],[40],[67],[],[99],[],[101,87,102],[],[99],[109],[88,105],[],[104,107,89],[70],[106],[111,104,110],[104],[94,88,105],[71],[],[],[],[117,101,106],[107,94,89],[122],[120,108,90],[],[119],[124,119,123],[119],[120,108,125,90],[],[128,127],[],[129,63,130],[131,63,132],[143,142],[133,63,121],[61],[134,63,135],[136,63,137],[61],[139,63,138],[],[80,140,63],[61],[79,141,63],[61],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Primitive Type boolean ","Simple Name readBoolean ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","This Expr ","ThisExpr","Block Stmt ","Char Literal Expr 't' ","EQUALS","'t'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","ReturnStmt","Name Expr keys ","true","Block Stmt ","Char Literal Expr 'f' ","'f'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","Boolean Literal Expr false ","false","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readShort-JsonIterator-","callMethodNameReferTo":{},"num":141,"succs":[[15,1],[4,2,26],[27,3,28,4,29],[6,38,37],[5],[40],[8,14,10,11,12,9,7],[8],[],[10],[],[13],[],[],[0,1],[21],[17],[],[16,17],[18,2,17],[18,2,19,17],[22,23,17],[17],[24,25],[],[50,8,52,11,51,53,7],[3],[30,16,31],[],[34,18,31],[33,32],[],[],[],[35,36],[],[],[],[19,39],[],[43,46,42,41],[],[47,44],[48,45,20,49],[],[],[8,71,73,74,70,72,7],[],[47],[],[51],[],[],[54],[55,25,37],[58,57,56],[],[],[59],[],[61,79],[62,93],[94,82,95,64,63],[97,64],[65,100],[66,109],[110,112,111,67,68],[113,68],[69,115],[123],[71],[],[77,44],[45,78],[69,61,60,65,64,68],[44],[45],[],[],[87],[81],[],[80],[80,82,62],[83],[83,84],[83,85],[80,88,89],[80],[91,90,81],[],[92],[],[63],[],[96],[],[98,83,99],[],[96],[106],[84,102],[],[104,101,85],[66],[103],[108,101,107],[101],[90,84,102],[67],[],[],[],[114,98,103],[90,104,85],[119],[117,105,86],[],[116],[121,116,120],[116],[117,105,122,86],[],[125,124],[],[126,49,127],[128,49,129],[140,139],[130,49,118],[47],[131,49,132],[133,49,134],[47],[136,49,135],[],[76,137,49],[47],[75,138,49],[47],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Block Stmt ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Simple Name reset ","Simple Name readShort ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr v ","Simple Name v ","Name Expr v ","Name Expr v ","Name Expr v ","Variable Declarator int v = ","Primitive Type int ","Method Call Expr ","Simple Name readInt ","Method Declaration Throws ","Block Stmt ","Binary Expr LESS_EQUALS ","AND","Binary Expr LESS_EQUALS ","Field Access Expr ","LESS_EQUALS","Name Expr Short ","Simple Name MIN_VALUE ","Field Access Expr ","Name Expr Short ","Simple Name MAX_VALUE ","ReturnStmt","Cast Expr ","Primitive Type short ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Primitive Type int ","Simple Name readInt ","Class Or Interface Type IOException ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readInt ","This Expr ","ThisExpr","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readInt-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplNumber.java-readInt-IterImplNumber-JsonIterator"},"num":16,"succs":[[3,2,6,5,4,8,1],[2],[],[4],[],[7],[],[],[9],[11,10,0],[],[14,13,12],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type int ","Simple Name readInt ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readInt ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readLong-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplNumber.java-readLong-IterImplNumber-JsonIterator"},"num":16,"succs":[[4,2,6,8,5,3,1],[2],[],[4],[],[7],[],[],[9],[0,11,10],[],[13,12,14],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type long ","Simple Name readLong ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readLong ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readArray-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplArray.java-readArray-IterImplArray-JsonIterator"},"num":16,"succs":[[3,2,4,8,5,6,1],[2],[],[4],[],[7],[],[],[9],[11,0,10],[],[12,13,14],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type boolean ","Simple Name readArray ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplArray ","Simple Name readArray ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readNumberAsString-JsonIterator-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/IterImplForStreaming.java-readNumber-IterImplForStreaming-JsonIterator"},"num":30,"succs":[[10,1],[22,21,2],[7,4,5,6,9,3],[],[5],[],[8],[],[],[1,0],[14],[12],[],[11,12],[16,15,12],[12],[17,18,19],[],[],[20],[],[],[26,24,25,23],[],[11,27],[28],[13,29],[],[],[]],"attribute":["Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","Class Or Interface Type String ","Simple Name readNumberAsString ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr numberChars ","Simple Name numberChars ","Name Expr numberChars ","Variable Declarator IterImplForStreaming.numberChars numberChars = ","Class Or Interface Type numberChars ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readNumber ","This Expr ","ThisExpr","ReturnStmt","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Field Access Expr ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name chars ","Zero IntegerLiteralExpr","Simple Name charsLength "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"handle-JsonIterator.ReadArrayCallback-JsonIterator-Object","callMethodNameReferTo":{},"num":12,"succs":[[2,4,3,1,6,5],[2],[],[9,8],[11,10],[7],[],[],[],[],[],[]],"attribute":["Method Declaration Throws ","Primitive Type boolean ","Simple Name handle ","Parameter JsonIterator iter ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Class Or Interface Type JsonIterator ","Simple Name iter ","Class Or Interface Type Object ","Simple Name attachment "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readArrayCB-JsonIterator-ReadArrayCallback-Object","callMethodNameReferTo":{"19":"src/main/java/com/jsoniter/IterImplArray.java-readArrayCB-IterImplArray-JsonIterator-JsonIterator.ReadArrayCallback-Object"},"num":24,"succs":[[6,3,2,10,8,5,7,4,1],[2],[],[4],[],[16,13],[17,15],[9],[],[],[11],[0,19,18],[13],[],[15],[],[],[],[],[12,14,20,21,22],[],[],[23],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type boolean ","Simple Name readArrayCB ","Parameter ReadArrayCallback callback ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr callback ","Simple Name callback ","Name Expr attachment ","Simple Name attachment ","Class Or Interface Type ReadArrayCallback ","Class Or Interface Type Object ","ReturnStmt","Method Call Expr ","Name Expr IterImplArray ","Simple Name readArrayCB ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readString-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplString.java-readString-IterImplString-JsonIterator"},"num":16,"succs":[[3,2,6,8,5,4,1],[2],[],[4],[],[7],[],[],[9],[10,0,11],[],[13,14,12],[],[],[15],[]],"attribute":["Method Declaration ","PUBLIC","FINAL","Class Or Interface Type String ","Simple Name readString ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplString ","Simple Name readString ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readStringAsSlice-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImpl.java-readSlice-IterImpl-JsonIterator"},"num":16,"succs":[[3,4,2,8,6,5,1],[2],[],[4],[],[7],[],[],[9],[0,11,10],[],[12,13,14],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type Slice ","Simple Name readStringAsSlice ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImpl ","Simple Name readSlice ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readObject-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplObject.java-readObject-IterImplObject-JsonIterator"},"num":16,"succs":[[2,4,8,5,3,6,1],[2],[],[4],[],[7],[],[],[9],[11,0,10],[],[13,12,14],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type String ","Simple Name readObject ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplObject ","Simple Name readObject ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"handle-JsonIterator.ReadObjectCallback-JsonIterator-String-Object","callMethodNameReferTo":{},"num":15,"succs":[[5,3,2,4,6,7,1],[2],[],[9,10],[12,11],[13,14],[8],[],[],[],[],[],[],[],[]],"attribute":["Method Declaration Throws ","Primitive Type boolean ","Simple Name handle ","Parameter JsonIterator iter ","Parameter String field ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Class Or Interface Type JsonIterator ","Simple Name iter ","Class Or Interface Type String ","Simple Name field ","Class Or Interface Type Object ","Simple Name attachment "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readObjectCB-JsonIterator-ReadObjectCallback-Object","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/IterImplObject.java-readObjectCB-IterImplObject-JsonIterator-JsonIterator.ReadObjectCallback-Object"},"num":23,"succs":[[2,3,10,8,4,6,7,5,1],[2],[],[4],[],[12,15],[16,14],[9],[],[],[17],[12],[],[14],[],[],[],[18],[21,19,20,13,11],[],[],[22],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Void Type ","Simple Name readObjectCB ","Parameter ReadObjectCallback cb ","Parameter Object attachment ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr cb ","Simple Name cb ","Name Expr attachment ","Simple Name attachment ","Class Or Interface Type ReadObjectCallback ","Class Or Interface Type Object ","Expression Stmt ","Method Call Expr ","Name Expr IterImplObject ","Simple Name readObjectCB ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readFloat-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplNumber.java-readFloat-IterImplNumber-JsonIterator"},"num":16,"succs":[[3,2,8,5,4,6,1],[2],[],[4],[],[7],[],[],[9],[0,10,11],[],[12,14,13],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type float ","Simple Name readFloat ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readFloat ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readDouble-JsonIterator-","callMethodNameReferTo":{"11":"src/main/java/com/jsoniter/IterImplNumber.java-readDouble-IterImplNumber-JsonIterator"},"num":16,"succs":[[3,2,6,4,8,5,1],[2],[],[4],[],[7],[],[],[9],[10,0,11],[],[14,12,13],[],[],[15],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Primitive Type double ","Simple Name readDouble ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","ReturnStmt","Method Call Expr ","Name Expr IterImplNumber ","Simple Name readDouble ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readBigDecimal-JsonIterator-","callMethodNameReferTo":{"58":"src/main/java/com/jsoniter/IterImplForStreaming.java-readNumber-IterImplForStreaming-JsonIterator"},"num":199,"succs":[[19,1],[2,28],[20,29,30,3,5],[4,33],[37,5,10,36],[39,6],[8,41,40,22,7],[8,44],[9,52],[10,63,36],[12,13,14,15,16,18,11],[12],[],[14],[],[17],[],[],[8,0,9,5,1],[23],[21],[],[20,21],[21,25,24],[21],[26,27],[],[77,15,74,76,11,75],[3,4],[],[32,31],[],[],[34,35],[],[92,15,95,93,94,11],[],[38],[],[7],[],[42,43],[],[],[47,50,45,46],[],[51,48],[49,51],[],[],[12,112,114,111,115,113,11],[],[56],[54],[],[54,53],[58,57,54],[54],[61,59,60],[],[],[62],[],[67,65,66,64],[],[68,53],[69],[55,70],[],[],[],[78,72],[89,73],[82,27,36],[75],[],[],[73,71,72],[83],[81,80],[],[],[79],[84,85,79],[79],[80,86],[81,87,88],[],[62],[90,91],[],[186,12,187,188],[93],[],[],[96],[97],[99,98,100],[],[],[62],[102,120],[103,134],[123,135,136,105,104],[137,105],[106,140],[107,149],[150,152,151,108,109],[153,109],[110,155],[163],[112],[],[118,48],[49,119],[110,102,101,106,105,109],[48],[49],[],[],[128],[122],[],[121],[121,123,103],[124],[124,125],[124,126],[121,129,130],[121],[132,131,122],[],[133],[],[104],[],[69],[138,124,139],[],[69],[146],[125,142],[],[141,144,126],[107],[143],[148,141,147],[141],[131,125,142],[108],[],[],[],[154,138,143],[131,144,126],[159],[157,145,127],[],[156],[161,156,160],[156],[157,145,162,127],[],[165,164],[],[166,167,168],[169,167,170],[],[181,180],[171,167,158],[51],[172,167,173],[174,167,175],[51],[177,167,176],[],[117,178,167],[51],[116,179,167],[51],[],[],[189,183],[190,29,185,184,191],[192,185],[196],[187],[],[185,182],[184],[],[69],[50,194,193,195],[],[51,48],[49,51],[197,198],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type BigDecimal ","Simple Name readBigDecimal ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr valueType ","Simple Name valueType ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Method Call Expr ","Simple Name whatIsNext ","Method Declaration Throws ","Block Stmt ","EQUALS","Field Access Expr ","Name Expr ValueType ","Simple Name NULL ","Method Call Expr ","Simple Name skip ","Method Declaration Throws ","ReturnStmt","Null Literal Expr ","NullLiteralExpr","Block Stmt ","NOT_EQUALS","Field Access Expr ","Name Expr ValueType ","Simple Name NUMBER ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Variable Declaration Expr ","Name Expr numberChars ","Simple Name numberChars ","Name Expr numberChars ","Variable Declarator IterImplForStreaming.numberChars numberChars = ","Class Or Interface Type numberChars ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readNumber ","This Expr ","ThisExpr","Object Creation Expr BigDecimal Optional.empty Optional.empty ","Class Or Interface Type BigDecimal ","Field Access Expr ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name chars ","Zero IntegerLiteralExpr","Simple Name charsLength ","Expression Stmt ","Expression Stmt ","Return Stmt ","Class Or Interface Type ValueType ","Simple Name whatIsNext ","Class Or Interface Type IOException ","Block Stmt ","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueTypes ","Name Expr IterImpl ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Array Access Expr IterImpl.nextToken(this) ","Method Call Expr ","Simple Name nextToken ","This Expr ","Method Call Expr ","Simple Name unreadByte ","Method Declaration ","Void Type ","Simple Name skip ","Class Or Interface Type IOException ","Block Stmt ","Expression Stmt ","Method Call Expr ","Name Expr IterImplSkip ","Simple Name skip ","This Expr ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readBigInteger-JsonIterator-","callMethodNameReferTo":{"58":"src/main/java/com/jsoniter/IterImplForStreaming.java-readNumber-IterImplForStreaming-JsonIterator"},"num":201,"succs":[[19,1],[2,28],[20,29,3,5,30],[4,33],[37,10,5,36],[6,39],[41,40,22,7,8],[8,44],[9,52],[63,10,36],[14,12,13,16,18,15,11],[12],[],[14],[],[17],[],[],[9,1,5,8,0],[23],[21],[],[20,21],[24,21,25],[21],[26,27],[],[79,15,76,77,78,11],[3,4],[],[31,32],[],[],[35,34],[],[94,15,97,11,95,96],[],[38],[],[7],[],[42,43],[],[],[50,46,45,47],[],[51,48],[49,51],[],[],[12,114,116,117,113,115,11],[],[56],[54],[],[54,53],[58,54,57],[54],[60,61,59],[],[],[62],[],[64,65],[],[68,69,66,67],[],[70,53],[71],[55,72],[],[],[],[80,74],[91,75],[84,36,27],[77],[],[],[75,73,74],[85],[83,82],[],[],[81],[86,87,81],[81],[82,88],[83,89,90],[],[62],[92,93],[],[12,188,189,190],[95],[],[],[98],[99],[101,100,102],[],[],[62],[104,122],[105,136],[137,125,107,106,138],[139,107],[108,142],[109,151],[152,154,153,110,111],[155,111],[112,157],[165],[114],[],[120,48],[49,121],[112,104,103,108,107,111],[48],[49],[],[],[130],[124],[],[123],[123,125,105],[126],[126,127],[126,128],[123,131,132],[123],[134,133,124],[],[135],[],[106],[],[71],[140,126,141],[],[71],[148],[127,144],[],[146,143,128],[109],[145],[150,143,149],[143],[133,127,144],[110],[],[],[],[156,140,145],[133,146,128],[161],[159,147,129],[],[158],[163,158,162],[158],[159,147,164,129],[],[167,166],[],[168,169,170],[171,169,172],[],[183,182],[173,169,160],[51],[174,169,175],[176,169,177],[51],[179,169,178],[],[119,180,169],[51],[118,181,169],[51],[],[],[191,185],[192,29,187,186,193],[194,187],[198],[189],[],[187,184],[186],[],[71],[196,50,195,197],[],[51,48],[49,51],[199,200],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type BigInteger ","Simple Name readBigInteger ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr valueType ","Simple Name valueType ","Simple Name fillCache ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Method Call Expr ","Simple Name whatIsNext ","Method Declaration Throws ","Block Stmt ","EQUALS","Field Access Expr ","Name Expr ValueType ","Simple Name NULL ","Method Call Expr ","Simple Name skip ","Method Declaration Throws ","ReturnStmt","Null Literal Expr ","NullLiteralExpr","Block Stmt ","NOT_EQUALS","Field Access Expr ","Name Expr ValueType ","Simple Name NUMBER ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Variable Declaration Expr ","Name Expr numberChars ","Simple Name numberChars ","Name Expr numberChars ","Variable Declarator IterImplForStreaming.numberChars numberChars = ","Class Or Interface Type numberChars ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readNumber ","This Expr ","ThisExpr","Object Creation Expr BigInteger Optional.empty Optional.empty ","Class Or Interface Type BigInteger ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Field Access Expr ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name chars ","Zero IntegerLiteralExpr","Simple Name charsLength ","Expression Stmt ","Expression Stmt ","Return Stmt ","Class Or Interface Type ValueType ","Simple Name whatIsNext ","Class Or Interface Type IOException ","Block Stmt ","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueTypes ","Name Expr IterImpl ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Array Access Expr IterImpl.nextToken(this) ","Method Call Expr ","Simple Name nextToken ","This Expr ","Method Call Expr ","Simple Name unreadByte ","Method Declaration ","Void Type ","Simple Name skip ","Class Or Interface Type IOException ","Block Stmt ","Expression Stmt ","Method Call Expr ","Name Expr IterImplSkip ","Simple Name skip ","This Expr ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"readAny-JsonIterator-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/IterImpl.java-readAny-IterImpl-JsonIterator"},"num":114,"succs":[[1,14,2,13],[16,15,4],[22,23,3],[24],[6,10,7,8,9,12,5],[6],[],[8],[],[11],[],[],[0],[1],[21,2],[],[19,18,17],[],[],[20],[],[3],[],[],[30,25,27,26],[],[31,28],[29,31],[],[],[6,43,45,42,46,44,5],[],[33,51],[34,65],[54,66,67,36,35],[69,36],[37,72],[38,81],[82,84,83,39,40],[85,40],[41,87],[95],[43],[],[49,28],[29,50],[41,33,32,37,36,40],[28],[29],[],[],[59],[53],[],[52],[52,54,34],[55],[55,56],[55,57],[52,60,61],[52],[63,53,62],[],[64],[],[35],[],[68],[],[70,55,71],[],[68],[78],[56,74],[],[73,76,57],[38],[75],[80,73,79],[73],[62,56,74],[39],[],[],[],[86,70,75],[62,76,57],[91],[89,77,58],[],[88],[93,88,92],[88],[89,77,94,58],[],[97,96],[],[98,99,100],[101,99,102],[],[113,112],[103,99,90],[31],[104,99,105],[106,99,107],[31],[109,99,108],[],[48,110,99],[31],[47,111,99],[31],[],[]],"attribute":["Try Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type Any ","Simple Name readAny ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","ReturnStmt","Method Call Expr ","Name Expr IterImpl ","Simple Name readAny ","This Expr ","ThisExpr","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-","callMethodNameReferTo":{"259":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int","75":"src/main/java/com/jsoniter/IterImplForStreaming.java-readNumber-IterImplForStreaming-JsonIterator","269":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int","143":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int"},"num":407,"succs":[[53,42,1,54],[55,2],[35,30,27,4,3,40,7,23],[35,30,27,4,56,40,7,23],[5,63,6],[],[65,44,64,7],[10,15,8,22,63,11,14,9],[],[10,68],[80,11],[12,98],[99,13,72,14],[44,14,82,64],[15,100],[108,16],[17,22,110,109,111],[120,18],[19,130],[131,110,132,20,21],[44,141,21,64],[125,22,44,64],[44,64,23,84],[24,63,26,25],[],[143,26],[27,44,149,64],[63,29,28],[],[30,151,44,64],[32,31,33,63,34],[],[33,154],[163,34],[35,44,157,64],[37,36,63,39,38],[],[169,38],[178,39],[172,44,40,64],[41,63],[184],[195,196,43],[197],[46,50,52,48,47,49,45],[46],[],[48],[],[51],[],[],[0],[2,1],[42,194],[58],[],[56,3],[60,56,59],[56],[61,62],[],[207,49,204,205,45,206],[],[],[66,67],[],[46,222,224,225,49,45,223],[73],[70],[],[69,70],[71,70],[74,75,70],[70],[76,77,78],[],[],[79],[],[85],[69,71],[81],[81,82],[81,83],[81,86,87],[81],[89,90,88],[],[],[91,92,93,94],[],[69,95],[96],[97,71],[],[],[],[13],[],[106],[83],[101],[101,102],[103,101],[104,101,16],[83,101,107],[101],[17,18,21],[112,113,102],[],[116,117],[],[114,115,103],[],[],[104,119,118],[],[],[],[126],[105],[121],[121,122],[19,121,123],[121,124],[121,128,127],[121],[129,105],[],[20],[134,133,122],[138,123,137],[],[135,136],[],[],[],[140,139],[],[],[142,124],[],[147,146,145,144],[],[],[79],[148],[],[150],[],[153,152],[],[46,243,242,244,49,241,45],[158],[156,167],[],[155,156],[160,159,156],[156],[162,161],[],[148],[168,155,165,164],[],[166],[],[],[284,46,281,286,285,283,49,282,45],[173],[171,182],[],[170,171],[174,175,171],[171],[177,176],[],[148],[183,170,180,179],[],[181],[],[],[46,301,296,300,297,299,49,298,45],[190,187,186,185],[],[191,188],[189,57,193,192],[],[],[46,322,324,321,325,323,45],[],[191],[],[43],[],[],[190,198,200,199],[],[191,188],[189,191],[208,202],[219,203],[212,62,64],[205],[],[],[203,202,201],[213],[211,210],[],[],[209],[214,215,209],[209],[210,216],[211,217,218],[],[79],[220,221],[],[46,394,395,396],[223],[],[],[226],[64,67,227],[229,230,228],[],[],[79],[245,232],[256,233],[112,236,234,257,248],[259,235],[153,236,64,264],[266,237],[112,249,267,238,240],[239,269],[153,64,274,240],[276],[242],[],[],[236,231,240,232],[251],[247],[],[246],[246,248],[246,249],[252,246,253],[246],[255,247,254],[],[79],[234,235],[258],[],[262,260,263,261],[],[],[79],[148],[265],[],[239,238],[268],[],[270,273,272,271],[],[],[79],[148],[275],[],[278,190,277,279],[],[191,188],[189,250,193,280],[191],[282],[],[290,166],[291,167],[],[287],[168,292,64],[166],[167],[],[],[288,289,294,293,295],[],[],[79],[297],[],[181,304],[305,182],[],[306],[181],[182],[],[],[307],[308,310,309,303,302],[],[],[79],[312,330],[313,343],[344,333,315,314,345],[346,315],[316,349],[317,358],[359,361,360,318,319],[362,319],[320,364],[372],[322],[],[328,188],[189,329],[320,312,311,316,315,319],[188],[189],[],[],[338],[332],[],[331],[331,333,313],[334],[334,335],[334,336],[331,339,340],[331],[342,341,332],[],[148],[314],[],[96],[347,334,348],[],[96],[355],[335,351],[],[353,350,336],[317],[352],[357,350,356],[350],[341,335,351],[318],[],[],[],[363,347,352],[353,341,336],[368],[366,354,337],[],[365],[370,365,369],[365],[366,354,371,337],[],[374,373],[],[375,193,376],[377,193,378],[389,388],[379,193,367],[191],[380,193,381],[382,193,383],[191],[385,193,384],[],[327,386,193],[191],[326,387,193],[191],[],[],[397,391],[398,112,393,392,399],[400,393],[404],[395],[],[393,390],[392],[],[96],[402,190,401,403],[],[191,188],[189,191],[405,406],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Switch Stmt ","Name Expr valueType ","Switch Entry Stmt ","Name Expr STRING ","Return Stmt ","Switch Entry Stmt ","Name Expr NUMBER ","Expression Stmt ","Expression Stmt ","If Stmt ","Field Access Expr ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr AND ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Return Stmt ","Return Stmt ","Switch Entry Stmt ","Name Expr NULL ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Name Expr BOOLEAN ","Return Stmt ","Switch Entry Stmt ","Name Expr ARRAY ","Expression Stmt ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Name Expr OBJECT ","Expression Stmt ","Expression Stmt ","Return Stmt ","Switch Entry Stmt ","Throw Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type Object ","Simple Name read ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Simple Name fillCache ","Method Call Expr ","Simple Name whatIsNext ","Method Declaration Throws ","SwitchEntryStmt","ReturnStmt","Method Call Expr ","Simple Name readString ","Method Declaration ","Variable Declaration Expr ","Name Expr numberChars ","Simple Name numberChars ","Name Expr numberChars ","Name Expr numberChars ","Variable Declarator IterImplForStreaming.numberChars numberChars = ","Class Or Interface Type numberChars ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readNumber ","This Expr ","ThisExpr","Variable Declaration Expr ","Primitive Type double ","Name Expr number ","Name Expr number ","Class Or Interface Type String ","Variable Declarator Double number = ","Class Or Interface Type Double ","Method Call Expr ","Name Expr Double ","Simple Name valueOf ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Field Access Expr ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name chars ","Zero IntegerLiteralExpr","Simple Name charsLength ","Block Stmt ","Simple Name dotFound ","Variable Declaration Expr ","Simple Name doubleNumber ","Name Expr doubleNumber ","Name Expr doubleNumber ","Name Expr doubleNumber ","Name Expr doubleNumber ","Variable Declarator double doubleNumber = ","Primitive Type double ","Block Stmt ","Binary Expr EQUALS ","AND","Unary Expr ! ","EQUALS","Method Call Expr ","Name Expr Math ","Simple Name floor ","Method Call Expr ","LOGICAL_COMPLEMENT","Name Expr Double ","Simple Name isInfinite ","Variable Declaration Expr ","Simple Name longNumber ","Name Expr longNumber ","Name Expr longNumber ","Name Expr longNumber ","Name Expr longNumber ","Variable Declarator long longNumber = ","Primitive Type long ","Cast Expr ","Primitive Type long ","Block Stmt ","Binary Expr LESS_EQUALS ","Binary Expr GREATER_EQUALS ","LESS_EQUALS","Field Access Expr ","Name Expr Integer ","Simple Name MAX_VALUE ","GREATER_EQUALS","Field Access Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","Cast Expr ","Primitive Type int ","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Null Literal Expr ","NullLiteralExpr","Method Call Expr ","Simple Name readBoolean ","Method Declaration Throws ","Variable Declaration Expr ","Name Expr list ","Simple Name list ","Name Expr list ","Variable Declarator ArrayList list = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readArrayCB ","Name Expr fillArray ","Simple Name callback ","Simple Name attachment ","Method Declaration Throws ","Variable Declaration Expr ","Name Expr map ","Simple Name map ","Name Expr map ","Variable Declarator Map map = ","Class Or Interface Type Map ","Object Creation Expr HashMap Optional.empty Optional.empty ","Class Or Interface Type HashMap ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name readObjectCB ","Name Expr fillObject ","Simple Name cb ","Simple Name attachment ","Method Declaration Throws ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Return Stmt ","Class Or Interface Type ValueType ","Simple Name whatIsNext ","Class Or Interface Type IOException ","Block Stmt ","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueTypes ","Name Expr IterImpl ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Array Access Expr IterImpl.nextToken(this) ","Method Call Expr ","Simple Name nextToken ","This Expr ","Method Call Expr ","Simple Name unreadByte ","Method Declaration ","Class Or Interface Type String ","Simple Name readString ","Class Or Interface Type IOException ","Block Stmt ","Return Stmt ","Method Call Expr ","Name Expr IterImplString ","Simple Name readString ","This Expr ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Throw Stmt ","Primitive Type boolean ","Simple Name readBoolean ","Class Or Interface Type IOException ","Block Stmt ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","This Expr ","Block Stmt ","Char Literal Expr 't' ","'t'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","Name Expr keys ","true","Block Stmt ","Char Literal Expr 'f' ","'f'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","This Expr ","Integer Literal Expr Note Zero  ","Boolean Literal Expr false ","false","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Primitive Type boolean ","Simple Name readArrayCB ","Parameter ReadArrayCallback callback ","Parameter Object attachment ","Class Or Interface Type IOException ","Block Stmt ","Return Stmt ","Name Expr callback ","Name Expr attachment ","Class Or Interface Type ReadArrayCallback ","Class Or Interface Type Object ","Method Call Expr ","Name Expr IterImplArray ","Simple Name readArrayCB ","This Expr ","Void Type ","Simple Name readObjectCB ","Parameter ReadObjectCallback cb ","Parameter Object attachment ","Class Or Interface Type IOException ","Block Stmt ","Name Expr cb ","Name Expr attachment ","Class Or Interface Type ReadObjectCallback ","Class Or Interface Type Object ","Expression Stmt ","Method Call Expr ","Name Expr IterImplObject ","Simple Name readObjectCB ","This Expr ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","Integer Literal Expr Zero  ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-T","callMethodNameReferTo":{"51":"src/main/java/com/jsoniter/Codegen.java-getDecoder-Codegen-String-Type"},"num":168,"succs":[[1,21,22,5],[23,2],[29,3],[37,4],[48,7,47],[57,58,6],[59],[10,11,9,12,16,13,14,8],[9],[],[11],[],[20,18],[15],[],[],[0],[18],[],[17,18],[],[1,2,3,4],[56,5],[24,25,17],[26,27],[],[28],[],[],[33],[19],[30],[30,31],[34,30,35],[30],[19,36],[],[40],[31],[38],[42,38,41],[38],[44,43,31],[45,46],[],[],[75,73,74,72],[],[50,49],[],[51,53,52],[55,54,32,39],[],[28],[],[],[6],[],[],[65,62,61,60],[],[66,63],[64,66],[],[],[9,98,100,97,101,99,8],[],[],[76,69],[79,70,71,80,78],[71,82],[86,46,47],[],[74],[],[71,68],[70],[69],[],[],[81],[],[25,83,77],[84,85],[],[],[],[88,106],[89,120],[109,121,91,122,90],[124,91],[92,126],[93,135],[136,138,137,94,95],[139,95],[96,141],[149],[98],[],[104,63],[64,105],[96,88,87,92,91,95],[63],[64],[],[],[114],[108],[],[107],[107,109,89],[110],[110,111],[110,112],[107,115,116],[107],[118,117,108],[],[119],[],[90],[],[123],[],[25,110,125],[123],[132],[111,128],[],[127,130,112],[93],[129],[134,127,133],[127],[117,111,128],[94],[],[],[],[140,25,129],[117,130,112],[145],[143,131,113],[],[142],[147,142,146],[142],[143,131,148,113],[],[151,150],[],[152,153,154],[155,153,156],[],[167,166],[157,153,144],[66],[158,153,159],[160,153,161],[66],[163,153,162],[],[103,164,153],[66],[102,165,153],[66],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type T ","Simple Name read ","Parameter T existingObject ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr existingObject ","Simple Name existingObject ","Name Expr existingObject ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name existingObject ","ThisExpr","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class<?> clazz = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getClass ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","ReturnStmt","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Type Parameter T ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"currentConfig-JsonIterator-","callMethodNameReferTo":{"17":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getCurrentConfig-JsoniterSpi-"},"num":22,"succs":[[9,1],[12,2,3,13,11],[3,15],[21,4,20],[8,6,7,5],[],[7],[],[3,0],[2],[1],[],[],[14],[],[16,17,10],[],[18,19],[],[],[],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Method Declaration ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","ReturnStmt","Name Expr configCache "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-TypeLiteral<T>-T","callMethodNameReferTo":{"50":"src/main/java/com/jsoniter/Codegen.java-getDecoder-Codegen-String-Type"},"num":169,"succs":[[27,26,4,1],[2,28],[3,34],[47,6,46],[59,5,58],[60],[12,8,14,10,16,9,11,13,7],[8],[],[10],[],[22,18],[21,25],[15],[],[],[0],[18],[],[17,18],[21],[],[23,24],[],[],[],[3,2,1],[57,4],[30,20,29],[32,31],[],[33],[],[],[37],[17],[35],[39,35,38],[35],[41,40,42],[43,44],[],[17,45],[],[74,76,75,73],[],[],[48,49],[],[52,50,51],[55,53,54,36],[],[33],[],[],[19,56],[],[5],[],[],[66,61,63,62],[],[67,64],[65,67],[],[],[8,99,101,98,102,100,7],[],[],[77,70],[80,71,72,81,79],[72,83],[87,44,46],[],[75],[],[72,69],[71],[70],[],[],[82],[],[30,84,78],[85,86],[],[],[],[89,107],[90,121],[122,110,92,91,123],[125,92],[93,127],[94,136],[137,139,138,95,96],[140,96],[97,142],[150],[99],[],[105,64],[65,106],[97,89,88,93,92,96],[64],[65],[],[],[115],[109],[],[108],[108,110,90],[111],[111,112],[111,113],[108,116,117],[108],[119,118,109],[],[120],[],[91],[],[124],[],[30,111,126],[124],[133],[112,129],[],[131,128,113],[94],[130],[135,128,134],[128],[118,112,129],[95],[],[],[],[141,30,130],[131,118,113],[146],[144,132,114],[],[143],[148,143,147],[143],[144,132,149,114],[],[152,151],[],[153,154,155],[156,154,157],[],[168,167],[158,154,145],[67],[159,154,160],[161,154,162],[67],[164,154,163],[],[104,165,154],[67],[103,166,154],[67],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type T ","Simple Name read ","Parameter TypeLiteral<T> typeLiteral ","Parameter T existingObject ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr typeLiteral ","Simple Name typeLiteral ","Name Expr typeLiteral ","Name Expr existingObject ","Simple Name existingObject ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name existingObject ","ThisExpr","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Method Call Expr ","Simple Name currentConfig ","Method Declaration ","Simple Name getType ","ReturnStmt","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Method Call Expr ","Simple Name getType ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Type Parameter T ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-Class<T>","callMethodNameReferTo":{},"num":187,"succs":[[4,2,9,7,5,3,6,1],[2],[],[4],[],[13,12],[8],[],[],[10],[0,16,17],[12],[],[14,15],[],[],[],[18,19],[],[20,23,21],[],[24,11,22],[],[34,33,2,35,37,6,1,36],[],[],[27,41,42,31],[43,28],[49,29],[57,30],[67,23,16],[76,77,32],[78],[34],[],[40,22],[],[26],[22],[38,22],[],[27,28,29,30],[75,31],[44,45,38],[46,47],[],[48],[],[],[53],[39],[50],[50,51],[54,55,50],[50],[39,56],[],[60],[51],[58],[62,58,61],[58],[64,63,51],[65,66],[],[],[92,94,93,91],[69,68],[],[70,72,71],[74,73,52,59],[],[48],[],[],[32],[],[],[84,81,79,80],[],[85,82],[83,85],[],[],[2,117,119,116,120,118,1],[],[],[95,88],[98,89,90,99,97],[90,101],[105,66,16],[],[93],[],[90,87],[89],[88],[],[],[100],[],[45,102,96],[103,104],[],[],[],[107,125],[139,108],[128,140,141,110,109],[143,110],[111,145],[112,154],[155,157,156,113,114],[158,114],[115,160],[168],[117],[],[123,82],[83,124],[115,107,106,111,110,114],[82],[83],[],[],[133],[127],[],[126],[126,128,108],[129],[129,130],[129,131],[126,134,135],[126],[137,127,136],[],[138],[],[109],[],[142],[],[45,129,144],[142],[151],[130,147],[],[149,146,131],[112],[148],[153,146,152],[146],[136,130,147],[113],[],[],[],[159,45,148],[149,136,131],[164],[162,150,132],[],[161],[166,161,165],[161],[162,150,167,132],[],[170,169],[],[171,172,173],[174,172,175],[],[186,185],[176,172,163],[85],[177,172,178],[179,172,180],[85],[182,172,181],[],[122,183,172],[85],[121,184,172],[85],[],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type T ","Simple Name read ","Parameter Class<T> clazz ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr clazz ","Simple Name clazz ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","ReturnStmt","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Simple Name read ","Cast Expr ","Simple Name existingObject ","Method Declaration Throws ","Class Or Interface Type Type ","Type Parameter T ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Class Or Interface Type T ","Simple Name read ","Parameter T existingObject ","Class Or Interface Type IOException ","Block Stmt ","Name Expr existingObject ","Name Expr existingObject ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name existingObject ","ThisExpr","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class<?> clazz = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getClass ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Type Parameter T ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-TypeLiteral<T>","callMethodNameReferTo":{},"num":187,"succs":[[2,5,4,7,9,6,3,1],[2],[],[4],[],[13,12],[8],[],[],[10],[0,16,17],[12],[],[14,15],[],[],[],[19,18],[],[21,20,23],[],[22,24,11],[],[33,34,2,35,37,6,1,36],[],[],[27,41,42,31],[43,28],[49,29],[57,30],[67,23,16],[76,77,32],[78],[34],[],[40,22],[],[26],[22],[38,22],[],[27,28,29,30],[75,31],[44,45,38],[46,47],[],[48],[],[],[53],[39],[50],[50,51],[54,55,50],[50],[39,56],[],[60],[51],[58],[62,58,61],[58],[64,63,51],[65,66],[],[],[92,94,93,91],[69,68],[],[70,72,71],[74,73,52,59],[],[48],[],[],[32],[],[],[84,81,79,80],[],[85,82],[83,85],[],[],[2,117,119,116,120,118,1],[],[],[95,88],[98,89,90,99,97],[90,101],[105,66,16],[],[93],[],[90,87],[89],[88],[],[],[100],[],[45,102,96],[103,104],[],[],[],[107,125],[108,139],[140,128,141,110,109],[143,110],[111,145],[112,154],[155,157,156,113,114],[158,114],[115,160],[168],[117],[],[123,82],[83,124],[115,107,106,111,110,114],[82],[83],[],[],[133],[127],[],[126],[126,128,108],[129],[129,130],[129,131],[126,134,135],[126],[137,136,127],[],[138],[],[109],[],[142],[],[45,129,144],[142],[151],[130,147],[],[149,146,131],[112],[148],[153,146,152],[146],[136,130,147],[113],[],[],[],[159,45,148],[149,136,131],[164],[162,150,132],[],[161],[166,161,165],[161],[162,150,167,132],[],[170,169],[],[171,172,173],[174,172,175],[],[186,185],[176,172,163],[85],[177,172,178],[179,172,180],[85],[182,172,181],[],[122,183,172],[85],[121,184,172],[85],[],[]],"attribute":["Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type T ","Simple Name read ","Parameter TypeLiteral<T> typeLiteral ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr typeLiteral ","Simple Name typeLiteral ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","ReturnStmt","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Simple Name read ","Method Call Expr ","Simple Name existingObject ","Method Declaration Throws ","Simple Name getType ","Type Parameter T ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Class Or Interface Type T ","Simple Name read ","Parameter T existingObject ","Class Or Interface Type IOException ","Block Stmt ","Name Expr existingObject ","Name Expr existingObject ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name existingObject ","ThisExpr","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class<?> clazz = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getClass ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Type Parameter T ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"read-JsonIterator-Type","callMethodNameReferTo":{"33":"src/main/java/com/jsoniter/Codegen.java-getDecoder-Codegen-String-Type"},"num":151,"succs":[[3,20,19,1],[21,2],[5,32,31],[41,4,40],[42],[7,12,9,8,14,11,6,10],[7],[],[9],[],[16,18],[13],[],[],[0],[16],[],[15,16],[],[1,2],[3,39],[24],[15],[22],[26,25,22],[22],[28,27,15],[30,29],[],[],[55,57,56,54],[],[35,33,34],[37,23,36,17],[],[38],[],[],[],[4],[],[],[48,43,44,45],[],[49,46],[47,49],[],[],[7,81,83,80,84,82,6],[],[58,51],[61,52,53,62,60],[53,64],[69,30,31],[],[56],[],[53,50],[52],[51],[],[],[63],[],[65,66,59],[],[67,68],[],[],[],[71,89],[72,103],[92,104,74,105,73],[107,74],[75,109],[76,118],[119,121,120,77,78],[122,78],[79,124],[132],[81],[],[87,46],[47,88],[79,71,70,75,74,78],[46],[47],[],[],[97],[91],[],[90],[90,92,72],[93],[93,94],[93,95],[90,98,99],[90],[101,91,100],[],[102],[],[73],[],[106],[],[65,93,108],[106],[115],[94,111],[],[113,110,95],[76],[112],[117,110,116],[110],[100,94,111],[77],[],[],[],[123,65,112],[100,113,95],[128],[126,114,96],[],[125],[130,125,129],[125],[126,114,131,96],[],[134,133],[],[135,136,137],[138,136,139],[],[150,149],[140,136,127],[49],[141,136,142],[143,136,144],[49],[146,136,145],[],[86,147,136],[49],[85,148,136],[49],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Method Declaration Throws ","PUBLIC","FINAL","Class Or Interface Type Object ","Simple Name read ","Parameter Type type ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr type ","Simple Name type ","Name Expr type ","Class Or Interface Type Type ","Block Stmt ","Catch Clause ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","ThisExpr","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","PRIVATE","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"whatIsNext-JsonIterator-","callMethodNameReferTo":{"19":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator"},"num":132,"succs":[[11,1],[23,2],[15,26,3],[10,7,5,6,4,8],[31],[6],[],[9],[],[],[2,0,1],[16],[14,13],[],[],[12],[17,18,12],[12],[13,19],[14,20,21],[],[22],[],[24,25],[],[31,32,33,34],[],[35,28],[36,37,30,29,38],[40,30],[48],[],[33],[],[30,27],[29],[],[],[39],[],[46,42,41,43],[],[47,44],[45,47],[],[],[31,62,64,61,65,63,4],[],[49,50],[],[],[52,70],[53,84],[85,73,55,54,86],[87,55],[56,90],[57,99],[100,102,101,58,59],[103,59],[60,105],[113],[62],[],[68,44],[45,69],[60,52,51,56,55,59],[44],[45],[],[],[78],[72],[],[71],[71,73,53],[74],[74,75],[74,76],[71,79,80],[71],[82,72,81],[],[83],[],[54],[],[39],[88,74,89],[],[39],[96],[75,92],[],[91,94,76],[57],[93],[98,91,97],[91],[81,75,92],[58],[],[],[],[104,88,93],[81,94,76],[109],[107,95,77],[],[106],[111,106,110],[106],[107,95,112,77],[],[115,114],[],[116,117,118],[119,117,120],[],[131,130],[121,117,108],[47],[122,117,123],[124,117,125],[47],[127,117,126],[],[67,128,117],[47],[66,129,117],[47],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","Class Or Interface Type ValueType ","Simple Name whatIsNext ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name valueType ","Name Expr valueTypes ","Name Expr IterImpl ","Name Expr valueType ","Variable Declarator ValueType valueType = ","Class Or Interface Type ValueType ","Array Access Expr IterImpl.nextToken(this) ","Method Call Expr ","Simple Name nextToken ","This Expr ","ThisExpr","Method Call Expr ","Simple Name unreadByte ","Method Declaration ","ReturnStmt","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Expression Stmt ","FINAL","Void Type ","Simple Name unreadByte ","Block Stmt ","Block Stmt ","Name Expr head ","EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","Unary Expr -- ","Name Expr head ","POSTFIX_DECREMENT","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","ASSIGN","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","PLUS","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"skip-JsonIterator-","callMethodNameReferTo":{"9":"src/main/java/com/jsoniter/IterImplSkip.java-skip-IterImplSkip-JsonIterator"},"num":14,"succs":[[2,4,7,3,1,5],[],[3],[],[6],[],[],[8],[9],[11,10,12],[],[],[13],[]],"attribute":["Method Declaration Throws ","PUBLIC","Void Type ","Simple Name skip ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Method Call Expr ","Name Expr IterImplSkip ","Simple Name skip ","This Expr ","ThisExpr"]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-String-Class<T>","callMethodNameReferTo":{"38":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-","25":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config"},"num":59,"succs":[[1,25],[29,2,28],[31,3,30,4],[38],[7,10,12,9,6,11,13,8,5],[6],[7],[],[9],[],[15,20],[17,21],[19,22],[0,1],[15],[],[17],[],[19,35],[],[],[],[23,24],[],[],[14,26,27],[],[],[2],[3],[],[18,33,36,32],[],[34,16,37],[],[],[7,45,43,6,44,42,5,46],[],[40,39],[],[],[],[43],[],[34,50],[51,35],[47],[36,30,54],[34],[35],[],[52,53],[],[],[56,49,36,55],[],[34,57,48],[],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter Config config ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Name Expr clazz ","Simple Name clazz ","Class Or Interface Type Config ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name input ","Simple Name clazz ","Method Declaration ","Simple Name getBytes ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Type Parameter T ","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Name Expr clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-String-Class<T>","callMethodNameReferTo":{},"num":24,"succs":[[3,7,5,2,6,4,8,1],[2],[3],[],[5],[],[11,14],[15,13],[9],[0,18,19],[11],[],[13],[],[],[16,17],[],[],[],[21,12,0,20],[],[11,22,10],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Simple Name input ","Name Expr clazz ","Simple Name clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-String-TypeLiteral<T>","callMethodNameReferTo":{"38":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-","25":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config"},"num":59,"succs":[[1,25],[2,29,28],[4,3,31,30],[38],[10,8,7,12,6,13,11,5,9],[6],[7],[],[9],[],[15,20],[21,17],[22,19],[0,1],[15],[],[17],[],[35,19],[],[],[],[23,24],[],[],[26,14,27],[],[],[2],[3],[],[18,33,36,32],[],[34,16,37],[],[],[7,45,43,6,44,42,5,46],[],[40,39],[],[],[],[43],[],[34,50],[51,35],[47],[36,30,54],[34],[35],[],[52,53],[],[],[56,49,36,55],[],[34,57,48],[],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter Config config ","Parameter String input ","Parameter TypeLiteral<T> typeLiteral ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Name Expr typeLiteral ","Simple Name typeLiteral ","Class Or Interface Type Config ","Class Or Interface Type String ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name input ","Simple Name clazz ","Method Declaration ","Simple Name getBytes ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Type Parameter T ","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Name Expr clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-String-TypeLiteral<T>","callMethodNameReferTo":{},"num":44,"succs":[[3,8,7,6,5,2,4,1],[2],[3],[],[5],[],[14,11],[13,15],[9],[19,0,18],[11],[],[13,23],[],[],[16,17],[],[],[],[21,20,12,24],[],[22,25,10],[],[],[3,30,28,2,29,27,1,31],[],[],[28],[],[22,35],[36,23],[32],[24,18,39],[22],[23],[],[37,38],[],[],[41,34,24,40],[],[22,42,33],[],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter TypeLiteral<T> typeLiteral ","Block Stmt ","Return Stmt ","Name Expr input ","Simple Name input ","Name Expr typeLiteral ","Simple Name typeLiteral ","Class Or Interface Type String ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name input ","Simple Name clazz ","Method Declaration ","Simple Name getBytes ","Type Parameter T ","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Name Expr clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-byte[]-Class<T>","callMethodNameReferTo":{"37":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-","26":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config"},"num":58,"succs":[[26,1],[30,29,2],[4,3,31,32],[37],[7,11,12,9,6,13,10,8,5],[6],[7],[],[9],[],[15,20],[17,21],[19,23],[0,1],[15],[],[17,34],[],[19,35],[],[],[22],[],[25,24],[],[],[27,28,14],[],[],[2],[3],[],[33,16,36,18],[],[],[],[7,44,42,6,43,41,5,45],[39,38],[],[],[],[42],[],[34,49],[50,35],[46],[36,31,53],[34],[35],[],[51,52],[],[],[55,48,36,54],[],[34,56,47],[],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter Config config ","Parameter byte[] input ","Parameter Class<T> clazz ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Name Expr clazz ","Simple Name clazz ","Class Or Interface Type Config ","Array Type 1 ","Primitive Type byte ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Simple Name input ","Simple Name clazz ","Method Declaration ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Type Parameter T ","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Name Expr clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-byte[]-Class<T>","callMethodNameReferTo":{"81":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","54":"src/main/java/com/jsoniter/JsonIteratorPool.java-borrowJsonIterator-JsonIteratorPool-","103":"src/main/java/com/jsoniter/JsonIteratorPool.java-returnJsonIterator-JsonIteratorPool-JsonIterator","56":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]-int-int","73":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","93":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","253":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String"},"num":353,"succs":[[1,33],[2,43],[56,3],[4,13,64,11,65,67,66,9],[68,5],[6,77],[78,8,36,79,7],[81,8],[13,89,14,70],[10,91,92],[13,93],[98,12,99],[13,100],[103],[19,21,17,18,16,20,15,22],[17,16],[17],[],[19],[],[24,28],[30,27],[2,1,0,3],[41,24],[],[59,24,23],[27,75],[],[29],[],[32,31],[],[],[37],[23],[61,34],[35,34],[38,34,39],[34],[23,42,40],[],[],[117,118,116,119,120,16],[52],[45],[],[44],[44,46],[44,47],[48,44,6],[49,44],[44,50],[44,54,53],[44],[55,45],[],[25,57,58,35,62,46],[],[63,60],[],[],[],[17,175,179,177,178,174,176,15],[],[4,8,5],[90,9],[11,97],[13],[71],[26,47],[69],[69,73,72],[69],[74,76,26,47],[],[],[209,208,17,210,214,211,15,212],[7],[48,80],[],[],[49,87,82,83,84],[],[88,85],[86,88],[],[],[17,269,271,268,272,270,15],[],[],[10],[],[],[87,95,94,50,96],[],[88,85],[86,88],[12],[],[],[102,101],[],[],[51,104,105],[],[],[],[108,125,109,114],[131,109],[115,127,140,110,139],[111,142],[112,151],[113,153,154,152,114],[167,42,114,89],[141,109,128],[170,42,89],[16],[118],[],[41,123],[115,107],[41,122],[41,121],[124],[],[111,110],[121],[130,126],[127,126],[128,126],[129,126],[133,126,132],[126],[134,135,136],[137,121],[],[138],[],[],[],[63],[],[148],[129,122],[143],[143,144],[143,145],[146,143],[149,150,143],[143],[129,122],[113],[156,153,155],[],[147,79,165],[153,157,158],[146,163,79],[159,79,144],[79,145,161],[160],[],[162],[],[164],[],[166],[],[130,169,168],[],[138],[63],[187,172],[173,193],[197],[175],[],[59,183],[185,60],[61,186],[173,172,171],[59],[60],[61],[184],[],[],[],[189,180,188],[191,190],[],[192],[],[],[189,181,194],[196,195],[192],[],[189,182,198],[199,200],[192],[],[202,218,219,206],[220,203],[224,204],[232,205],[242,76,89],[251,252,207],[253],[209],[],[217,75],[213],[],[],[201],[75],[215,75],[],[202,203,204,205],[250,206],[221,189,215],[222,223],[192],[],[228],[216],[225],[225,226],[229,230,225],[225],[216,231],[],[235],[226],[233],[237,233,236],[233],[239,238,226],[240,241],[],[],[341,339,340,116],[244,243],[],[245,247,246],[249,248,227,234],[],[192],[],[],[207],[],[],[87,256,254,255],[],[88,85],[86,88],[],[259,277],[260,289],[290,280,262,261,291],[292,262],[263,294],[264,303],[304,306,305,265,266],[307,266],[267,309],[317],[269],[],[275,85],[86,276],[267,259,258,263,262,266],[85],[86],[],[],[285],[279],[],[278],[278,280,260],[281],[281,282],[281,283],[278,286,287],[278],[288,279,135],[138],[261],[],[63],[189,281,293],[63],[300],[282,296],[],[298,295,283],[264],[297],[302,295,301],[295],[135,282,296],[265],[],[],[],[308,189,297],[298,135,283],[313],[311,299,284],[],[310],[315,310,314],[310],[311,299,316,284],[],[319,318],[],[320,168,321],[322,168,323],[334,333],[324,168,312],[88],[325,168,326],[327,168,328],[88],[330,168,329],[],[274,331,168],[88],[273,332,168],[88],[],[],[342,336],[345,337,338,346,344],[338,348],[352,241,89],[340],[],[338,335],[337],[336],[],[],[347],[],[189,349,343],[350,351],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter byte[] input ","Parameter Class<T> clazz ","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Name Expr clazz ","Simple Name clazz ","Array Type 1 ","Primitive Type byte ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Variable Declaration Expr ","Simple Name lastNotSpacePos ","Name Expr lastNotSpacePos ","Name Expr lastNotSpacePos ","Variable Declarator int lastNotSpacePos = ","Primitive Type int ","Method Call Expr ","Simple Name findLastNotSpacePos ","Simple Name input ","Method Declaration ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Method Call Expr ","Simple Name reset ","Integer Literal Expr Zero  ","Simple Name buf ","Simple Name head ","Simple Name tail ","Method Declaration ","Zero IntegerLiteralExpr","Block Stmt ","Catch Clause ","Catch Clause ","Block Stmt ","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator T val = ","Class Or Interface Type T ","Method Call Expr ","Simple Name read ","Simple Name existingObject ","Method Declaration Throws ","Block Stmt ","Field Access Expr ","NOT_EQUALS","Simple Name head ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","ReturnStmt","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Type Parameter T ","For Stmt ","Variable Declaration Expr ","Binary Expr GREATER_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Unary Expr -- ","Return Stmt ","PRIVATE","Primitive Type int ","Simple Name findLastNotSpacePos ","Parameter byte[] input ","Block Stmt ","Name Expr input ","Name Expr input ","Array Type 1 ","Primitive Type byte ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","GREATER_EQUALS","Integer Literal Expr Zero  ","POSTFIX_DECREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Block Stmt ","Binary Expr AND ","AND","Binary Expr NOT_EQUALS ","Binary Expr AND ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Char Literal Expr ' ' ","' '","Char Literal Expr 't' ","'t'","Char Literal Expr 'n' ","'n'","Char Literal Expr 'r' ","'r'","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","Integer Literal Expr Zero  ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name reset ","Parameter byte[] buf ","Parameter int head ","Parameter int tail ","Block Stmt ","Primitive Type int ","Name Expr head ","Name Expr tail ","Array Type 1 ","Primitive Type byte ","Primitive Type int ","Primitive Type int ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name buf ","ThisExpr","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name tail ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Class Or Interface Type T ","Simple Name read ","Parameter T existingObject ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr existingObject ","Name Expr existingObject ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name existingObject ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class<?> clazz = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getClass ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Type Parameter T ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-byte[]-TypeLiteral<T>","callMethodNameReferTo":{"37":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-","26":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config"},"num":58,"succs":[[26,1],[30,2,29],[4,3,32,31],[37],[10,7,12,9,8,6,11,13,5],[6],[7],[],[9],[],[15,20],[21,17],[19,23],[1,0],[15],[],[34,17],[],[19,35],[],[],[22],[],[25,24],[],[],[28,27,14],[],[],[2],[3],[],[16,18,33,36],[],[],[],[7,44,42,6,43,41,5,45],[38,39],[],[],[],[42],[],[34,49],[50,35],[46],[36,31,53],[34],[35],[],[51,52],[],[],[55,48,36,54],[],[34,56,47],[],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter Config config ","Parameter byte[] input ","Parameter TypeLiteral<T> typeLiteral ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Name Expr typeLiteral ","Simple Name typeLiteral ","Class Or Interface Type Config ","Array Type 1 ","Primitive Type byte ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Simple Name input ","Simple Name clazz ","Method Declaration ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Type Parameter T ","Class Or Interface Type T ","Simple Name deserialize ","Parameter String input ","Parameter Class<T> clazz ","Block Stmt ","Return Stmt ","Name Expr input ","Name Expr clazz ","Class Or Interface Type String ","Class Or Interface Type Class ","Simple Name Class ","Class Or Interface Type T ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes ","Type Parameter T "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-byte[]-TypeLiteral<T>","callMethodNameReferTo":{"81":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","54":"src/main/java/com/jsoniter/JsonIteratorPool.java-borrowJsonIterator-JsonIteratorPool-","103":"src/main/java/com/jsoniter/JsonIteratorPool.java-returnJsonIterator-JsonIteratorPool-JsonIterator","56":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]-int-int","73":"src/main/java/com/jsoniter/JsonIterator.java-read-JsonIterator-T","93":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","253":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String"},"num":353,"succs":[[1,33],[2,43],[3,56],[9,13,66,11,4,67,64,65],[5,68],[77,6],[36,79,8,7,78],[8,81],[13,14,70,89],[92,10,91],[13,93],[99,12,98],[13,100],[103],[17,21,18,22,20,16,19,15],[17,16],[17],[],[19],[],[28,24],[30,27],[3,0,2,1],[41,24],[],[23,59,24],[27,75],[],[29],[],[31,32],[],[],[37],[23],[34,61],[34,35],[38,34,39],[34],[23,40,42],[],[],[117,118,116,119,120,16],[52],[45],[],[44],[46,44],[44,47],[44,48,6],[44,49],[50,44],[44,53,54],[44],[45,55],[],[46,58,25,62,35,57],[],[63,60],[],[],[],[17,175,179,177,178,174,176,15],[],[5,8,4],[9,90],[11,97],[13],[71],[26,47],[69],[73,69,72],[69],[26,76,47,74],[],[],[209,208,17,210,214,211,15,212],[7],[48,80],[],[],[87,83,84,49,82],[],[88,85],[86,88],[],[],[17,269,271,268,272,270,15],[],[],[10],[],[],[87,50,95,96,94],[],[88,85],[86,88],[12],[],[],[102,101],[],[],[104,51,105],[],[],[],[108,125,109,114],[131,109],[115,127,140,110,139],[111,142],[112,151],[113,153,154,152,114],[167,42,114,89],[141,109,128],[170,42,89],[16],[118],[],[41,123],[115,107],[41,122],[41,121],[124],[],[111,110],[121],[130,126],[127,126],[128,126],[129,126],[133,126,132],[126],[134,135,136],[137,121],[],[138],[],[],[],[63],[],[148],[129,122],[143],[143,144],[143,145],[146,143],[149,150,143],[143],[129,122],[113],[156,153,155],[],[147,79,165],[153,157,158],[146,163,79],[159,79,144],[79,145,161],[160],[],[162],[],[164],[],[166],[],[130,169,168],[],[138],[63],[187,172],[173,193],[197],[175],[],[59,183],[185,60],[61,186],[173,172,171],[59],[60],[61],[184],[],[],[],[189,180,188],[191,190],[],[192],[],[],[189,181,194],[196,195],[192],[],[189,182,198],[199,200],[192],[],[202,218,219,206],[220,203],[224,204],[232,205],[242,76,89],[251,252,207],[253],[209],[],[217,75],[213],[],[],[201],[75],[215,75],[],[202,203,204,205],[250,206],[221,189,215],[222,223],[192],[],[228],[216],[225],[225,226],[229,230,225],[225],[216,231],[],[235],[226],[233],[237,233,236],[233],[239,238,226],[240,241],[],[],[341,339,340,116],[244,243],[],[245,247,246],[249,248,227,234],[],[192],[],[],[207],[],[],[87,256,254,255],[],[88,85],[86,88],[],[259,277],[260,289],[290,280,262,261,291],[292,262],[263,294],[264,303],[304,306,305,265,266],[307,266],[267,309],[317],[269],[],[275,85],[86,276],[267,259,258,263,262,266],[85],[86],[],[],[285],[279],[],[278],[278,280,260],[281],[281,282],[281,283],[278,286,287],[278],[288,279,135],[138],[261],[],[63],[189,281,293],[63],[300],[282,296],[],[298,295,283],[264],[297],[302,295,301],[295],[135,282,296],[265],[],[],[],[308,189,297],[298,135,283],[313],[311,299,284],[],[310],[315,310,314],[310],[311,299,316,284],[],[319,318],[],[320,168,321],[322,168,323],[334,333],[324,168,312],[88],[325,168,326],[327,168,328],[88],[330,168,329],[],[274,331,168],[88],[273,332,168],[88],[],[],[342,336],[345,337,338,346,344],[338,348],[352,241,89],[340],[],[338,335],[337],[336],[],[],[347],[],[189,349,343],[350,351],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type T ","Simple Name deserialize ","Parameter byte[] input ","Parameter TypeLiteral<T> typeLiteral ","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Name Expr typeLiteral ","Simple Name typeLiteral ","Array Type 1 ","Primitive Type byte ","Class Or Interface Type TypeLiteral ","Simple Name TypeLiteral ","Class Or Interface Type T ","Variable Declaration Expr ","Simple Name lastNotSpacePos ","Name Expr lastNotSpacePos ","Name Expr lastNotSpacePos ","Variable Declarator int lastNotSpacePos = ","Primitive Type int ","Method Call Expr ","Simple Name findLastNotSpacePos ","Simple Name input ","Method Declaration ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Method Call Expr ","Simple Name reset ","Integer Literal Expr Zero  ","Simple Name buf ","Simple Name head ","Simple Name tail ","Method Declaration ","Zero IntegerLiteralExpr","Block Stmt ","Catch Clause ","Catch Clause ","Block Stmt ","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator T val = ","Class Or Interface Type T ","Method Call Expr ","Simple Name read ","Simple Name existingObject ","Method Declaration Throws ","Block Stmt ","Field Access Expr ","NOT_EQUALS","Simple Name head ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","ReturnStmt","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","Type Parameter T ","For Stmt ","Variable Declaration Expr ","Binary Expr GREATER_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Unary Expr -- ","Return Stmt ","PRIVATE","Primitive Type int ","Simple Name findLastNotSpacePos ","Parameter byte[] input ","Block Stmt ","Name Expr input ","Name Expr input ","Array Type 1 ","Primitive Type byte ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","GREATER_EQUALS","Integer Literal Expr Zero  ","POSTFIX_DECREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Block Stmt ","Binary Expr AND ","AND","Binary Expr NOT_EQUALS ","Binary Expr AND ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Char Literal Expr ' ' ","' '","Char Literal Expr 't' ","'t'","Char Literal Expr 'n' ","'n'","Char Literal Expr 'r' ","'r'","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","Integer Literal Expr Zero  ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name reset ","Parameter byte[] buf ","Parameter int head ","Parameter int tail ","Block Stmt ","Primitive Type int ","Name Expr head ","Name Expr tail ","Array Type 1 ","Primitive Type byte ","Primitive Type int ","Primitive Type int ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name buf ","ThisExpr","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name tail ","Try Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Class Or Interface Type T ","Simple Name read ","Parameter T existingObject ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr existingObject ","Name Expr existingObject ","Class Or Interface Type T ","Block Stmt ","Catch Clause ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name existingObject ","Variable Declaration Expr ","Simple Name clazz ","Name Expr clazz ","Name Expr clazz ","Variable Declarator Class<?> clazz = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name getClass ","Variable Declaration Expr ","Simple Name cacheKey ","Name Expr cacheKey ","Variable Declarator String cacheKey = ","Class Or Interface Type String ","Method Call Expr ","Method Call Expr ","Simple Name getDecoderCacheKey ","Simple Name currentConfig ","Method Declaration ","Cast Expr ","Class Or Interface Type T ","Method Call Expr ","Method Call Expr ","Simple Name decode ","This Expr ","Name Expr Codegen ","Simple Name getDecoder ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Type Parameter T ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Class Or Interface Type Config ","Simple Name currentConfig ","Block Stmt ","Block Stmt ","Name Expr configCache ","Name Expr configCache ","EQUALS","Null Literal Expr ","NullLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Name Expr configCache "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-String","callMethodNameReferTo":{"19":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config","31":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-"},"num":45,"succs":[[1,19],[22,23,2],[4,25,3,24],[31],[7,8,9,11,6,12,10,5],[6],[7],[],[9],[],[14,17],[18,16],[0,1],[14],[],[16],[],[],[],[21,20,13],[],[],[2],[3],[],[29,26,27],[],[15,30,28],[],[35,7,34,6,36,37,5],[],[32,33],[],[],[35],[],[40,28],[38],[29,41,24],[28],[],[42,29,43],[],[39,44,28],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type Any ","Simple Name deserialize ","Parameter Config config ","Parameter String input ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Class Or Interface Type Config ","Class Or Interface Type String ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name input ","Method Declaration ","Simple Name getBytes ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Class Or Interface Type Any ","Simple Name deserialize ","Parameter String input ","Block Stmt ","Return Stmt ","Name Expr input ","Class Or Interface Type String ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-String","callMethodNameReferTo":{},"num":17,"succs":[[3,5,4,2,7,6,1],[2],[3],[],[5],[],[11,10],[8],[0,13,12],[10],[],[],[],[14,0,15],[],[9,16,10],[]],"attribute":["Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type Any ","Simple Name deserialize ","Parameter String input ","Block Stmt ","Return Stmt ","Name Expr input ","Simple Name input ","Class Or Interface Type String ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-Config-byte[]","callMethodNameReferTo":{"20":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config","30":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-clearCurrentConfig-JsoniterSpi-"},"num":44,"succs":[[20,1],[23,2,24],[26,4,3,25],[30],[10,7,9,11,6,12,8,5],[6],[7],[],[9],[],[17,14],[16,18],[1,0],[14],[],[16,28],[],[],[19],[],[13,22,21],[],[],[2],[3],[],[29,15,27],[],[],[34,7,33,6,35,36,5],[32,31],[],[],[34],[],[39,28],[37],[29,40,25],[28],[],[41,29,42],[],[38,43,28],[]],"attribute":["Expression Stmt ","Try Stmt ","Return Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type Any ","Simple Name deserialize ","Parameter Config config ","Parameter byte[] input ","Block Stmt ","Name Expr config ","Simple Name config ","Name Expr input ","Simple Name input ","Class Or Interface Type Config ","Array Type 1 ","Primitive Type byte ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig ","Block Stmt ","Block Stmt ","ReturnStmt","Method Call Expr ","Simple Name deserialize ","Simple Name input ","Method Declaration ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name clearCurrentConfig ","Class Or Interface Type Any ","Simple Name deserialize ","Parameter String input ","Block Stmt ","Return Stmt ","Name Expr input ","Class Or Interface Type String ","Method Call Expr ","Simple Name deserialize ","Method Call Expr ","Simple Name getBytes "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"deserialize-JsonIterator-byte[]","callMethodNameReferTo":{"48":"src/main/java/com/jsoniter/JsonIteratorPool.java-borrowJsonIterator-JsonIteratorPool-","96":"src/main/java/com/jsoniter/JsonIteratorPool.java-returnJsonIterator-JsonIteratorPool-JsonIterator","50":"src/main/java/com/jsoniter/JsonIterator.java-reset-JsonIterator-byte[]-int-int","67":"src/main/java/com/jsoniter/JsonIterator.java-readAny-JsonIterator-","212":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","86":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String","74":"src/main/java/com/jsoniter/JsonIterator.java-reportError-JsonIterator-String-String"},"num":293,"succs":[[1,27],[2,37],[50,3],[13,60,59,58,61,4,9,11],[5,62],[6,70],[72,8,7,71,30],[8,74],[13,64,82,14],[84,10,85],[13,86],[91,12,92],[13,93],[96],[19,17,20,16,21,18,15],[17,16],[17],[],[19],[],[23,25],[2,0,1,3],[35,23],[],[22,53,23],[26],[],[31],[22],[28,55],[29,28],[33,32,28],[28],[22,36,34],[],[],[109,110,108,111,112,16],[46],[39],[],[38],[38,40],[38,41],[6,38,42],[38,43],[38,44],[47,38,48],[38],[39,49],[],[51,52,40,29,24,56],[],[57,54],[],[],[],[167,17,169,171,170,166,168,15],[],[5,8,4],[9,83],[90,11],[13],[65],[41],[63],[67,63,66],[63],[68,41,69],[],[197,200,17,198,199,202,15],[7],[73,42],[],[],[80,76,43,77,75],[],[81,78],[79,81],[],[],[17,227,229,226,230,228,15],[],[],[10],[],[],[87,80,88,44,89],[],[81,78],[79,81],[12],[],[],[95,94],[],[],[45,97,98],[],[],[100,117,101,106],[123,101],[107,119,132,102,131],[103,134],[104,143],[105,145,146,144,106],[159,36,106,82],[133,101,120],[162,36,82],[16],[110],[],[35,115],[107,99],[35,114],[35,113],[116],[],[103,102],[113],[122,118],[119,118],[120,118],[121,118],[125,118,124],[118],[126,127,128],[113,129],[],[130],[],[],[],[57],[],[140],[121,114],[135],[135,136],[135,137],[138,135],[141,135,142],[135],[121,114],[105],[148,145,147],[],[139,72,157],[145,149,150],[138,155,72],[151,72,136],[72,137,153],[152],[],[154],[],[156],[],[158],[],[122,160,161],[],[130],[57],[179,164],[165,185],[189],[167],[],[53,175],[54,177],[55,178],[165,164,163],[53],[54],[55],[176],[],[],[],[181,172,180],[183,182],[],[184],[],[],[181,173,186],[188,187],[184],[],[181,174,190],[191,192],[184],[],[194,204,195,203],[205,82,69],[210,211,196],[212],[198],[],[201],[],[],[193],[194],[209,195],[208,207,206],[],[],[184],[196],[],[],[80,213,215,214],[],[81,78],[79,81],[217,235],[218,247],[248,238,220,219,249],[250,220],[221,252],[222,261],[262,264,263,223,224],[265,224],[225,267],[275],[227],[],[233,78],[79,234],[225,217,216,221,220,224],[78],[79],[],[],[243],[237],[],[236],[236,238,218],[239],[239,240],[239,241],[236,244,245],[236],[246,127,237],[130],[219],[],[57],[181,239,251],[57],[258],[240,254],[],[253,256,241],[222],[255],[260,253,259],[253],[127,240,254],[223],[],[],[],[266,181,255],[127,256,241],[271],[269,257,242],[],[268],[273,268,272],[268],[269,257,274,242],[],[277,276],[],[278,160,279],[280,160,281],[292,291],[282,160,270],[81],[283,160,284],[285,160,286],[81],[288,160,287],[],[232,289,160],[81],[231,290,160],[81],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Throw Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Parameter IOException e ","Throw Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","FINAL","Class Or Interface Type Any ","Simple Name deserialize ","Parameter byte[] input ","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Array Type 1 ","Primitive Type byte ","Variable Declaration Expr ","Simple Name lastNotSpacePos ","Name Expr lastNotSpacePos ","Name Expr lastNotSpacePos ","Variable Declarator int lastNotSpacePos = ","Primitive Type int ","Method Call Expr ","Simple Name findLastNotSpacePos ","Simple Name input ","Method Declaration ","Variable Declaration Expr ","Simple Name iter ","Name Expr JsonIteratorPool ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Simple Name borrowJsonIterator ","Method Call Expr ","Simple Name reset ","Integer Literal Expr Zero  ","Simple Name buf ","Simple Name head ","Simple Name tail ","Method Declaration ","Zero IntegerLiteralExpr","Block Stmt ","Catch Clause ","Catch Clause ","Block Stmt ","Variable Declaration Expr ","Simple Name val ","Name Expr val ","Variable Declarator Any val = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name readAny ","Method Declaration Throws ","Block Stmt ","Field Access Expr ","NOT_EQUALS","Simple Name head ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Simple Name op ","Simple Name msg ","Method Declaration ","StringLiteralExpr","ReturnStmt","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Block Stmt ","Class Or Interface Type IOException ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e ","Method Call Expr ","Name Expr JsonIteratorPool ","Simple Name returnJsonIterator ","For Stmt ","Variable Declaration Expr ","Binary Expr GREATER_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Unary Expr -- ","Return Stmt ","PRIVATE","Primitive Type int ","Simple Name findLastNotSpacePos ","Parameter byte[] input ","Block Stmt ","Name Expr input ","Name Expr input ","Array Type 1 ","Primitive Type byte ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","GREATER_EQUALS","Integer Literal Expr Zero  ","POSTFIX_DECREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Block Stmt ","Binary Expr AND ","AND","Binary Expr NOT_EQUALS ","Binary Expr AND ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Char Literal Expr ' ' ","' '","Char Literal Expr 't' ","'t'","Char Literal Expr 'n' ","'n'","Char Literal Expr 'r' ","'r'","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","Integer Literal Expr Zero  ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name reset ","Parameter byte[] buf ","Parameter int head ","Parameter int tail ","Block Stmt ","Primitive Type int ","Name Expr head ","Name Expr tail ","Array Type 1 ","Primitive Type byte ","Primitive Type int ","Primitive Type int ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","This Expr ","Simple Name buf ","ThisExpr","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name head ","Assign Expr ASSIGN ","Field Access Expr ","This Expr ","Simple Name tail ","Try Stmt ","Return Stmt ","Parameter ArrayIndexOutOfBoundsException e ","Throw Stmt ","Class Or Interface Type Any ","Simple Name readAny ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr IterImpl ","Simple Name readAny ","This Expr ","Block Stmt ","Class Or Interface Type ArrayIndexOutOfBoundsException ","Simple Name e ","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Expression Stmt ","If Stmt ","Name Expr lastParsedPos ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Class Or Interface Type JsonException ","Simple Name reportError ","Parameter String op ","Parameter String msg ","Block Stmt ","Name Expr op ","Name Expr msg ","Class Or Interface Type String ","Class Or Interface Type String ","Variable Declaration Expr ","Simple Name peekStart ","Name Expr head ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Name Expr peekStart ","Variable Declarator int peekStart = ","Primitive Type int ","Binary Expr MINUS ","Integer Literal Expr Note Zero  ","Block Stmt ","LESS","Integer Literal Expr Zero  ","Binary Expr EQUALS ","Integer Literal Expr Zero  ","Variable Declaration Expr ","Simple Name peekSize ","Name Expr head ","Name Expr peekSize ","Null Literal Expr ","Name Expr peekSize ","Variable Declarator int peekSize = ","Primitive Type int ","Binary Expr MINUS ","Block Stmt ","Name Expr head ","GREATER","Name Expr tail ","Assign Expr ASSIGN ","Binary Expr MINUS ","Variable Declaration Expr ","Simple Name peek ","Name Expr buf ","Name Expr peek ","Variable Declarator String peek = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Binary Expr PLUS ","Binary Expr PLUS ","Object Creation Expr String Optional.empty Optional.empty ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr head ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Class Or Interface Type String ","Name Expr buf "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"findLastNotSpacePos-JsonIterator-byte[]","callMethodNameReferTo":{},"num":70,"succs":[[1,21,2,7],[27,2],[8,23,36,3,35],[4,39],[5,48],[6,50,51,49,7],[66,9,7,65],[38,2,24],[69,9,65],[12,13,10,14,15,11],[11],[],[13],[],[17,19],[8,0],[17,18],[],[17,16],[20],[],[4,3],[16],[26,22],[23,22],[24,22],[25,22],[29,28,22],[22],[30,31,32],[16,33],[],[34],[],[],[],[37],[],[],[45],[25,18],[40],[40,41],[40,42],[43,40],[46,40,47],[40],[25,18],[6],[53,50,52],[],[44,56,63],[50,54,55],[43,61,56],[57,56,41],[56,42,59],[],[58],[],[60],[],[62],[],[64],[],[],[26,68,67],[],[34],[37]],"attribute":["For Stmt ","Variable Declaration Expr ","Binary Expr GREATER_EQUALS ","Expression Stmt ","If Stmt ","Binary Expr AND ","Return Stmt ","Unary Expr -- ","Return Stmt ","Method Declaration ","PRIVATE","STATIC","Primitive Type int ","Simple Name findLastNotSpacePos ","Parameter byte[] input ","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Array Type 1 ","Primitive Type byte ","Block Stmt ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Binary Expr MINUS ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","GREATER_EQUALS","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","POSTFIX_DECREMENT","Variable Declaration Expr ","Simple Name c ","Name Expr c ","Name Expr c ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Array Access Expr i ","Block Stmt ","Binary Expr AND ","AND","Binary Expr NOT_EQUALS ","Binary Expr AND ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","Binary Expr NOT_EQUALS ","NOT_EQUALS","Char Literal Expr ' ' ","' '","Char Literal Expr 't' ","'t'","Char Literal Expr 'n' ","'n'","Char Literal Expr 'r' ","'r'","ReturnStmt","Binary Expr PLUS ","PLUS","Integer Literal Expr Note Zero  ","Integer Literal Expr Zero  "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"setMode-JsonIterator-DecodingMode","callMethodNameReferTo":{"25":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-getDefaultConfig-JsoniterSpi-","28":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setDefaultConfig-JsoniterSpi-Config","31":"src/main/java/com/jsoniter/spi/JsoniterSpi.java-setCurrentConfig-JsoniterSpi-Config"},"num":34,"succs":[[1,13],[2,28],[31],[5,8,7,6,9,4],[5],[],[7],[],[11,12],[1,2,0],[11],[],[],[18],[10,15],[],[14],[16,14],[19,14,20],[14],[22,21],[24,10,23],[],[25,26],[],[15,27],[],[],[30,29,16],[],[],[32,33,17],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","STATIC","Void Type ","Simple Name setMode ","Parameter DecodingMode mode ","Block Stmt ","Name Expr mode ","Simple Name mode ","Class Or Interface Type DecodingMode ","Variable Declaration Expr ","Simple Name newConfig ","Name Expr JsoniterSpi ","Name Expr newConfig ","Name Expr newConfig ","Variable Declarator Config newConfig = ","Class Or Interface Type Config ","Method Call Expr ","Method Call Expr ","Simple Name build ","Method Call Expr ","Simple Name decodingMode ","Method Call Expr ","Simple Name copyBuilder ","Simple Name getDefaultConfig ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setDefaultConfig ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name setCurrentConfig "]}
{"fileName":"src/main/java/com/jsoniter/JsonIterator.java","version":"0.9.22","methodName":"enableStreamingSupport-JsonIterator-","callMethodNameReferTo":{"26":"src/main/java/com/jsoniter/DynamicCodegen.java-enableStreamingSupport-DynamicCodegen-"},"num":39,"succs":[[1,16],[2,3],[10,3,17],[18,4],[6,8,23,5,25,24],[26],[7,31,30],[32],[9,35,34],[36],[14,13,12,15,11],[12],[],[14],[],[4,3,0],[2],[],[20,21,19],[],[],[22],[],[5],[6,29],[33,8],[10,27,28],[],[],[7],[],[],[],[9],[],[],[37,38],[],[]],"attribute":["If Stmt ","Name Expr isStreamingEnabled ","Return Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Parameter JsonException e ","Throw Stmt ","Parameter Exception e ","Throw Stmt ","Method Declaration ","PUBLIC","STATIC","Void Type ","Simple Name enableStreamingSupport ","Block Stmt ","Block Stmt ","ReturnStmt","Assign Expr ASSIGN ","Name Expr isStreamingEnabled ","ASSIGN","Boolean Literal Expr true ","true","Block Stmt ","Catch Clause ","Catch Clause ","Method Call Expr ","Name Expr DynamicCodegen ","Simple Name enableStreamingSupport ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Name Expr e ","Block Stmt ","Class Or Interface Type Exception ","Simple Name e ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","Name Expr e "]}
