{"fileName":"src/main/java/com/jsoniter/IterImplString.java","version":"0.9.22","hasMethodName":["readString-IterImplString-JsonIterator","parse-IterImplString-JsonIterator","translateHex-IterImplString-byte","findSliceEnd-IterImplString-JsonIterator"]}
{"fileName":"src/main/java/com/jsoniter/IterImplString.java","version":"0.9.22","methodName":"readString-IterImplString-JsonIterator","callMethodNameReferTo":{"36":"src/main/java/com/jsoniter/IterImpl.java-nextToken-IterImpl-JsonIterator","46":"src/main/java/com/jsoniter/IterImpl.java-skipFixedBytes-IterImpl-JsonIterator-int"},"num":213,"succs":[[1,28],[2,38],[3,31,39,40,8],[42,4],[43,7,5,44,32],[6,46],[10,7,52,51],[54,8],[63,9],[10,72,51],[15,13,16,20,14,12,17,18,11],[12],[13],[],[15],[],[27,22],[19],[],[],[0,1,9,8],[22],[],[21,22],[23,22],[24,70,22],[25,22],[],[34],[21,30],[],[29],[2,31,29],[2,29,32],[35,36,29],[29],[21,37,30],[],[3,7],[],[41],[],[5,6],[],[45],[],[23,48,49,47],[],[],[50],[],[],[53],[],[57,24,56,55],[],[58],[59,60,61],[],[58],[],[62,33],[],[66],[25],[64],[64,67,68],[64],[71,25,69],[],[],[102,101,12,105,17,104,103,106],[75,74,73,65],[],[26,76],[77],[],[],[121,79],[80,128],[136,81],[148,82],[84,152,94,83],[84,158],[85,95,161,153,141],[86,163],[87,168],[125,90,43,88,169],[170,89],[71,90,156,51],[173,91],[93,174,92,161,175],[95,180],[181,94],[84,162,155],[96,187],[194,97],[196,98,195,100,130],[99,198],[100,205],[71,210,51],[12],[103],[],[120,70],[],[95,80,100,82,78,96,81,79],[70],[70,107],[70,108],[70,109,113],[70,113,110,112],[129,123],[114,111],[122,126],[113],[97,115,113],[118,116,97,113],[131,129,97],[117],[],[124],[114,123,110,124],[129,112],[127],[122],[125,122],[124],[132],[107],[129,112],[129,97,130],[133,129,134],[129],[135,107],[],[142],[108],[139,140,137,109],[],[137],[138],[143,137,144],[137],[146,145],[147,108],[],[],[149,150,138],[],[139,140,151,109],[],[85,90,86,93],[157,154],[],[157,153,154],[157,154,155],[156,114,154],[160,159,154],[154],[77],[],[],[164,149,122],[166,165],[167,110],[162,123],[],[89,88],[41],[149,171,112],[172,111],[],[92],[176],[50],[126,177,178],[],[179],[],[],[183,149,182],[157,184],[114,186],[113,185],[],[],[191],[131,116,189],[],[188],[193,189,192],[189],[77],[98,99],[],[115,197],[],[149,188,199],[201,202,200],[131,203,201],[],[50],[116,204],[],[207,149,206],[117,208],[118,201,209],[],[50],[190,119,211,212],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Throw Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","FINAL","Class Or Interface Type String ","Simple Name readString ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Simple Name ctor ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Variable Declaration Expr ","Simple Name c ","Name Expr IterImpl ","Name Expr c ","Integer Literal Expr Zero  ","Name Expr c ","Variable Declarator byte c = ","Primitive Type byte ","Method Call Expr ","Simple Name nextToken ","Block Stmt ","NOT_EQUALS","Char Literal Expr ''' ","'''","Block Stmt ","EQUALS","Name Expr len ","'n'","Method Call Expr ","Name Expr IterImpl ","Simple Name skipFixedBytes ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","ReturnStmt","Null Literal Expr ","NullLiteralExpr","Method Call Expr ","Class Or Interface Type NotFoundAny ","String Literal Expr Not Empty  ","Binary Expr PLUS ","StringLiteralExpr","String Literal Expr Not Empty  ","PLUS","Cast Expr ","Primitive Type char ","Class Or Interface Type Map ","Simple Name j ","Name Expr j ","Variable Declarator int j = ","Class Or Interface Type Any ","Method Call Expr ","Simple Name parse ","Simple Name iter ","Method Declaration Throws ","Object Creation Expr String Optional.empty Optional.empty ","Class Or Interface Type String ","Field Access Expr ","Integer Literal Expr Zero  ","Simple Name reusableChars ","Zero IntegerLiteralExpr","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Simple Name fillCache ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Assign Expr ASSIGN ","Simple Name buffer ","Expression Stmt ","Unary Expr ++ ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Return Stmt ","PRIVATE","Primitive Type int ","Name Expr lines ","Name Expr bufLengthMinusTwo ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr type ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr c ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Simple Name append ","Name Expr c ","Name Expr i ","Simple Name c ","Name Expr c ","Name Expr c ","This Expr ","Assign Expr ASSIGN ","Simple Name i ","Name Expr i ","Name Expr i ","Binary Expr EQUALS ","Primitive Type int ","Field Access Expr ","Null Literal Expr ","Variable Declaration Expr ","Name Expr count ","Name Expr bound ","Name Expr IterImpl ","Name Expr bound ","Name Expr bound ","Return Stmt ","Name Expr buf ","Field Access Expr ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name updateStringCopyBound ","Block Stmt ","Name Expr j ","Simple Name j ","Integer Literal Expr Note Zero  ","Name Expr j ","Name Expr j ","Variable Declarator int j = ","Primitive Type int ","Integer Literal Expr Zero  ","LESS","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Name Expr val ","Block Stmt ","Name Expr buf ","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","Block Stmt ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr XOR ","XOR","Simple Name iter ","''","break;","Assign Expr ASSIGN ","Assign Expr ASSIGN ","Cast Expr ","Field Access Expr ","Simple Name reusableChars ","Primitive Type char ","Variable Declaration Expr ","Name Expr alreadyCopied ","Simple Name alreadyCopied ","Name Expr alreadyCopied ","Variable Declarator int alreadyCopied = ","Class Or Interface Type Any ","Integer Literal Expr Zero  ","Block Stmt ","GREATER","Field Access Expr ","Char Literal Expr 'n' ","Assign Expr ASSIGN ","Binary Expr MINUS ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Variable Declarator int level = ","Name Expr level ","Simple Name head ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr IterImpl ","Simple Name readStringSlowPath "]}
{"fileName":"src/main/java/com/jsoniter/IterImplString.java","version":"0.9.22","methodName":"parse-IterImplString-JsonIterator","callMethodNameReferTo":{"77":"src/main/java/com/jsoniter/IterImpl.java-updateStringCopyBound-IterImpl-JsonIterator-int","142":"src/main/java/com/jsoniter/IterImpl.java-readStringSlowPath-IterImpl-JsonIterator-int"},"num":145,"succs":[[48,1],[2,55],[63,3],[75,4],[6,79,16,5],[6,85],[7,17,89,80,68],[8,91],[96,9],[52,97,12,10,98],[100,11],[23,12,83,103],[104,13],[15,14,105,89,106],[17,112],[113,16],[6,90,82],[18,119],[126,19],[128,20,127,22,57],[21,130],[22,137],[142,23,103],[26,24,30,25,29,28,27,32],[25],[],[27],[],[47,34],[31],[],[],[17,22,2,4,0,18,1,3],[34],[],[34,33],[34,35],[34,36,40],[34,40,37,39],[56,50],[41,38],[49,53],[40],[19,42,40],[45,43,19,40],[58,56,19],[44],[],[51],[41,50,37,51],[56,39],[54],[49],[52,49],[51],[59],[33],[56,39],[56,19,57],[60,56,61],[56],[62,33],[],[69],[35],[66,67,64,36],[],[64],[65],[70,71,64],[64],[73,72],[74,35],[],[],[76,77,65],[],[66,67,78,36],[],[7,8,12,15],[84,81],[],[84,80,81],[84,81,82],[83,41,81],[87,86,81],[81],[88],[],[],[],[92,76,49],[94,93],[95,37],[90,50],[],[11,10],[],[99],[],[76,101,39],[102,38],[],[],[14],[107],[111],[53,109,108],[],[110],[],[],[],[115,76,114],[84,116],[41,118],[40,117],[],[],[123],[58,43,121],[],[120],[125,121,124],[121],[88],[20,21],[],[42,129],[],[76,120,131],[133,134,132],[58,135,133],[],[111],[43,136],[],[139,76,138],[44,140],[45,133,141],[],[111],[122,46,143,144],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Simple Name fillCache ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","If Stmt ","Assign Expr ASSIGN ","Simple Name buffer ","Expression Stmt ","Unary Expr ++ ","Expression Stmt ","If Stmt ","Binary Expr GREATER ","Expression Stmt ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","STATIC","Primitive Type int ","Name Expr lines ","Name Expr bufLengthMinusTwo ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr type ","Name Expr iter ","Name Expr i ","Name Expr iter ","Name Expr c ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr i ","Name Expr iter ","Class Or Interface Type JsonIterator ","Simple Name append ","Name Expr c ","Name Expr i ","Simple Name c ","Name Expr c ","Name Expr c ","This Expr ","Assign Expr ASSIGN ","Simple Name i ","Name Expr i ","Name Expr i ","Binary Expr EQUALS ","Primitive Type int ","Field Access Expr ","Null Literal Expr ","Variable Declaration Expr ","Name Expr count ","Name Expr bound ","Name Expr IterImpl ","Name Expr bound ","Name Expr bound ","Return Stmt ","Name Expr buf ","Field Access Expr ","Field Access Expr ","Simple Name length ","Simple Name reusableChars ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name updateStringCopyBound ","Block Stmt ","Name Expr j ","Simple Name j ","Integer Literal Expr Note Zero  ","Name Expr j ","Name Expr j ","Variable Declarator int j = ","Primitive Type int ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","LESS","POSTFIX_INCREMENT","Assign Expr ASSIGN ","Array Access Expr i++ ","Field Access Expr ","Unary Expr ++ ","Name Expr val ","Block Stmt ","EQUALS","Name Expr buf ","'''","Assign Expr ASSIGN ","Field Access Expr ","Simple Name head ","ReturnStmt","Block Stmt ","Enclosed Expr ","Integer Literal Expr Note Zero  ","Binary Expr XOR ","XOR","Simple Name iter ","''","IntegerLiteralExpr","break;","Assign Expr ASSIGN ","Assign Expr ASSIGN ","Cast Expr ","Field Access Expr ","Simple Name reusableChars ","Primitive Type char ","Variable Declaration Expr ","Name Expr alreadyCopied ","Simple Name alreadyCopied ","Name Expr alreadyCopied ","Variable Declarator int alreadyCopied = ","Class Or Interface Type Any ","Integer Literal Expr Zero  ","Block Stmt ","GREATER","Field Access Expr ","Char Literal Expr 'n' ","Assign Expr ASSIGN ","Binary Expr MINUS ","Binary Expr MINUS ","MINUS","Integer Literal Expr Note Zero  ","Field Access Expr ","Simple Name head ","Assign Expr ASSIGN ","Variable Declarator int level = ","Name Expr level ","Simple Name head ","Integer Literal Expr Note Zero  ","Method Call Expr ","Name Expr IterImpl ","Simple Name readStringSlowPath "]}
{"fileName":"src/main/java/com/jsoniter/IterImplString.java","version":"0.9.22","methodName":"translateHex-IterImplString-byte","callMethodNameReferTo":{},"num":37,"succs":[[1,16],[24,2],[25,26,4,19,3],[30,4],[20,5,36],[9,8,7,11,10,6],[7],[],[9],[],[13,15],[1,0,4],[13],[],[13,12],[],[21],[12,18],[],[17],[17,19],[22,23,17],[17],[12,18],[3],[],[28,27],[29],[],[],[31,32],[],[34,33,14],[],[35],[],[]],"attribute":["Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Return Stmt ","Method Declaration ","PUBLIC","STATIC","Primitive Type int ","Simple Name translateHex ","Parameter final byte b ","Block Stmt ","Name Expr b ","Integer Literal Expr Zero  ","Name Expr b ","Primitive Type byte ","Return Stmt ","Name Expr idx ","Name Expr hexDigits ","Name Expr val ","Name Expr val ","Binary Expr EQUALS ","Primitive Type int ","Array Access Expr b ","Block Stmt ","EQUALS","Unary Expr - ","Integer Literal Expr Note Zero  ","MINUS","IntegerLiteralExpr","Object Creation Expr IndexOutOfBoundsException Optional.empty Optional.empty ","Class Or Interface Type IndexOutOfBoundsException ","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","StringLiteralExpr","ReturnStmt"]}
{"fileName":"src/main/java/com/jsoniter/IterImplString.java","version":"0.9.22","methodName":"findSliceEnd-IterImplString-JsonIterator","callMethodNameReferTo":{},"num":68,"succs":[[10,2,1,25],[31,2],[3,11,27,36,35],[4,39],[5,48,7],[49,41,6,50,7],[53,12,10,52],[57,8],[9,49,58,10,42],[60,10],[38,28,2],[12,65,52],[18,16,14,17,15,13],[14],[],[16],[],[24,20],[0,11],[20,23],[],[20,19],[20,21],[20,22],[],[3,4],[19],[26,29],[27,26],[26,28,30],[26,29],[33,26,32],[26],[19,34],[],[],[21,37],[],[],[43],[29,22],[40],[41,5,40],[45,40,44],[40],[46,29],[47,22],[],[6],[],[51],[],[],[55,54,30],[],[56],[],[9],[59],[],[61,62,23,63],[],[64],[64],[],[67,66],[56],[]],"attribute":["For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","If Stmt ","Binary Expr EQUALS ","Throw Stmt ","Unary Expr ++ ","Return Stmt ","Method Declaration ","STATIC","FINAL","Unary Expr ++ ","Simple Name findSliceEnd ","Parameter JsonIterator iter ","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Class Or Interface Type JsonIterator ","Block Stmt ","Name Expr d ","Name Expr i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Class Or Interface Type Exception ","Simple Name head ","LESS","Field Access Expr ","Simple Name tail ","POSTFIX_INCREMENT","Variable Declaration Expr ","Name Expr d ","Name Expr c ","Name Expr c ","Variable Declarator byte c = ","Name Expr dArr ","Array Access Expr i ","Field Access Expr ","Name Expr idx ","Block Stmt ","EQUALS","Char Literal Expr ''' ","'''","ReturnStmt","Binary Expr PLUS ","PLUS","Name Expr v ","IntegerLiteralExpr","Block Stmt ","Char Literal Expr '' ","''","Method Call Expr ","Simple Name reportError ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Unary Expr - ","Name Expr c ","MINUS"]}
