{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","hasMethodName":["test_positive_negative-TestFloat-","test_long_double-TestFloat-","test_ieee_754-TestFloat-","test_decimal_places-TestFloat-","test_combination_of_dot_and_exponent-TestFloat-","test_streaming-TestFloat-","parseFloat-TestFloat-String","parseDouble-TestFloat-String","testBigDecimal-TestFloat-","testChooseDouble-TestFloat-"]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_positive_negative-TestFloat-","callMethodNameReferTo":{},"num":119,"succs":[[1,14],[2,23],[3,29],[4,37],[43,5],[51],[11,8,13,10,9,7],[],[9],[],[12],[],[],[3,4,1,2,5,0],[15,16,17],[],[],[21,19,18],[],[22,20],[],[67,68,63,66,10,64,65],[],[24,25,26],[],[],[21,27,28],[],[22,20],[31,32,30],[],[],[33,36,34],[],[35,22],[],[99,98,63,95,97,10,96],[40,38,39],[],[],[36,42,41],[],[35,22],[45,46,44],[],[48,47],[50,21,49],[],[],[],[22,20],[52,54,53],[],[48,55],[36,57,56],[],[],[35,22],[61,59,72],[61,60],[21,74,73],[62],[85,21,73],[],[65],[],[20,71],[],[58],[20],[69,20],[],[60],[],[76,75],[78,77,80,79],[],[],[],[81,82],[84],[],[69,83],[],[],[86,87],[89,70,88],[],[],[],[91,103,93],[92,93],[36,104,73],[94],[114,36,73],[96],[],[35,102],[],[90],[35],[100,35],[],[92],[105,106],[107,108,110,109],[],[],[],[111,112],[84],[],[100,113],[],[115,116],[101,118,117],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_positive_negative ","Throws","Simple Name deserialize ","IOException","Block Stmt ","Method Call Expr ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Expression Stmt ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name readString ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Method Call Expr ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Name Expr CtNewMethod ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Class Or Interface Type JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr lines ","Simple Name parseFloat ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","If Stmt ","Name Expr requiredIdx ","Return Stmt ","Block Stmt ","Return Stmt ","Name Expr stream ","Simple Name parseDouble ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Class Or Interface Type Float "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_long_double-TestFloat-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":26,"succs":[[10,1],[22],[7,9,5,4,6,3],[],[5],[],[8],[],[],[1,0],[14],[12],[],[11],[15,16,11],[11],[18,19,17,12],[],[20],[21],[],[],[25,23,13,24],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_empty_class ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name e ","Name Expr JsonIterator ","Name Expr d ","Variable Declarator double d = ","Class Or Interface Type Object ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr double.class ","StringLiteralExpr","Primitive Type double ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_ieee_754-TestFloat-","callMethodNameReferTo":{},"num":88,"succs":[[1,10],[19],[5,7,9,6,3,4],[],[5],[],[8],[],[],[1,0],[11,12,13],[],[],[17,15,14],[],[18,16],[],[36,37,32,35,33,6,34],[],[22,20,21],[],[],[26,24,23],[],[25,18],[],[68,67,32,66,64,6,65],[30,28,41],[30,29],[17,43,42],[31],[54,17,42],[],[34],[],[16,40],[],[27],[16],[38,16],[],[29],[],[45,44],[47,46,49,48],[],[],[],[50,51],[53],[],[38,52],[],[],[55,56],[58,39,57],[],[],[],[60,72,62],[61,62],[26,73,42],[63],[83,26,42],[65],[],[25,71],[],[59],[25],[69,25],[],[61],[74,75],[77,76,79,78],[],[],[],[80,81],[53],[],[69,82],[],[84,85],[70,87,86],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name setSuperclass ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Parameter Object obj ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Method Call Expr ","Name Expr JsonIterator ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr lines ","Simple Name parseFloat ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","If Stmt ","Name Expr requiredIdx ","Return Stmt ","Block Stmt ","Return Stmt ","Name Expr stream ","Simple Name parseDouble ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Class Or Interface Type Float "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_decimal_places-TestFloat-","callMethodNameReferTo":{},"num":205,"succs":[[1,23],[2,35],[3,46],[4,55],[62,5],[6,71],[7,78],[86,8],[93,9],[101,10],[108,11],[116,12],[123,13],[14,130],[137],[22,18,17,20,19,16],[],[18],[],[21],[],[],[14,2,11,6,10,7,4,1,0,5,13,12,8,3,9],[26,24,25,27],[],[28,29],[33,31,30],[],[],[],[],[34,32],[],[153,154,149,152,19,150,151],[],[36,39,37,38],[],[40,41],[45,43,42],[],[],[],[],[44,34],[],[185,184,149,181,183,19,182],[49,50,48,47],[],[52,51],[53,45,54],[],[],[],[],[44,34],[59,56,58,57],[],[],[33,60,61],[],[],[34,32],[66,65,64,63],[],[68,67],[33,69,70],[],[],[],[],[34,32],[73,74,72,75],[],[],[77,45,76],[],[],[44,34],[80,79,81,82],[],[68,83],[45,85,84],[],[],[],[44,34],[89,90,87,88],[],[],[33,92,91],[],[],[34,32],[95,96,97,94],[],[68,98],[33,99,100],[],[],[],[34,32],[105,104,102,103],[],[],[45,106,107],[],[],[44,34],[110,112,109,111],[],[68,113],[45,115,114],[],[],[],[44,34],[117,118,119,120],[],[],[122,121,33],[],[],[34,32],[126,125,127,124],[],[],[45,128,129],[],[],[44,34],[132,133,131,134],[],[],[33,135,136],[],[],[34,32],[139,138,141,140],[],[],[45,142,143],[],[],[44,34],[147,145,158],[147,146],[33,160,159],[148],[171,33,159],[],[151],[],[32,157],[],[144],[32],[155,32],[],[146],[],[162,161],[164,163,166,165],[],[],[],[167,168],[170],[],[155,169],[],[],[172,173],[175,156,174],[],[],[],[177,189,179],[178,179],[45,190,159],[180],[200,45,159],[182],[],[44,188],[],[176],[44],[186,44],[],[178],[191,192],[194,193,196,195],[],[],[],[197,198],[170],[],[186,199],[],[201,202],[187,204,203],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_decimal_places ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MAX_VALUE ","Parameter double obj ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Method Call Expr ","Class Or Interface Type JsonIterator ","Variable Declarator JsonIterator iter = ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name MAX_VALUE ","Name Expr noIndention ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Variable Declaration Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","Name Expr hash ","Simple Name MIN_VALUE ","Simple Name deserialize ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Class Expr Date.class ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Expression Stmt ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Declaration Throws ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name Entry ","Simple Name floatValue ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr lines ","Simple Name parseFloat ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","If Stmt ","Name Expr requiredIdx ","Return Stmt ","Block Stmt ","Return Stmt ","Name Expr stream ","Simple Name parseDouble ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Class Or Interface Type Float "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_combination_of_dot_and_exponent-TestFloat-","callMethodNameReferTo":{"16":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-","17":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":29,"succs":[[1,10],[22],[4,9,5,6,7,3],[],[5],[],[8],[],[],[1,0],[14],[12],[],[11],[15,16,11],[11],[18,17],[19,20,12],[],[],[21],[],[24,23,13,25],[],[27,28,26],[],[],[],[21]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Binary Expr EQUALS ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name v ","Name Expr JsonIterator ","Name Expr v ","Variable Declarator double v = ","Simple Name append ","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Binary Expr PLUS ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Double Literal Expr Note Zero  ","Name Expr Double ","Parameter byte b1 ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"test_streaming-TestFloat-","callMethodNameReferTo":{},"num":274,"succs":[[14,1],[2,19],[22],[11,6,8,7,4,9,5],[],[],[7],[],[10],[],[],[2,1,0],[13],[],[16,15,17],[],[],[18],[],[20,21],[],[33,31,34,8,32,5],[24,23],[],[97,95,94,96,8,5],[26,35],[27,44],[28,50],[29,58],[64,30],[72],[32],[],[],[28,29,26,27,30,25],[36,37,38],[],[],[42,40,39],[],[43,41],[],[222,223,218,221,8,219,220],[],[45,46,47],[],[],[42,48,49],[],[43,41],[52,53,51],[],[],[54,57,55],[],[56,43],[],[254,253,218,252,250,8,251],[61,59,60],[],[],[57,63,62],[],[56,43],[66,67,65],[],[69,68],[71,70,42],[],[],[],[43,41],[73,74,75],[],[69,76],[57,78,77],[],[],[56,43],[80,98],[81,107],[82,116],[83,125],[132,84],[85,140],[86,147],[155,87],[162,88],[170,89],[177,90],[185,91],[192,92],[93,199],[206],[95],[],[],[81,93,90,85,89,83,86,80,79,84,92,91,87,82,88],[101,99,102,100],[],[103,104],[106,42,105],[],[],[],[],[43,41],[108,111,110,109],[],[112,113],[57,115,114],[],[],[],[],[56,43],[119,118,120,117],[],[122,121],[123,57,124],[],[],[],[],[56,43],[129,126,128,127],[],[],[42,130,131],[],[],[43,41],[135,136,134,133],[],[69,137],[42,138,139],[],[],[],[43,41],[142,143,141,144],[],[],[146,57,145],[],[],[56,43],[149,148,150,151],[],[69,152],[57,153,154],[],[],[],[56,43],[158,159,157,156],[],[],[42,161,160],[],[],[43,41],[164,165,166,163],[],[69,167],[168,42,169],[],[],[],[43,41],[174,173,172,171],[],[],[57,175,176],[],[],[56,43],[179,181,180,178],[],[69,182],[57,184,183],[],[],[],[56,43],[186,187,188,189],[],[],[191,190,42],[],[],[43,41],[195,194,193,196],[],[],[57,198,197],[],[],[56,43],[201,202,200,203],[],[],[42,204,205],[],[],[43,41],[207,208,210,209],[],[],[57,211,212],[],[],[56,43],[216,214,227],[216,215],[42,229,228],[217],[240,42,228],[],[220],[],[41,226],[],[213],[41],[224,41],[],[215],[],[231,230],[233,232,235,234],[],[],[],[236,237],[239],[],[224,238],[],[],[241,242],[244,225,243],[],[],[],[246,258,248],[247,248],[57,259,228],[249],[269,57,228],[251],[],[56,257],[],[245],[56],[255,56],[],[247],[260,261],[262,263,265,264],[],[],[],[266,267],[239],[],[255,268],[],[270,271],[256,273,272],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_streaming ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Method Call Expr ","Name Expr isStreaming ","ASSIGN","Boolean Literal Expr true ","true","Class Or Interface Type HashMap ","Simple Name test_positive_negative ","Method Declaration Throws ","Method Call Expr ","Simple Name test_decimal_places ","Method Declaration Throws ","Expression Stmt ","Expression Stmt ","Throw Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Void Type ","Simple Name test_positive_negative ","Simple Name deserialize ","Block Stmt ","Method Call Expr ","Class Or Interface Type JsonIterator ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Expression Stmt ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name readString ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","Method Call Expr ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Name Expr CtNewMethod ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","MINUS","Simple Name parseFloat ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Class Or Interface Type JsonIterator ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name test_decimal_places ","Class Or Interface Type IOException ","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MAX_VALUE ","Parameter double obj ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Variable Declarator JsonIterator iter = ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name iter ","Simple Name MAX_VALUE ","Name Expr noIndention ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Double Literal Expr Note Zero  ","Name Expr hash ","Simple Name MIN_VALUE ","Simple Name deserialize ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Class Expr Date.class ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Double Literal Expr Note Zero  ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Expression Stmt ","Return Stmt ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseFloat ","String Literal Expr Not Empty  ","Method Call Expr ","Class Or Interface Type JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","Method Declaration Throws ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name Entry ","Simple Name floatValue ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Double Literal Expr Note Zero  ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name parseDouble ","String Literal Expr Not Empty  ","If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","PRIVATE","Name Expr lines ","Simple Name parseFloat ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","If Stmt ","Name Expr requiredIdx ","Return Stmt ","Block Stmt ","Return Stmt ","Name Expr stream ","Simple Name parseDouble ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Class Or Interface Type Float "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"parseFloat-TestFloat-String","callMethodNameReferTo":{"20":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-","31":"src/main/java/com/jsoniter/JsonIterator.java-readFloat-JsonIterator-"},"num":36,"succs":[[3,1,18],[3,2],[5,20,19],[4],[31,5,19],[11,13,6,9,10,7,8],[],[8],[],[15,17],[12],[],[],[0],[15],[],[14,15],[],[2],[],[22,21],[24,23,26,25],[],[],[],[27,28],[30],[],[14,29],[],[],[32,33],[35,16,34],[],[],[]],"attribute":["If Stmt ","Binary Expr EQUALS ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Name Expr lines ","Simple Name parseFloat ","Parameter String input ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readFloat ","Name Expr JsonIterator ","Simple Name parse "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"parseDouble-TestFloat-String","callMethodNameReferTo":{"32":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]","20":"src/main/java/com/jsoniter/JsonIterator.java-readDouble-JsonIterator-","31":"src/main/java/com/jsoniter/JsonIterator.java-readDouble-JsonIterator-"},"num":36,"succs":[[1,18,3],[2,3],[5,20,19],[4],[31,5,19],[13,11,6,9,7,10,8],[],[8],[],[15,17],[12],[],[],[0],[15],[],[14,15],[],[2],[],[21,22],[23,24,26,25],[],[],[],[27,28],[30],[],[14,29],[],[],[32,33],[16,35,34],[],[],[]],"attribute":["If Stmt ","Name Expr requiredIdx ","Return Stmt ","Block Stmt ","Return Stmt ","Method Declaration Throws ","PRIVATE","Name Expr stream ","Simple Name parseDouble ","Parameter String input ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","ReturnStmt","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name readDouble ","Name Expr JsonIterator ","Class Or Interface Type Float "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"testBigDecimal-TestFloat-","callMethodNameReferTo":{"13":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":24,"succs":[[7,1],[19],[6,4,5,3],[],[5],[],[0,1],[11],[9],[],[8],[12,8,13],[8],[16,14,9,15],[],[17],[18],[],[],[10,20,21],[],[23,22],[],[17]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Name Expr MapKeyEncoders ","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type String ","Name Expr JsonIterator ","Name Expr number ","Variable Declarator BigDecimal number = ","Class Or Interface Type BigDecimal ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr BigDecimal.class ","StringLiteralExpr","Class Or Interface Type BigDecimal ","Expression Stmt ","Class Or Interface Type JsonIterator ","Object Creation Expr BigDecimal Optional.empty Optional.empty ","Class Or Interface Type BigDecimal ","String Literal Expr Not Empty  "]}
{"fileName":"src/test/java/com/jsoniter/TestFloat.java","version":"0.9.22","methodName":"testChooseDouble-TestFloat-","callMethodNameReferTo":{"18":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>","29":"src/main/java/com/jsoniter/JsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":37,"succs":[[1,9],[24,2],[27,3],[34],[7,8,6,5],[],[7],[],[0,3,2,1],[16],[11],[],[10],[12,10,14],[],[13],[18,10,17],[10],[20,19,11,21],[],[22],[23],[],[],[26,12,25],[],[],[13,28,29],[],[32,14,31,30],[],[22],[33],[],[15,35,36],[],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Null Literal Expr ","Simple Name testChooseDouble ","Block Stmt ","Variable Declaration Expr ","Array Type 1 ","Name Expr JsonIterator ","Name Expr DIGITS ","Simple Name append ","Name Expr JsonIterator ","Name Expr number ","Variable Declarator Object number = ","Name Expr stream ","Method Call Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Object.class ","StringLiteralExpr","Name Expr fields ","Method Call Expr ","Array Access Expr count++ ","Name Expr buf ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Class Or Interface Type TestObject5 ","String Literal Expr Not Empty  ","Class Expr Object.class ","Class Or Interface Type Object ","Method Call Expr ","Field Access Expr ","Name Expr str "]}
