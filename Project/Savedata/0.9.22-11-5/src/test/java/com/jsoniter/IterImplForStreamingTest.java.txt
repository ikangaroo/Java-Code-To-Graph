{"fileName":"src/test/java/com/jsoniter/IterImplForStreamingTest.java","version":"0.9.22","hasMethodName":["testReadMaxDouble-IterImplForStreamingTest-"]}
{"fileName":"src/test/java/com/jsoniter/IterImplForStreamingTest.java","version":"0.9.22","methodName":"testReadMaxDouble-IterImplForStreamingTest-","callMethodNameReferTo":{"35":"src/main/java/com/jsoniter/IterImplForStreaming.java-readNumber-IterImplForStreaming-JsonIterator","25":"src/main/java/com/jsoniter/JsonIterator.java-parse-JsonIterator-byte[]"},"num":53,"succs":[[13,1],[2,20],[3,29],[4,38],[51],[8,12,7,10,9,6],[],[8],[],[11],[],[],[0,4,2,1,3],[16],[15],[],[15,18,17],[15],[19],[],[23],[22],[],[25,24,22],[22],[28,26,27],[],[],[19],[33],[21],[30],[30,31],[30,34,35],[30],[37,36,21],[],[],[41],[32,31],[39],[39,42,43],[39],[45,44,47,46],[],[31,48],[49],[32,50],[],[],[],[52,14,40],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name testReadMaxDouble ","Throws","Class Or Interface Type Exception ","Exception","Block Stmt ","Variable Declaration Expr ","Simple Name decodeInt ","Simple Name maxDouble ","Variable Declarator String maxDouble = ","Class Or Interface Type String ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Name Expr iter ","Name Expr type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name numberChars ","Name Expr numberChars ","Name Expr numberChars ","Variable Declarator IterImplForStreaming.numberChars numberChars = ","Class Or Interface Type numberChars ","Method Call Expr ","Name Expr IterImplForStreaming ","Simple Name readNumber ","Variable Declaration Expr ","Simple Name number ","Name Expr number ","Variable Declarator String number = ","Class Or Interface Type String ","Object Creation Expr String Optional.empty Optional.empty ","Name Expr stream ","Field Access Expr ","Integer Literal Expr Zero  ","Field Access Expr ","Simple Name chars ","Zero IntegerLiteralExpr","Simple Name charsLength ","Method Call Expr ","Simple Name assertEquals "]}
