{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","hasMethodName":["test_TypeDecoder-TestSpiTypeDecoder-","test_TypeDecoder_for_generics-TestSpiTypeDecoder-","test_direct-TestSpiTypeDecoder-","test_as_field_type-TestSpiTypeDecoder-","test_as_array_element-TestSpiTypeDecoder-","test_list_or_single_element-TestSpiTypeDecoder-"]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_TypeDecoder-TestSpiTypeDecoder-","callMethodNameReferTo":{"54":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":72,"succs":[[12,1],[2,49],[67],[6,8,4,7,5,10],[],[6],[],[9],[],[],[0,2,1],[3,19,37,48],[15,14,13,16],[],[],[17],[18],[],[],[21,20,24,25,22,4,7,23],[],[22],[],[28,27],[],[31,30,29,11],[27],[],[],[32],[34],[42],[33,26],[],[38],[50,36],[],[35],[36,40,39],[36],[41],[],[45,44,43],[35,46],[],[47],[],[],[],[52],[],[35,37],[50,54,53],[50],[58,55,57,56],[],[],[62,59,61,60],[66],[63],[],[64],[65],[],[],[],[],[69,70,68],[],[47],[51,71],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_TypeDecoder ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Method Call Expr ","Return Stmt ","Simple Name registerTypeDecoder ","Class Expr TestObject1.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Class Or Interface Type Decoder ","If Stmt ","Switch Entry Stmt ","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Simple Name test_binding ","Expression Stmt ","Return Stmt ","Method Call Expr ","Class Or Interface Type List ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Name Expr Any ","Variable Declarator TestObject1 obj = ","Class Or Interface Type TestObject1 ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Class Or Interface Type TestObject1 ","Simple Name test_linked_list ","Simple Name test_slash ","ASSIGN","Name Expr obj ","Simple Name field1 ","IntegerLiteralExpr","ReturnStmt","Variable Declaration Expr ","Name Expr ctx ","Name Expr obj ","Variable Declarator TestObject1 obj = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","Class Expr TestObject1.class ","Method Call Expr ","Simple Name replace ","Char Literal Expr ''' ","Name Expr str ","StringLiteralExpr","'''","'''","Class Or Interface Type TestObject1 ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Class Or Interface Type Collection ","Simple Name field1 "]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_TypeDecoder_for_generics-TestSpiTypeDecoder-","callMethodNameReferTo":{"64":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":84,"succs":[[1,13],[21,2],[59,3],[75],[6,11,7,5,8,9],[],[7],[],[10],[],[],[0,1,3,2],[4,56,55,26],[17],[15],[],[14,15],[19,18,15],[15],[20],[],[14,22,24,23],[],[],[25],[],[30,29,31,27,32,5,8,28],[],[29],[],[34,35],[],[37,38,12,36],[34],[],[],[39],[41],[49],[33,40],[],[45],[43],[],[42],[46,43,47],[43],[48],[],[51,50,52],[53,42],[],[54],[],[],[],[57,58,44],[],[],[62],[16],[60],[64,63,60],[60],[16,65,67,66],[],[],[70,71,69,68],[72],[],[73],[74],[],[],[],[77,76,78],[],[54],[79,80],[82,61,81],[],[],[83],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_TypeDecoder_for_generics ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Variable Declaration Expr ","Name Expr typeLiteral ","Simple Name typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral<List<TestObject1>> typeLiteral = ","Expression Stmt ","Object Creation Expr TypeLiteral<List<TestObject1>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Class Or Interface Type TestObject2 ","Simple Name registerTypeDecoder ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Decoder ","Method Declaration Throws ","Simple Name nextToken ","Name Expr field1 ","Simple Name reader ","Parameter JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","Simple Name test_JsonProperty ","Name Expr TypeLiteral ","Char Literal Expr 'n' ","Simple Name test_get_all_with_some_invalid_path ","Name Expr obj ","Name Expr obj ","Name Expr obj ","Variable Declarator TestObject1 obj = ","Simple Name encodeFloat ","Object Creation Expr TestObject1 Optional.empty Optional.empty ","Name Expr existingObj ","Simple Name test_MapKeyCodec ","Field Access Expr ","ASSIGN","Integer Literal Expr Note Zero  ","Simple Name field1 ","IntegerLiteralExpr","ReturnStmt","Method Call Expr ","Name Expr Arrays ","Simple Name field1 ","Variable Declaration Expr ","Simple Name head ","Simple Name head ","Variable Declarator List<TestObject1> objs = ","Method Call Expr ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr EQUALS ","Simple Name test_JsonProperty ","Simple Name replace ","Name Expr iter ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr ''' ","Field Access Expr ","Method Call Expr ","Simple Name field1 ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_direct-TestSpiTypeDecoder-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","26":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":38,"succs":[[11,1],[21,2],[30],[10,8,5,4,7,6],[],[6],[],[9],[],[],[1,2,0],[14],[13],[],[16,15,13],[13],[18,17,19],[],[],[20],[],[24],[12],[22],[22,26,25],[22],[28,27,12],[],[29],[],[31,32,33],[],[34],[35,36],[],[37,23],[],[]],"attribute":["Throw Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Method Call Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr obj1 ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Simple Name date ","Simple Name head ","Variable Declarator MyDate date = ","Simple Name append ","Method Call Expr ","Simple Name read ","Class Expr MyDate.class ","Class Or Interface Type MyDate ","Method Call Expr ","Class Or Interface Type JsonIterator ","Long Literal Expr Note Zero  ","Method Call Expr ","LongLiteralExpr","Field Access Expr ","Binary Expr PLUS ","Simple Name date "]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_as_field_type-TestSpiTypeDecoder-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","32":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":46,"succs":[[1,11],[27,2],[36],[8,10,6,4,7,5],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[16,15,13],[13],[17,19,18],[],[],[22,21,23,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[28,31,32],[28],[34,33,12],[],[35],[],[38,37,39],[],[40],[41,42],[],[43,44],[],[29,45],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_name_conflict ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Name Expr iter ","Simple Name size ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name buf ","Name Expr obj ","Variable Declarator FieldWithMyDate obj = ","Class Or Interface Type FieldWithMyDate ","Method Call Expr ","Simple Name read ","Class Expr FieldWithMyDate.class ","Class Or Interface Type FieldWithMyDate ","Method Call Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","LongLiteralExpr","Field Access Expr ","Simple Name getTime ","Field Access Expr ","Simple Name date ","Binary Expr PLUS "]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_as_array_element-TestSpiTypeDecoder-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","26":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":41,"succs":[[1,11],[2,21],[30],[10,4,7,6,5,8],[],[6],[],[9],[],[],[1,0,2],[14],[13],[],[15,16,13],[13],[18,19,17],[],[],[20],[],[24],[12],[22],[22,25,26],[22],[12,28,27],[],[29],[],[32,31,33],[],[34],[35,36],[],[38,37],[],[39,23],[],[40],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_as_array_element ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr line ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name dates ","Name Expr dates ","Variable Declarator MyDate[] dates = ","Array Type 1 ","Method Call Expr ","Simple Name read ","Class Expr MyDate[].class ","Array Type 1 ","Method Call Expr ","Array Access Expr count++ ","Method Call Expr ","Method Call Expr ","LongLiteralExpr","Field Access Expr ","Simple Name getTime ","Array Access Expr 0 ","String Literal Expr Not Empty  ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestSpiTypeDecoder.java","version":"0.9.22","methodName":"test_list_or_single_element-TestSpiTypeDecoder-","callMethodNameReferTo":{"101":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","122":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":145,"succs":[[14,1],[2,22],[3,96],[107,4],[116,5],[6,128],[136],[10,11,9,8],[],[10],[],[6,1,4,3,5,2,0],[7,76,29,56],[59,7,29,76],[18,17],[16],[],[],[16,19,20],[16],[21],[],[25,26,24,23],[],[],[27],[28],[],[],[35,32,37,34,8,30,33,31],[],[32],[],[39,42],[36],[],[],[44,45,43],[39],[],[38,39],[39,40],[],[46],[53],[65,66,64,48],[49],[38],[47],[51,47,50],[47],[52,38],[],[60],[15,40,55],[],[54],[54,56],[57],[58,57],[62,61,55],[55],[63],[],[69,67,68,12],[77,13,79,78,67],[67,91],[],[],[70],[72,71,73],[74,54],[],[75,15,40],[],[],[],[],[80],[85],[72,82,81],[83,57],[84],[],[],[87,86,88],[58,89],[],[41,90],[],[],[92],[94,93],[],[95],[],[99],[98],[],[98,100,101],[98],[104,103,105,102],[],[],[95],[106],[],[110,109,108],[],[95],[111,113,112],[97,114],[],[115],[],[],[120],[118],[],[118,117],[118,121,122],[118],[124,123,125,126],[],[],[95],[127],[],[129,130,131],[],[95],[134,133,132],[135,117],[],[115],[],[139,137,138],[],[95],[142,141,140],[119,143],[],[144],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_list_or_single_element ","Block Stmt ","Return Stmt ","Return Stmt ","Variable Declaration Expr [FINAL] ","Name Expr listOfString ","Class Expr Double.class ","FINAL","Variable Declarator TypeLiteral<List<String>> listOfString = ","Class Or Interface Type TypeLiteral ","Object Creation Expr TypeLiteral<List<String>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeDecoder ","Class Expr MyList.class ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type MyList ","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Name Expr String ","Name Expr String ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Expression Stmt ","Switch Stmt ","Variable Declaration Expr ","Simple Name nextToken ","Double Literal Expr Note Zero  ","Variable Declarator ValueType valueType = ","Simple Name test_byte ","Method Call Expr ","Simple Name whatIsNext ","Variable Declaration Expr ","Simple Name equals ","Simple Name myList ","Name Expr myList ","Name Expr myList ","Break Stmt ","Simple Name toLong ","Variable Declarator MyList myList = ","Simple Name buffer ","Object Creation Expr MyList Optional.empty Optional.empty ","Class Or Interface Type MyList ","Switch Entry Stmt ","Switch Entry Stmt ","Switch Entry Stmt ","SwitchEntryStmt","Name Expr ARRAY ","Expression Stmt ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Method Call Expr ","Simple Name list ","Simple Name read ","ReturnStmt","Name Expr STRING ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Simple Name TypeLiteral ","Object Creation Expr ArrayList<String> Optional.empty Optional.empty ","Simple Name list ","Class Or Interface Type ArrayList ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name add ","Method Call Expr ","Simple Name list ","Simple Name readString ","Throw Stmt ","Object Creation Expr JsonException Optional.empty Optional.empty ","Class Or Interface Type JsonException ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Name Expr list1 ","Name Expr lines ","Variable Declarator MyList list1 = ","Simple Name append ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr MyList.class ","Class Or Interface Type MyList ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Name Expr idx ","Integer Literal Expr Zero  ","Simple Name list ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Name Expr list2 ","Name Expr cache ","Name Expr list2 ","Variable Declarator MyList list2 = ","Simple Name append ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr MyList.class ","Class Or Interface Type MyList ","Method Call Expr ","Simple Name assertEquals ","Name Expr Integer ","Method Call Expr ","Field Access Expr ","Name Expr idx ","Integer Literal Expr Zero  ","Simple Name list ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Simple Name get ","Integer Literal Expr Note Zero  ","Simple Name list ","IntegerLiteralExpr"]}
