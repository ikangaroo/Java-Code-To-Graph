{"fileName":"srctestjavacomjsoniterTestSpiPropertyDecoder.java","version":"0.9.22","hasMethodName":["test_PropertyDecoder-TestSpiPropertyDecoder-","test_PropertyDecoder_for_type_literal-TestSpiPropertyDecoder-"]}
{"fileName":"srctestjavacomjsoniterTestSpiPropertyDecoder.java","version":"0.9.22","methodName":"test_PropertyDecoder-TestSpiPropertyDecoder-","callMethodNameReferTo":{"40":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":51,"succs":[[1,9],[2,35],[46],[7,6,5,4],[],[6],[],[2,1,0],[18,3,34,33],[10,12,14,11,13],[],[],[15],[16],[17],[],[],[],[24,21,20,4,26,22,23,19],[],[21],[],[29,28],[25],[],[],[8,30],[28],[],[],[31],[32,27],[],[],[16],[38],[37],[],[37,40,39],[37],[44,43,41,42],[],[],[16],[45],[],[47,48,49],[],[16],[36,50],[]],"attribute":["Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Method Declaration ","PUBLIC","Void Type ","Cast Expr ","Block Stmt ","Return Stmt ","Method Call Expr ","Class Or Interface Type TestObject1 ","Variable Declarator TestObject1 obj = ","Class Expr TestObject1.class ","String Literal Expr Not Empty  ","Object Creation Expr Decoder Optional.empty Optional.empty ","Simple Name allBindings ","StringLiteralExpr","Class Or Interface Type Decoder ","Method Declaration Throws ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Class Or Interface Type String ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Simple Name test_string ","Simple Name head ","ReturnStmt","Simple Name println ","Variable Declaration Expr ","Name Expr obj ","Name Expr ctx ","Variable Declarator TestObject1 obj = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject1.class ","Class Or Interface Type TestObject1 ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name field "]}
{"fileName":"srctestjavacomjsoniterTestSpiPropertyDecoder.java","version":"0.9.22","methodName":"test_PropertyDecoder_for_type_literal-TestSpiPropertyDecoder-","callMethodNameReferTo":{"47":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":56,"succs":[[10,1],[2,18],[42,3],[51],[6,5,7,8],[],[7],[],[0,2,3,1],[41,25,4,40],[14],[12],[],[12,11],[12,16,15],[12],[17],[],[21,11,19,20,22],[],[],[23],[24],[],[],[26,27,29,31,33,5,30,28],[],[28],[],[35,36],[32],[],[],[9,37],[35],[],[],[38],[34,39],[],[],[23],[45],[13],[43],[43,47,46],[43],[50,48,13,49],[],[],[23],[54,52,53],[],[23],[55,44],[]],"attribute":["Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_PropertyDecoder_for_type_literal ","Block Stmt ","Assign Expr ASSIGN ","Variable Declaration Expr ","Name Expr typeLiteral ","Simple Name typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral<TestObject1<Object>> typeLiteral = ","Class Or Interface Type TypeLiteral ","Object Creation Expr TypeLiteral<TestObject1<Object>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Return Stmt ","Simple Name registerPropertyDecoder ","String Literal Expr Not Empty  ","Object Creation Expr Decoder Optional.empty Optional.empty ","StringLiteralExpr","Class Or Interface Type Decoder ","If Stmt ","Marker Annotation Expr @Override ","Name Expr field1 ","Class Or Interface Type String ","Parameter JsonIterator iter ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Expression Stmt ","Method Call Expr ","Simple Name iter ","ReturnStmt","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name obj ","Primitive Type int ","Variable Declarator TestObject1 obj = ","Class Or Interface Type TestObject1 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertEquals ","Name Expr minimal ","Field Access Expr ","Simple Name field "]}
