{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","hasMethodName":["initialize-TestAnnotationJsonWrapper.TestObject1-int","test_binding-TestAnnotationJsonWrapper-","setProperties-TestAnnotationJsonWrapper.TestObject2-String-Object","test_key_value-TestAnnotationJsonWrapper-","foreignFromJson-TestAnnotationJsonWrapper.AAA-String","test_issue_104-TestAnnotationJsonWrapper-"]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"initialize-TestAnnotationJsonWrapper.TestObject1-int","callMethodNameReferTo":{},"num":20,"succs":[[4,3,6,5,1,2],[],[],[4],[],[9,8,10],[13],[8],[],[],[],[12],[],[14],[16,7,15],[17,18],[],[19],[],[]],"attribute":["Method Declaration ","Class Or Interface Type JsonIterator ","PUBLIC","Name Expr iter ","Binary Expr PLUS ","Parameter @JsonProperty('field1') int field1 ","Block Stmt ","Simple Name Object ","Simple Name field1 ","Single Member Annotation Expr @JsonProperty('field1') ","Primitive Type int ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Null Literal Expr ","Simple Name _field1 ","ThisExpr"]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"test_binding-TestAnnotationJsonWrapper-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","32":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":42,"succs":[[11,1],[27,2],[36],[5,10,6,4,7,8],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[15,16,13],[13],[17,18,19],[],[],[21,22,23,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,28,31],[28],[12,33,34],[],[35],[],[38,39,37],[],[40],[41,29],[],[]],"attribute":["Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_binding ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Name Expr iter ","Double Literal Expr Note Zero  ","Variable Declarator JsonIterator iter = ","Expression Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Name Expr current ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Return Stmt ","Name Expr ctx ","Name Expr obj ","Variable Declarator TestObject1 obj = ","Class Or Interface Type TestObject1 ","Method Call Expr ","Simple Name read ","Class Expr TestObject1.class ","Class Or Interface Type IOException ","Method Call Expr ","Return Stmt ","Char Literal Expr ']' ","Field Access Expr ","IntegerLiteralExpr","Simple Name _field1 "]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"setProperties-TestAnnotationJsonWrapper.TestObject2-String-Object","callMethodNameReferTo":{},"num":32,"succs":[[1,20],[22,2,14,21],[24],[8,4,6,9,5,10,7],[],[],[7],[],[15,18],[19,17],[0],[13,12],[],[],[15],[],[17],[],[],[],[2],[],[23],[],[26,27,25],[],[],[29,28],[30],[],[16,31],[]],"attribute":["If Stmt ","Method Call Expr ","Expression Stmt ","If Stmt ","Single Member Annotation Expr @JsonWrapper(JsonWrapperType.KEY_VALUE) ","PUBLIC","Name Expr iter ","Simple Name setProperties ","Parameter Object val ","Parameter Object value ","Block Stmt ","Field Access Expr ","String Literal Expr Not Empty  ","Simple Name KEY_VALUE ","Primitive Type int ","Simple Name val ","Name Expr value ","Simple Name value ","Class Or Interface Type Object ","Class Or Interface Type Object ","Block Stmt ","Class Or Interface Type Object ","String Literal Expr Not Empty  ","StringLiteralExpr","Assign Expr ASSIGN ","Simple Name writeTo ","ASSIGN","Method Call Expr ","Enclosed Expr ","Simple Name intValue ","Method Call Expr ","Class Or Interface Type Long "]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"test_key_value-TestAnnotationJsonWrapper-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","32":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":42,"succs":[[11,1],[2,27],[36],[10,5,4,7,6,8],[],[6],[],[9],[],[],[2,0,1],[14],[13],[],[15,13,16],[13],[19,17,18],[],[],[20,21,23,22],[24],[],[25],[26],[],[],[],[30],[12],[28],[32,28,31],[28],[33,12,34],[],[35],[],[39,38,37],[],[40],[41,29],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_key_value ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type Date ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Name Expr val ","Name Expr obj ","Variable Declarator TestObject2 obj = ","Return Stmt ","Method Call Expr ","Simple Name read ","Class Expr TestObject2.class ","Class Or Interface Type TestObject2 ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr ' ' ","Field Access Expr ","IntegerLiteralExpr","Simple Name _field1 "]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"foreignFromJson-TestAnnotationJsonWrapper.AAA-String","callMethodNameReferTo":{},"num":63,"succs":[[1,30],[32,13,31,2,3],[6,34,3],[4,35],[5,45],[51],[11,12,7,9,10,8],[],[],[10],[],[17,14,16],[4,5,0,3],[14],[],[13,14],[],[],[20,19],[],[21],[],[23,24],[],[25],[21],[27,28],[],[29],[],[2],[],[33],[],[],[40],[15],[36],[36,37],[36,38],[36,41,42],[36],[43,44,15],[],[21],[47,46,48],[],[],[37,49],[50],[],[47,53,52],[],[54,56,55],[57,59,58],[62,39],[33],[60,38],[],[61],[],[],[61]],"attribute":["For Each Stmt ","Binary Expr EQUALS ","Simple Name writeTo ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","Simple Name assertEquals ","PUBLIC","Simple Name wrap ","Simple Name foreignFromJson ","Parameter @JsonProperty(value = 'parts', from = { 'p2' }, required = false) String parts ","Block Stmt ","Name Expr lines ","Simple Name parts ","Name Expr parts ","Normal Annotation Expr @JsonProperty(value = 'parts', from = { 'p2' }, required = false) ","Class Or Interface Type String ","Member Value Pair ","Simple Name value ","String Literal Expr Not Empty  ","StringLiteralExpr","Member Value Pair ","Simple Name from ","Array Initializer Expr ","String Literal Expr Not Empty  ","Member Value Pair ","Simple Name required ","Boolean Literal Expr false ","false","Block Stmt ","EQUALS","Name Expr iter ","NullLiteralExpr","ReturnStmt","Variable Declaration Expr ","Simple Name ps ","Name Expr ps ","Name Expr ps ","Name Expr ps ","Variable Declarator String[] ps = ","Class Or Interface Type Class ","Method Call Expr ","Simple Name split ","Simple Name idx ","Assign Expr ASSIGN ","Name Expr partA ","ASSIGN","Array Access Expr 0 ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Name Expr partB ","Conditional Expr ps.length > 1 ? ps[1] : null ","Binary Expr GREATER ","Array Access Expr 1 ","Null Literal Expr ","Field Access Expr ","GREATER","Integer Literal Expr Note Zero  ","Simple Name length ","IntegerLiteralExpr","Integer Literal Expr Note Zero  "]}
{"fileName":"srctestjavacomjsoniterTestAnnotationJsonWrapper.java","version":"0.9.22","methodName":"test_issue_104-TestAnnotationJsonWrapper-","callMethodNameReferTo":{"26":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":36,"succs":[[8,1],[21,2],[31],[6,5,4,7],[],[6],[],[0,2,1],[11],[10],[],[10,12,13],[10],[15,16,14,17],[18],[],[19],[20],[],[],[],[24],[9],[22],[25,22,26],[22],[28,27,9,29],[],[],[30],[],[33,34,32],[],[18],[35,23],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Field Access Expr ","Block Stmt ","Method Call Expr ","Name Expr jsonStr ","Name Expr Codegen ","Variable Declarator String jsonStr = ","Simple Name append ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Primitive Type int ","Name Expr aaa ","Variable Declarator AAA aaa = ","Name Expr ctx ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Class Expr AAA.class ","Class Or Interface Type AAA ","Expression Stmt ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name name "]}
