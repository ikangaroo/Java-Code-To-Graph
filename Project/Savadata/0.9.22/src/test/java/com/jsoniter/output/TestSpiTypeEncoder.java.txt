{"fileName":"srctestjavacomjsoniteroutputTestSpiTypeEncoder.java","version":"0.9.22","hasMethodName":["test_TypeEncoder-TestSpiTypeEncoder-","test_TypeEncoder_for_type_literal-TestSpiTypeEncoder-"]}
{"fileName":"srctestjavacomjsoniteroutputTestSpiTypeEncoder.java","version":"0.9.22","methodName":"test_TypeEncoder-TestSpiTypeEncoder-","callMethodNameReferTo":{"81":"srcmainjavacomjsoniteroutputJsonStream.java-serialize-JsonStream-Object","56":"srcmainjavacomjsoniterspiJsoniterSpi.java-getCurrentConfig-JsoniterSpi-"},"num":88,"succs":[[1,14],[2,50],[3,60],[68,4],[76,5],[84],[11,9,13,10,7,8],[],[9],[],[12],[],[],[2,3,1,5,4,0],[17,16,15,18],[],[],[19],[20],[],[],[23,24,25,26,10,27,7,22,28],[],[24],[],[30,33],[32,34],[],[36,35],[30],[],[32],[],[],[],[37],[44],[40],[29],[38],[42,41,38],[38],[43,29],[],[31,45,46],[],[47,48],[39,49],[],[],[51,53,52],[55,54],[],[56,57],[],[],[59,58],[],[],[],[64],[62],[],[61],[65,62,66],[62],[67],[],[70,69,71],[61,72],[],[74,73],[],[],[75],[],[79],[63],[77],[77,81,80],[77],[82,63,83],[],[],[85,78,86],[],[87],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_TypeEncoder ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr existingObj ","Simple Name registerTypeEncoder ","Class Expr MyDate.class ","Object Creation Expr Encoder Optional.empty Optional.empty ","Class Or Interface Type MyDate ","Class Or Interface Type Encoder ","Method Declaration Throws ","Switch Entry Stmt ","Void Type ","Simple Name append ","Parameter Object obj ","Parameter JsonStream stream ","Class Or Interface Type IOException ","Block Stmt ","Name Expr obj ","Simple Name obj ","Break Stmt ","Simple Name stream ","Name Expr String ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Null Literal Expr ","Name Expr date ","Variable Declarator MyDate date = ","Simple Name buffer ","Cast Expr ","Class Or Interface Type MyDate ","Method Call Expr ","Simple Name writeVal ","Method Call Expr ","Field Access Expr ","Simple Name getTime ","Simple Name date ","Method Call Expr ","Field Access Expr ","Name Expr decoder ","Method Call Expr ","Simple Name append ","Name Expr val ","Method Call Expr ","Simple Name configName ","Name Expr JsoniterSpi ","Simple Name getCurrentConfig ","Variable Declaration Expr ","Name Expr stream ","Class Or Interface Type String ","Name Expr myDate ","Variable Declarator MyDate myDate = ","Simple Name append ","Object Creation Expr MyDate Optional.empty Optional.empty ","Simple Name length ","Assign Expr ASSIGN ","Field Access Expr ","ASSIGN","Object Creation Expr Date Optional.empty Optional.empty ","Simple Name date ","Class Or Interface Type Date ","Long Literal Expr Note Zero  ","LongLiteralExpr","Method Call Expr ","Simple Name output ","Name Expr output ","Variable Declarator String output = ","Simple Name append ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Expression Stmt ","Field Access Expr ","String Literal Expr Not Empty  ","StringLiteralExpr"]}
{"fileName":"srctestjavacomjsoniteroutputTestSpiTypeEncoder.java","version":"0.9.22","methodName":"test_TypeEncoder_for_type_literal-TestSpiTypeEncoder-","callMethodNameReferTo":{"83":"srcmainjavacomjsoniteroutputJsonStream.java-serialize-JsonStream-Object-OutputStream"},"num":92,"succs":[[1,11],[19,2],[3,61],[4,69],[5,77],[88],[8,10,9,7],[],[9],[],[3,1,2,5,0,4],[15],[13],[],[13,12],[13,17,16],[13],[18],[],[22,12,21,20],[],[],[23],[],[25,26,33,29,30,7,28,31,27],[],[27],[],[35,38],[39,37],[32],[],[],[40,41],[35],[],[37],[],[],[],[42],[51],[45],[34],[43],[46,47,43],[43],[48,34],[49,50],[],[],[52,36,53],[],[54,55],[56,57],[],[58,44,59],[],[],[60],[],[65],[63],[],[62],[67,66,63],[63],[68],[],[71,70,72],[73,62],[],[74,75],[],[],[76],[],[81],[64,14,79],[],[78],[83,78,82],[78],[85,14,84,86],[],[],[64,79,87],[],[90,89,80],[],[91],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_TypeEncoder_for_type_literal ","Block Stmt ","Variable Declaration Expr ","Class Expr Float.class ","Simple Name typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral<List<MyDate>> typeLiteral = ","Method Call Expr ","Object Creation Expr TypeLiteral<List<MyDate>> Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerTypeEncoder ","Object Creation Expr Encoder Optional.empty Optional.empty ","Class Or Interface Type Encoder ","Try Stmt ","Marker Annotation Expr @Override ","Null Literal Expr ","Simple Name encode ","Parameter Object obj ","Parameter JsonStream stream ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr obj ","Simple Name obj ","Simple Name toLong ","Simple Name stream ","Class Or Interface Type Object ","Class Or Interface Type JsonStream ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Simple Name toInt ","Name Expr dates ","Variable Declarator List<MyDate> dates = ","Class Or Interface Type List ","Cast Expr ","Class Or Interface Type List ","Simple Name List ","Class Or Interface Type MyDate ","Method Call Expr ","Simple Name writeVal ","Method Call Expr ","Field Access Expr ","Simple Name getTime ","Method Call Expr ","Simple Name date ","Simple Name get ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Variable Declaration Expr ","Simple Name append ","Simple Name myDate ","Name Expr myDate ","Variable Declarator MyDate myDate = ","Simple Name append ","Object Creation Expr MyDate Optional.empty Optional.empty ","Simple Name create ","Method Call Expr ","Return Stmt ","ASSIGN","Object Creation Expr Date Optional.empty Optional.empty ","Class Or Interface Type Type ","Class Or Interface Type Date ","Long Literal Expr Note Zero  ","LongLiteralExpr","Variable Declaration Expr ","Method Call Expr ","Class Or Interface Type IOException ","Name Expr output ","Variable Declarator String output = ","Simple Name append ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name singletonList ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","StringLiteralExpr"]}
