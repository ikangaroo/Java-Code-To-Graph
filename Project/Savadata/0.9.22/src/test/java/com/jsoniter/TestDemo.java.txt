{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","hasMethodName":["test_bind_api-TestDemo-","test_any_api-TestDemo-","test_iterator_api-TestDemo-","test_abc-TestDemo-","test_iterator_api_and_bind-TestDemo-","test_empty_array_as_null-TestDemo-","test_iterator-TestDemo-","test_any_is_fun-TestDemo-","test_utf8-TestDemo-","test_deserialize-TestDemo-","test_generics-TestDemo-"]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_bind_api-TestDemo-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","26":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":38,"succs":[[1,11],[21,2],[30],[10,8,5,4,7,6],[],[6],[],[9],[],[],[1,2,0],[14],[13],[],[15,16,13],[13],[18,19,17],[],[],[20],[],[24],[12],[22],[22,26,25],[22],[28,12,27],[],[29],[],[33,31,32],[35,34],[],[23,36],[],[],[37],[]],"attribute":["Expression Stmt ","Assign Expr ASSIGN ","Variable Declaration Expr ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name useAppContext ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Simple Name val ","Integer Literal Expr Note Zero  ","Variable Declarator int[] val = ","Array Type 1 ","Method Call Expr ","Simple Name read ","Class Expr int[].class ","Array Type 1 ","Method Call Expr ","Name Expr JsonStream ","Simple Name setMode ","Array Access Expr 3 ","Simple Name append ","Name Expr val ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_any_api-TestDemo-","callMethodNameReferTo":{"26":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","15":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":31,"succs":[[1,10],[20],[7,9,4,3,6,5],[],[5],[],[8],[],[],[1,0],[13],[12],[],[14,15,12],[12],[16,18,17],[],[],[19],[],[23,22,21],[25,24],[],[28,26,27],[],[],[11,29],[],[30],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_any_api ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Name Expr slice ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Field Access Expr ","Name Expr encoder ","Method Call Expr ","Class Or Interface Type Object ","Name Expr val ","Method Call Expr ","Simple Name toInt ","Integer Literal Expr Note Zero  ","Class Or Interface Type Decoder ","IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_iterator_api-TestDemo-","callMethodNameReferTo":{"3":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","20":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","37":"srcmainjavacomjsoniterJsonIterator.java-readInt-JsonIterator-"},"num":44,"succs":[[1,14],[2,25],[3,33],[5,4,34,15],[2,35],[39],[13,8,9,11,10,7],[],[9],[],[12],[],[],[5,2,1,0],[18],[17,16],[],[15,16],[20,16,19],[16],[22,23,21],[],[],[24],[],[29],[27,17],[],[26],[30,27,31],[27],[32],[],[4],[],[36,26,37],[],[17,38],[],[28,40,41],[43,42],[],[],[]],"attribute":["Expression Stmt ","Method Call Expr ","For Each Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Return Stmt ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Name Expr iter ","Boolean Literal Expr true ","Simple Name head ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Name Expr Array ","String Literal Expr Not Empty  ","StringLiteralExpr","Expression Stmt ","Name Expr total ","Simple Name total ","Name Expr total ","Switch Entry Stmt ","Class Or Interface Type Any ","Name Expr i ","Zero IntegerLiteralExpr","Block Stmt ","Simple Name readArray ","Assign Expr PLUS ","PLUS","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Name Expr JsonStream ","Simple Name println ","Simple Name append ","Simple Name out "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_abc-TestDemo-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","32":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":47,"succs":[[11,1],[27,2],[36],[10,6,4,7,5,8],[],[6],[],[9],[],[],[0,1,2],[14],[13],[],[16,13,15],[13],[17,18,19],[],[],[20,22,21,23],[24],[],[25],[26],[],[],[],[30],[12],[28],[28,31,32],[28],[34,33,12],[],[35],[],[39,38,37],[],[24],[41,40],[45,44,42,43],[],[29,46],[],[24],[24],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Primitive Type long ","Binary Expr EQUALS ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Void Type ","Char Literal Expr 't' ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Name Expr field ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name abc ","Name Expr abc ","Variable Declarator ABC abc = ","Name Expr ctx ","Method Call Expr ","Null Literal Expr ","Class Expr ABC.class ","Class Or Interface Type ABC ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name object ","Field Access Expr ","Simple Name get ","String Literal Expr Not Empty  ","Simple Name Map ","Integer Literal Expr Zero  "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_iterator_api_and_bind-TestDemo-","callMethodNameReferTo":{"53":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","25":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","43":"srcmainjavacomjsoniterJsonIterator.java-readInt-JsonIterator-"},"num":68,"succs":[[16,1],[36,2],[3,38],[45,4],[5,47],[57,6],[61,7],[63],[11,10,15,12,9,13],[],[11],[],[14],[],[],[3,6,5,7,4,1,2,0],[23],[18],[],[18,17],[18,19],[18,20],[18,21],[18,24,25],[18],[26,27,28],[],[],[30,32,31,29],[33],[],[34],[35],[],[],[],[17,37],[],[41],[19],[39],[42,39,43],[39],[19,44],[],[20,46],[],[51],[21],[40,48],[49],[52,53,48],[48],[55,21,54],[],[56],[],[59,58,40],[60,49],[],[],[22,62],[],[65,50,64],[66,67],[],[],[]],"attribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_iterator_api_and_bind ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type java ","Char Literal Expr 't' ","Char Literal Expr 'r' ","Name Expr iter ","Name Expr iter ","Class Or Interface Type java ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Class Or Interface Type Object ","Simple Name readArray ","Variable Declaration Expr ","Class Or Interface Type Object ","Name Expr userId ","Variable Declarator int userId = ","Name Expr buf ","Method Call Expr ","Simple Name replace ","Assign Expr ASSIGN ","Simple Name readArray ","Variable Declaration Expr ","Simple Name user ","Primitive Type byte ","Name Expr user ","Variable Declarator User user = ","Class Or Interface Type User ","Method Call Expr ","Name Expr iter ","Class Expr User.class ","Class Or Interface Type User ","Assign Expr ASSIGN ","Return Stmt ","ASSIGN","Simple Name userId ","Class Or Interface Type Object ","Simple Name readArray ","Method Call Expr ","Expression Stmt ","Primitive Type boolean ","Simple Name append ","Simple Name get "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_empty_array_as_null-TestDemo-","callMethodNameReferTo":{"112":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","98":"srcmainjavacomjsoniterspiTypeLiteral.java-getDecoderCacheKey-TypeLiteral-","101":"srcmainjavacomjsoniterspiTypeLiteral.java-create-TypeLiteral-Type","118":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","105":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":122,"succs":[[16,1],[107,2],[116],[5,6,8,10,4,7],[],[6],[],[9],[],[],[2,0,1],[3,21,44,45],[3,21,44,52],[3,21,53,44],[88,3,55,21,44],[3,55,21,105,44],[17,19,18],[],[],[20],[],[27,26,23,22,4,24,25],[],[24],[],[29,35],[36,32],[13,38,37],[29],[],[28,29],[32],[],[31,32],[31,32,33],[],[],[40,39],[47,48],[28,42,41],[11],[],[43],[],[],[46],[],[49,50,31],[12],[],[51],[],[46],[54],[],[59,57,56,61,58,7,4,60],[],[58],[],[67,63],[],[68],[63],[],[63,62,69,65],[79,64,63,69],[64,63,62,69],[],[70,71,69],[72,74,73],[78],[89,15],[75,62],[],[76,77],[],[],[],[79,81,80],[82,64],[83],[14],[],[84],[85,87,86,65],[],[43],[43],[46],[90],[93],[34,30,33],[91],[91,95,94],[91],[98,96,97,33],[],[30,100,99],[101,102],[],[43],[34,103,104],[],[],[],[106,66,92],[],[110],[109],[],[109,111,112],[109],[113,114,115],[],[],[43],[117,118],[],[119,108,120],[],[121],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_empty_array_as_null ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Class Or Interface Type JsonIterator ","Return Stmt ","Class Or Interface Type TestObject17 ","Return Stmt ","Method Call Expr ","Simple Name assertFalse ","Simple Name registerExtension ","Object Creation Expr EmptyExtension Optional.empty Optional.empty ","Class Or Interface Type EmptyExtension ","Method Declaration ","Marker Annotation Expr @Override ","Name Expr encoder ","Simple Name createDecoder ","Parameter final String cacheKey ","Parameter final Type type ","Block Stmt ","Name Expr cacheKey ","Simple Name cacheKey ","Name Expr cacheKey ","Name Expr type ","Simple Name type ","Name Expr type ","Name Expr type ","Class Or Interface Type String ","Class Or Interface Type Type ","If Stmt ","If Stmt ","Method Call Expr ","Block Stmt ","Simple Name endsWith ","String Literal Expr Not Empty  ","StringLiteralExpr","ReturnStmt","Null Literal Expr ","NullLiteralExpr","Binary Expr NOT_EQUALS ","Block Stmt ","NOT_EQUALS","Class Expr TestObject2.class ","Class Or Interface Type TestObject2 ","Simple Name read ","Object Creation Expr Decoder Optional.empty Optional.empty ","Class Or Interface Type Decoder ","Method Declaration Throws ","String Literal Expr Not Empty  ","Class Or Interface Type Object ","Simple Name decode ","Parameter JsonIterator iter1 ","Class Or Interface Type IOException ","Block Stmt ","Name Expr iter1 ","Simple Name iter1 ","Name Expr iter1 ","Name Expr iter1 ","Name Expr iter1 ","Class Or Interface Type JsonIterator ","If Stmt ","Binary Expr EQUALS ","Block Stmt ","Block Stmt ","Expression Stmt ","EQUALS","Field Access Expr ","Parameter Object val ","Name Expr ValueType ","Simple Name ARRAY ","If Stmt ","Method Call Expr ","Block Stmt ","Block Stmt ","Class Or Interface Type ClassInfo ","Throw Stmt ","Method Call Expr ","Class Or Interface Type IOException ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Null Literal Expr ","Expression Stmt ","Variable Declaration Expr ","Simple Name typeLiteral ","Name Expr typeLiteral ","Variable Declarator TypeLiteral typeLiteral = ","Class Or Interface Type TypeLiteral ","Object Creation Expr TypeLiteral Optional.empty Optional.empty ","Class Or Interface Type TypeLiteral ","Binary Expr PLUS ","Method Call Expr ","PLUS","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getDecoderCacheKey ","Name Expr TypeLiteral ","Simple Name create ","Method Call Expr ","Simple Name read ","Variable Declaration Expr ","Null Literal Expr ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Method Call Expr ","Name Expr iter ","Class Expr TestObject2.class ","Class Or Interface Type TestObject2 "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_iterator-TestDemo-","callMethodNameReferTo":{"66":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","70":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","102":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","106":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","43":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","75":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","79":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","115":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","84":"srcmainjavacomjsoniterJsonIterator.java-whatIsNext-JsonIterator-","119":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","57":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","90":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","123":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","61":"srcmainjavacomjsoniterJsonIterator.java-readArray-JsonIterator-","95":"srcmainjavacomjsoniterJsonIterator.java-whatIsNext-JsonIterator-"},"num":125,"succs":[[1,24],[2,54],[3,59],[4,63],[68,5],[72,6],[7,77],[8,81],[88,9],[10,92],[11,99],[12,104],[108,13],[14,113],[15,117],[121],[23,20,21,17,18,19],[],[19],[],[22],[],[],[1,4,2,3,10,5,13,14,8,15,6,7,12,9,11,0],[41],[26],[],[26,25],[26,27],[26,28],[29,26],[26,30],[26,31],[26,32],[33,26],[26,34],[26,35],[26,36],[26,37],[26,38],[26,39],[26,43,42],[26],[45,46,44],[],[],[50,47,49,48],[51],[],[52],[53],[],[],[],[57,55,56],[],[51],[25,58],[],[61,60],[],[62,27],[],[66,65,64],[],[51],[67,28],[],[70,69],[],[29,71],[],[75,74,73],[],[51],[76,30],[],[79,78],[],[31,80],[],[82,84,83],[],[86,85],[32,87],[],[],[],[89,90],[],[33,91],[],[93,95,94],[],[97,96],[34,98],[],[],[],[100,101,102],[],[51],[35,103],[],[105,106],[],[36,107],[],[109,111,110],[],[51],[37,112],[],[115,114],[],[116,38],[],[118,119],[],[39,120],[],[122,123],[],[40,124],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_iterator ","Throws","Simple Name typeLiteral ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","This Expr ","Name Expr iter ","Simple Name size ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Name Expr iter ","Null Literal Expr ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Array Access Expr pos + 2 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Assign Expr PLUS ","Field Access Expr ","Method Call Expr ","Simple Name readObject ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name ARRAY ","Simple Name whatIsNext ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name readArray ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name STRING ","Simple Name whatIsNext ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Variable Declaration Expr ","Method Call Expr ","Simple Name assertEquals ","Simple Name get ","String Literal Expr Not Empty  ","Simple Name readString ","Return Stmt ","Class Or Interface Type TestObject8 ","Method Call Expr ","Simple Name readArray ","Return Stmt ","Variable Declaration Expr ","Method Call Expr ","Simple Name readArray ","Return Stmt ","Simple Name assertNull ","Method Call Expr ","Simple Name readObject "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_any_is_fun-TestDemo-","callMethodNameReferTo":{"162":"srcmainjavacomjsoniteroutputJsonStream.java-serialize-JsonStream-Object","67":"srcmainjavacomjsoniteranyAny.java-asList-Any-","99":"srcmainjavacomjsoniteranyAny.java-toBoolean-Any-Object","131":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","69":"srcmainjavacomjsoniteranyAny.java-wrap-Any-int","197":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","70":"srcmainjavacomjsoniteranyAny.java-get-Any-int","103":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","237":"srcmainjavacomjsoniteranyAny.java-entries-Any-","142":"srcmainjavacomjsoniteroutputJsonStream.java-serialize-JsonStream-Object","80":"srcmainjavacomjsoniteroutputJsonStream.java-serialize-JsonStream-Object","176":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","208":"srcmainjavacomjsoniteranyAny.java-valueType-Any-","113":"srcmainjavacomjsoniteranyAny.java-toBoolean-Any-Object","145":"srcmainjavacomjsoniteranyAny.java-get-Any-Object[]-int","117":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","55":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","151":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","89":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","218":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String","189":"srcmainjavacomjsoniteranyAny.java-object-Any-","127":"srcmainjavacomjsoniteranyAny.java-toBoolean-Any-Object","191":"srcmainjavacomjsoniteranyAny.java-get-Any-Object[]-int"},"num":255,"succs":[[34,1],[2,66],[3,77],[87,4],[5,97],[102,6],[7,111],[8,116],[125,9],[10,130],[11,139],[150,12],[13,159],[175,14],[15,184],[16,196],[17,205],[18,217],[20,19,226],[52,20],[21,228],[230,22],[239,23],[240,24,232,19],[25,241],[248,22],[31,29,28,33,27,30],[],[29],[],[32],[],[],[16,17,1,11,12,9,8,6,13,4,2,0,3,7,18,15,5,10,14],[53],[36],[],[36,35],[36,37],[38],[39,38],[40],[40,41],[42],[42,43],[44],[44,45],[46],[46,47],[48],[48,49],[50],[50,51],[54,55,36],[36],[57,56,58],[],[],[62,59,60,61],[63],[],[64],[65],[],[],[],[68,69,67],[71,70],[],[75,76,74],[73,72,35],[],[],[63],[],[],[63],[79,78,80],[],[82,81,84,83],[85,86,37],[63],[],[64],[65],[],[],[88,38,89],[],[92,91,90],[],[],[93,96,95,94],[63],[],[64],[65],[99,98],[],[39,100,101],[],[63],[88,40,103],[105,106,104],[],[],[109,107,108,110],[63],[],[64],[65],[112,113],[],[114,115,41],[],[63],[88,42,117],[118,120,119],[],[],[122,124,123,121],[63],[],[64],[65],[127,126],[],[43,129,128],[],[63],[88,44,131],[132,134,133],[],[],[138,135,137,136],[63],[],[64],[65],[141,140,142],[],[63],[143,144,145],[],[],[146,148,147,45],[],[149],[63],[],[46,151,88],[153,154,152],[],[],[156,158,157,155],[63],[],[64],[65],[161,160,162],[],[163,164,166,165],[169,168,167],[63],[],[64],[65],[],[],[171,173,47,172,170],[],[149],[149],[174],[],[88,48,176],[177,179,178],[],[],[181,183,180,182],[63],[],[64],[65],[185,187,186],[],[188],[189,190],[],[191,192],[],[195,193,49,194],[],[],[174],[63],[88,50,197],[198,200,199],[],[],[202,201,203,204],[63],[],[64],[65],[208,207,206],[],[209,210],[211,212],[],[],[213,216,215,51,214],[],[],[174],[63],[63],[218,88,52],[219,220,221],[],[],[223,222,225,224],[63],[],[64],[65],[21,22],[228],[229],[228],[235],[227],[231,234],[231,232],[233,231],[231,236,237],[231],[227,238],[],[24,25],[],[242,243,244],[245,246],[],[247,233],[],[],[],[251,249,250],[253,252],[],[254,234],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","For Stmt ","Name Expr any ","Variable Declaration Expr ","Expression Stmt ","While Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_any_is_fun ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Class Or Interface Type Any ","Simple Name any ","Name Expr any ","Class Or Interface Type Any ","Name Expr any ","Name Expr any ","Name Expr Any ","Name Expr ctx ","Name Expr any ","Primitive Type int ","Name Expr any ","Name Expr obj ","Name Expr any ","Primitive Type int ","Name Expr any ","Primitive Type int ","Char Literal Expr ':' ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Method Call Expr ","Simple Name add ","Method Call Expr ","Method Call Expr ","Simple Name asList ","Name Expr pos ","Continue Stmt ","Name Expr Any ","Simple Name wrap ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Name Expr JsonStream ","Simple Name serialize ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Name Expr JsoniterSpi ","Method Call Expr ","Simple Name toBoolean ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name toBoolean ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Return Stmt ","Method Call Expr ","Simple Name toBoolean ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name get ","Char Literal Expr '*' ","String Literal Expr Not Empty  ","'*'","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Array Access Expr 0 ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Name Expr JsonStream ","Simple Name serialize ","Method Call Expr ","Simple Name get ","Char Literal Expr '*' ","Char Literal Expr '*' ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Method Call Expr ","Simple Name assertEquals ","Class Expr Long.class ","Method Call Expr ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getClass ","Method Call Expr ","Simple Name object ","Simple Name get ","Integer Literal Expr Zero  ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Expression Stmt ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Simple Name nextToken ","Simple Name INVALID ","Method Call Expr ","Simple Name valueType ","Simple Name get ","Integer Literal Expr Zero  ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","Block Stmt ","Name Expr record ","Simple Name append ","Primitive Type int ","Variable Declaration Expr ","Simple Name entries ","Name Expr entries ","Name Expr entries ","Name Expr entries ","Variable Declarator Any.EntryIterator entries = ","Class Or Interface Type EntryIterator ","Method Call Expr ","Simple Name valueOf ","Block Stmt ","Simple Name next ","Method Call Expr ","Binary Expr EQUALS ","Simple Name println ","Method Call Expr ","Simple Name append ","String Literal Expr Not Empty  ","Simple Name key ","Method Call Expr ","Field Access Expr ","Simple Name println ","Method Call Expr ","Simple Name buffer ","Char Literal Expr '[' ","Simple Name value "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_utf8-TestDemo-","callMethodNameReferTo":{"20":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":31,"succs":[[1,8],[2,15],[25],[6,7,5,4],[],[6],[],[2,1,0],[11],[10],[],[12,13,10],[10],[14],[],[18],[9],[16],[20,19,16],[16],[23,9,22,21],[],[],[24],[],[27,28,26],[],[29],[17,30],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name available ","Block Stmt ","Variable Declaration Expr ","Name Expr input ","Name Expr lines ","Variable Declarator String input = ","Simple Name append ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Variable Declarator TestObject obj = ","Class Or Interface Type TestObject ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Class Expr TestObject.class ","Class Or Interface Type TestObject ","Method Call Expr ","Return Stmt ","Name Expr i ","Field Access Expr ","Zero IntegerLiteralExpr","Simple Name commentCount "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_deserialize-TestDemo-","callMethodNameReferTo":{"14":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":21,"succs":[[1,7],[14],[5,6,4,3],[],[5],[],[1,0],[10],[9],[],[12,11,9],[9],[13],[],[18,15,16,17],[],[],[8,19],[20],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_deserialize ","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name str ","Variable Declarator String str = ","Class Or Interface Type String ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","Class Expr HashMap.class ","Simple Name getBytes ","Class Or Interface Type HashMap "]}
{"fileName":"srctestjavacomjsoniterTestDemo.java","version":"0.9.22","methodName":"test_generics-TestDemo-","callMethodNameReferTo":{},"num":117,"succs":[[1,7],[106],[6,3,5,4],[],[5],[],[1,0],[10],[9],[],[12,11,9],[9],[14,16,13,15],[],[],[19,18,17],[105],[20,18,21],[],[104],[22,18,23],[104],[24,25,18],[104],[26,18,27],[104],[29,28,18],[104],[31,18,30],[104],[32,33,18],[104],[35,18,34],[104],[37,18,36],[104],[39,18,38],[104],[41,18,40],[104],[18,43,42],[104],[44,18,45],[104],[46,47,18],[104],[48,18,49],[104],[50,18,51],[104],[52,53,18],[104],[55,18,54],[104],[18,57,56],[104],[58,59,18],[104],[61,18,60],[104],[62,18,63],[104],[65,64,18],[104],[67,18,66],[104],[18,68,69],[104],[70,18,71],[104],[73,18,72],[104],[74,75,18],[104],[76,18,77],[104],[79,18,78],[104],[18,80,81],[104],[83,82,18],[104],[84,18,85],[104],[87,18,86],[104],[88,89,18],[104],[90,91,18],[104],[93,18,92],[104],[18,94,95],[104],[97,18,96],[104],[99,18,98],[104],[100,18,101],[104],[18,103,102],[104],[104],[104],[],[],[108,109,107],[],[104],[111,110],[114,112,113],[],[115,8],[],[116],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Return Stmt ","Block Stmt ","Variable Declaration Expr ","Name Expr objs ","Simple Name objs ","Variable Declarator CollectionResponse<Feed> objs = ","Class Or Interface Type CollectionResponse ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Object Creation Expr TypeLiteral<CollectionResponse<Feed>> Optional.empty Optional.empty ","Binary Expr PLUS ","PLUS","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Variable Declarator int i = ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Array Type 1 ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Array Access Expr (int) (bits & 0xff) ","Binary Expr PLUS ","Simple Name handle ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Method Call Expr ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Name Expr value ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","String Literal Expr Not Empty  ","Binary Expr PLUS ","Expression Stmt ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  ","StringLiteralExpr","Class Or Interface Type TypeLiteral ","Expression Stmt ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","Method Call Expr ","Simple Name id ","Field Access Expr ","Simple Name get ","Integer Literal Expr Zero  ","Simple Name results ","Zero IntegerLiteralExpr"]}
