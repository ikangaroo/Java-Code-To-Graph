{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","hasMethodName":["test_empty_class-TestObject-","test_empty_object-TestObject-","test_one_field-TestObject-","test_two_fields-TestObject-","test_read_null-TestObject-","test_native_field-TestObject-","test_inheritance-TestObject-","test_incomplete_field_name-TestObject-","getSomeService-TestObject.IDependenceInjectedObject-","getSomeService-TestObject.DependenceInjectedObject-","test_object_creation-TestObject-","test_enum-TestObject-","test_maybe_empty_array_field-TestObject-","test_iterator-TestObject-","setFieldXXX-TestObject.TestObject7-PrivateSub","test_private_ref-TestObject-","setField1-TestObject.TestObject8-String","test_setter_is_preferred-TestObject-","skip_object_lazy_any_to_string-TestObject-","test_non_ascii_field-TestObject-"]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_empty_class-TestObject-","callMethodNameReferTo":{"22":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","15":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":26,"succs":[[10,1],[20],[9,4,3,6,7,5],[],[5],[],[8],[],[],[1,0],[13],[12],[],[14,15,12],[12],[18,16,17],[],[],[19],[],[21,22],[],[23,11,24],[],[25],[]],"attribute":["Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_long_double ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr head ","Simple Name iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Name Expr slice ","Simple Name data ","StringLiteralExpr","Method Call Expr ","Simple Name assertNotNull ","Method Call Expr ","Name Expr iter ","Class Expr EmptyClass.class ","Class Or Interface Type EmptyClass "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_empty_object-TestObject-","callMethodNameReferTo":{"33":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","81":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","51":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","68":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","40":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","42":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","90":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","75":"srcmainjavacomjsoniteranyAny.java-size-Any-"},"num":97,"succs":[[19,1],[38,2],[42,3],[46,4],[5,55],[6,59],[7,63],[8,72],[81,9],[10,85],[92],[13,14,18,16,12,15],[],[14],[],[17],[],[],[10,5,6,1,4,7,3,8,0,9,2],[31],[21],[],[20,21],[21,22],[23,21],[24,21],[25,21],[26,21],[27,21],[28,21],[29,21],[33,32,21],[21],[35,36,34],[],[],[37],[],[40,39],[],[41,20],[],[43,22,44],[],[45,23],[],[49],[24],[47],[51,50,47],[47],[24,52,53],[],[54],[],[56,57],[],[48,58],[],[61,25,60],[],[26,62],[],[66],[27],[64],[64,68,67],[64],[70,27,69],[],[71],[],[74,73,75],[],[76],[77,78],[],[79],[],[65,80],[],[82,28,83],[],[29,84],[],[88],[30],[86],[86,90,89],[86],[30,91],[],[95,94,93],[],[76],[96,87],[]],"attribute":["Method Call Expr ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Return Stmt ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Boolean Literal Expr true ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr type ","Void Type ","Simple Name iter ","Name Expr desc ","Simple Name lang ","Void Type ","Variable Declarator JsonIterator iter = ","Return Stmt ","Method Call Expr ","Name Expr JsonIterator ","Name Expr Array ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Name Expr jsonStream ","Method Call Expr ","Simple Name extensions ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Method Call Expr ","String Literal Expr Not Empty  ","Name Expr simpleObj ","Variable Declarator SimpleObject simpleObj = ","Field Access Expr ","Method Call Expr ","Simple Name read ","Class Expr SimpleObject.class ","Class Or Interface Type SimpleObject ","Method Call Expr ","Name Expr JsonStream ","Field Access Expr ","Simple Name field1 ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name put ","Variable Declaration Expr ","Simple Name Map ","Name Expr obj ","Variable Declarator Object obj = ","Simple Name append ","Method Call Expr ","Name Expr iter ","Class Expr Object.class ","Name Expr String ","Variable Declaration Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Zero IntegerLiteralExpr","Enclosed Expr ","Simple Name size ","Cast Expr ","Class Or Interface Type Map ","Method Call Expr ","Simple Name reset ","Name Expr cacheKey ","Simple Name buf ","Variable Declaration Expr ","Simple Name len ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Class Or Interface Type JsonStream ","Class Or Interface Type Long "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_one_field-TestObject-","callMethodNameReferTo":{"96":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","101":"srcmainjavacomjsoniteranyAny.java-toString-Any-Object","38":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","73":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","107":"srcmainjavacomjsoniteranyAny.java-valueType-Any-","110":"srcmainjavacomjsoniteranyAny.java-get-Any-int","114":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","52":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","86":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","57":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","121":"srcmainjavacomjsoniteranyAny.java-get-Any-int","61":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","127":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-"},"num":129,"succs":[[1,22],[49,2],[3,54],[59,4],[63,5],[6,67],[7,77],[82,8],[9,86],[10,90],[98,11],[12,104],[114,13],[118],[17,19,21,15,18,16],[],[17],[],[20],[],[],[6,1,10,12,3,7,5,9,11,0,2,13,8,4],[36],[24],[],[23,24],[25,24],[26,24],[27,24],[28,24],[24,29],[24,30],[24,31],[32,24],[33,24],[34,24],[37,24,38],[24],[39,40,41],[],[],[45,44,43,42],[46],[],[47],[48],[],[],[],[52,50,51],[],[46],[23,53],[],[56,57,55],[],[46],[58,25],[],[60,61],[],[26,62],[],[64,65,27],[],[28,66],[],[71],[29],[68],[69,68],[73,72,68],[68],[74,75,29],[],[76],[],[79,80,78],[],[46],[69,81],[],[84,83],[],[85,70],[],[87,30,88],[],[89,31],[],[94],[32],[91],[91,92],[95,96,91],[91],[32,97],[],[100,101,99],[],[46],[103,92,102],[],[46],[106,105,107],[],[108,109],[111,110],[],[],[93,112,113],[],[],[46],[115,116,33],[],[117,34],[],[119,120,121],[],[46],[124,123,122],[125],[],[46],[126,127],[],[35,128],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_one_field ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Name Expr iter ","Char Literal Expr 'n' ","Name Expr iter ","Simple Name size ","Name Expr list ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Expression Stmt ","Method Call Expr ","Name Expr JsonIterator ","Simple Name field ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readObject ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Class Expr User.class ","Method Call Expr ","Name Expr JsonStream ","Method Call Expr ","Simple Name readObject ","Assign Expr ASSIGN ","Simple Name reset ","Field Access Expr ","Integer Literal Expr Note Zero  ","Expression Stmt ","Simple Name simpleObj ","Name Expr simpleObj ","Name Expr simpleObj ","Variable Declarator SimpleObject simpleObj = ","Simple Name assertEquals ","Method Call Expr ","Simple Name read ","Class Expr SimpleObject.class ","Class Or Interface Type SimpleObject ","Method Call Expr ","Expression Stmt ","Simple Name readInt ","Field Access Expr ","Simple Name field1 ","Expression Stmt ","Name Expr jsonStream ","Field Access Expr ","Name Expr result ","Method Call Expr ","Simple Name reset ","Simple Name iterator ","Simple Name buf ","Assign Expr ASSIGN ","Name Expr ctx ","Name Expr any ","Name Expr any ","Variable Declarator Any any = ","Name Expr ctx ","Method Call Expr ","Simple Name readAny ","Expression Stmt ","Simple Name assertEquals ","Name Expr Integer ","Method Call Expr ","Simple Name toString ","String Literal Expr Not Empty  ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Simple Name INVALID ","Method Call Expr ","Simple Name valueType ","Simple Name get ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name reset ","Name Expr cacheKey ","Simple Name buf ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Method Call Expr ","Enclosed Expr ","Simple Name get ","String Literal Expr Not Empty  ","Cast Expr ","Class Or Interface Type Map ","Method Call Expr ","Simple Name read "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_two_fields-TestObject-","callMethodNameReferTo":{"65":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","129":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","70":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","167":"srcmainjavacomjsoniterJsonIterator.java-skip-JsonIterator-","75":"srcmainjavacomjsoniterJsonIterator.java-readString-JsonIterator-","46":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","142":"srcmainjavacomjsoniterJsonIterator.java-readObjectCB-JsonIterator-ReadObjectCallback-Object","79":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","81":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","115":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","120":"srcmainjavacomjsoniteranyAny.java-toString-Any-Object","91":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","60":"srcmainjavacomjsoniterJsonIterator.java-readObject-JsonIterator-","126":"srcmainjavacomjsoniteranyAny.java-toString-Any-Object"},"num":180,"succs":[[1,27],[2,57],[62,3],[67,4],[5,72],[77,6],[81,7],[8,85],[9,95],[100,10],[105,11],[109,12],[117,13],[14,123],[15,129],[133,16],[142,17],[173],[21,25,20,23,22,19],[],[21],[],[24],[],[],[15,8,17,5,2,13,9,12,7,6,11,10,0,14,1,16,3,4],[18,170,169,147],[44],[29],[],[28,29],[30,29],[31,29],[32,29],[33,29],[34,29],[35,29],[36,29],[37,29],[38,29],[29,39],[40,29],[41,29],[156,29,42],[46,45,29],[29],[48,47,49],[],[],[50,51,52,53],[54],[],[55],[56],[],[],[],[60,59,58],[],[54],[28,61],[],[64,63,65],[],[54],[30,66],[],[70,69,68],[],[54],[31,71],[],[75,73,74],[],[54],[32,76],[],[79,78],[],[33,80],[],[82,83,34],[],[35,84],[],[89],[36],[86],[87,86],[86,91,90],[86],[93,92,36],[],[94],[],[97,98,96],[],[54],[87,99],[],[102,101,103],[],[54],[104,88],[],[107,37,106],[],[38,108],[],[113],[39],[110],[111,110],[114,110,115],[110],[116,39],[],[120,118,119],[],[54],[122,111,121],[],[54],[124,126,125],[],[54],[112,127,128],[],[54],[131,130,40],[],[41,132],[],[138,137],[135],[],[134,135],[],[140,135,139],[135],[141],[],[144,145,143,42],[],[146],[172],[],[152,149,155,150,153,22,19,148,154,151],[],[150],[],[156,159],[158,160],[161,162],[],[163,164,26],[],[158],[],[],[],[],[],[165],[167],[134,166,157],[],[43,168],[],[],[171],[],[],[136,174,175],[],[179,176,177,178],[],[],[54],[54]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Return Stmt ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Variable Declaration Expr ","Name Expr iter ","String Literal Expr Not Empty  ","Name Expr iter ","Name Expr iter ","Name Expr iter ","This Expr ","This Expr ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Void Type ","Class Or Interface Type Type ","Name Expr Long ","Name Expr iter ","Name Expr mode ","Variable Declarator JsonIterator iter = ","Method Declaration ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Method Call Expr ","Class Or Interface Type JsonProperty ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readObject ","Expression Stmt ","Array Access Expr count++ ","Simple Name binding ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readObject ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name readString ","Method Call Expr ","Simple Name assertNull ","Method Call Expr ","Simple Name readObject ","Method Call Expr ","Simple Name reset ","Name Expr IterImpl ","Primitive Type int ","Variable Declaration Expr ","Array Access Expr idx ","Simple Name serialize ","Name Expr simpleObj ","Variable Declarator SimpleObject simpleObj = ","Return Stmt ","Method Call Expr ","Name Expr tail ","Class Expr SimpleObject.class ","Class Or Interface Type SimpleObject ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name field1 ","Method Call Expr ","Array Access Expr count++ ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name field2 ","Assign Expr ASSIGN ","Simple Name reset ","Field Access Expr ","Unary Expr -- ","Variable Declaration Expr ","Primitive Type int ","Name Expr pos ","Name Expr any ","Return Stmt ","Name Expr ctx ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Primitive Type int ","Variable Declaration Expr [FINAL] ","Break Stmt ","Simple Name fields ","Class Or Interface Type Object ","FINAL","Variable Declarator ArrayList<String> fields = ","Class Or Interface Type ArrayList ","Object Creation Expr ArrayList<String> Optional.empty Optional.empty ","Class Or Interface Type ArrayList ","Method Call Expr ","Simple Name readObjectCB ","Object Creation Expr JsonIterator.ReadObjectCallback Optional.empty Optional.empty ","Void Type ","Class Or Interface Type ReadObjectCallback ","Method Declaration Throws ","Marker Annotation Expr @Override ","Primitive Type boolean ","Class Or Interface Type String ","Parameter JsonIterator iter ","Parameter String field ","Parameter Object attachment ","Class Or Interface Type IOException ","Block Stmt ","Simple Name iter ","Name Expr field ","Simple Name field ","Class Or Interface Type JsonIterator ","Class Or Interface Type String ","Class Or Interface Type Object ","Simple Name attachment ","Expression Stmt ","Expression Stmt ","Simple Name test_null_as_Long ","Simple Name get ","Method Call Expr ","Simple Name iter ","ReturnStmt","Boolean Literal Expr true ","true","NullLiteralExpr","Variable Declaration Expr ","Array Access Expr count++ ","Method Call Expr ","Name Expr Arrays ","Array Type 1 ","String Literal Expr Not Empty  ","String Literal Expr Not Empty  "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_read_null-TestObject-","callMethodNameReferTo":{"66":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","51":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","71":"srcmainjavacomjsoniteranyAny.java-valueType-Any-","40":"srcmainjavacomjsoniterJsonIterator.java-readNull-JsonIterator-","57":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","42":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","27":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":77,"succs":[[1,16],[2,38],[3,42],[46,4],[5,55],[6,57],[7,61],[68],[10,13,15,11,12,9],[],[11],[],[14],[],[],[7,2,5,1,6,3,0,4],[25],[18],[],[17,18],[19,18],[20,18],[18,21],[22,18],[23,18],[27,26,18],[18],[29,30,28],[],[],[31,34,32,33],[35],[],[36],[37],[],[],[],[40,39],[],[17,41],[],[19,44,43],[],[20,45],[],[49],[21],[47],[47,51,50],[47],[53,52,21],[],[54],[],[48,56],[],[59,22,58],[],[60,23],[],[64],[24],[62],[66,62,65],[62],[67,24],[],[69,70,71],[],[72,73],[74,75],[],[],[63,76],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr [FINAL] ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_read_null ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Void Type ","String Literal Expr Not Empty  ","Name Expr desc ","Name Expr iter ","Name Expr iter ","This Expr ","Null Literal Expr ","Simple Name dLen ","Variable Declarator JsonIterator iter = ","Array Access Expr count++ ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Expression Stmt ","Simple Name assertTrue ","Method Call Expr ","Simple Name readNull ","Method Call Expr ","Simple Name reset ","Name Expr IterImpl ","Simple Name buf ","Expression Stmt ","Simple Name simpleObj ","Parameter int index ","Variable Declarator SimpleObject simpleObj = ","Simple Name assertEquals ","Method Call Expr ","Simple Name read ","Class Expr SimpleObject.class ","Class Or Interface Type SimpleObject ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name reset ","Array Type 1 ","Simple Name buf ","Variable Declaration Expr ","Name Expr idx ","Name Expr any ","Method Call Expr ","Primitive Type int ","Method Call Expr ","Simple Name readAny ","Method Call Expr ","Return Stmt ","Field Access Expr ","Method Call Expr ","Name Expr ValueType ","Name Expr desc ","Method Call Expr ","Simple Name dateStyle ","Simple Name get "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_native_field-TestObject-","callMethodNameReferTo":{"48":"srcmainjavacomjsoniterJsonIterator.java-reset-JsonIterator-byte[]","22":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","38":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","57":"srcmainjavacomjsoniterJsonIterator.java-readAny-JsonIterator-","62":"srcmainjavacomjsoniteranyAny.java-toInt-Any-Object"},"num":65,"succs":[[1,14],[2,33],[3,42],[48,4],[52,5],[59],[9,11,8,10,7,13],[],[9],[],[12],[],[],[2,3,1,0,5,4],[20],[16],[],[16,15],[17,16],[16,18],[16,22,21],[16],[25,23,24],[],[],[26,29,27,28],[30],[],[31],[32],[],[],[],[36],[15],[34],[38,37,34],[34],[39,40,15],[],[41],[],[44,43,45],[],[46],[47,35],[],[],[17,49,50],[],[51,18],[],[55],[19],[53],[57,56,53],[53],[58,19],[],[62,61,60],[],[46],[64,54,63],[],[30]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_native_field ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Name Expr keys ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name count ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name complexObject ","Name Expr complexObject ","Variable Declarator ComplexObject complexObject = ","Simple Name assertNotNull ","Method Call Expr ","Simple Name read ","Class Expr ComplexObject.class ","Class Or Interface Type ComplexObject ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Field Access Expr ","IntegerLiteralExpr","Simple Name field1 ","Method Call Expr ","Simple Name reset ","Field Access Expr ","Simple Name buf ","Variable Declaration Expr ","Name Expr ctx ","Name Expr idx ","Class Or Interface Type HashMap ","Class Or Interface Type Any ","Method Call Expr ","Class Or Interface Type Encoder ","Method Call Expr ","Assign Expr ASSIGN ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name toInt ","String Literal Expr Not Empty  "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_inheritance-TestObject-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]","32":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T"},"num":41,"succs":[[1,11],[27,2],[36],[6,10,5,8,4,7],[],[6],[],[9],[],[],[1,2,0],[14],[13],[],[16,13,15],[13],[19,17,18],[],[],[21,23,22,20],[24],[],[25],[26],[],[],[],[30],[12],[28],[31,28,32],[28],[34,12,33],[],[35],[],[39,38,37],[],[24],[29,40],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Expression Stmt ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name iter ","Simple Name head ","Variable Declarator JsonIterator iter = ","Simple Name assertEquals ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name replace ","Char Literal Expr ''' ","Char Literal Expr ''' ","StringLiteralExpr","'''","'''","Variable Declaration Expr ","Simple Name inheritedObject ","Name Expr inheritedObject ","Variable Declarator InheritedObject inheritedObject = ","Class Or Interface Type InheritedObject ","Method Call Expr ","Simple Name read ","Class Expr InheritedObject.class ","Class Or Interface Type InheritedObject ","Method Call Expr ","Expression Stmt ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name inheritedField "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_incomplete_field_name-TestObject-","callMethodNameReferTo":{"14":"srcmainjavacomjsoniterJsonIterator.java-read-JsonIterator-T","15":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":28,"succs":[[13,12,3,1],[14,2],[23],[27,26],[6,9,5,8,11,7],[],[7],[],[10],[],[],[0],[2,1],[25,3],[15,17,16],[19,20,18],[],[22],[],[],[21],[],[],[24],[],[],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Return Stmt ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_incomplete_field_name ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","Method Call Expr ","Method Call Expr ","Simple Name read ","Class Expr InheritedObject.class ","Simple Name assertEquals ","Simple Name parse ","String Literal Expr Not Empty  ","StringLiteralExpr","Class Or Interface Type InheritedObject ","Simple Name append ","Void Type ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"getSomeService-TestObject.IDependenceInjectedObject-","callMethodNameReferTo":{},"num":3,"succs":[[2,1],[2],[]],"attribute":["Method Declaration ","Name Expr stream ","Simple Name getSomeService "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"getSomeService-TestObject.DependenceInjectedObject-","callMethodNameReferTo":{},"num":8,"succs":[[3,4,1,2],[],[3],[],[5],[0,6,7],[],[]],"attribute":["If Stmt ","PUBLIC","Class Or Interface Type String ","Simple Name getSomeService ","Block Stmt ","Return Stmt ","ReturnStmt","Name Expr someService "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_object_creation-TestObject-","callMethodNameReferTo":{"56":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":70,"succs":[[13,1],[51,2],[62],[10,8,5,6,4,7],[],[6],[],[9],[],[],[0,1,2],[18,3,29,28],[3,39,47,28],[16,14,15],[],[],[17],[],[23,21,22,4,19,20],[],[21],[],[25,27],[11],[25],[],[25,24],[],[],[31,30,32],[33,24,34],[],[37,36,26],[],[35],[],[],[38],[],[40,43,44,42,4,41],[],[42],[],[45,46],[12],[],[],[48,49],[],[50],[],[54],[53],[],[55,53,56],[53],[58,59,60,57],[],[],[50],[61],[],[64,63,65],[],[50],[52,66,67],[],[69,68],[69],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_object_creation ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Return Stmt ","Return Stmt ","Method Call Expr ","Name Expr JsoniterSpi ","Simple Name registerExtension ","Object Creation Expr EmptyExtension Optional.empty Optional.empty ","Class Or Interface Type EmptyExtension ","Method Declaration ","Marker Annotation Expr @Override ","Primitive Type boolean ","Simple Name canCreate ","Parameter Class clazz ","Block Stmt ","Name Expr clazz ","Simple Name clazz ","Name Expr clazz ","Class Or Interface Type Class ","ReturnStmt","Binary Expr OR ","Method Call Expr ","OR","Method Call Expr ","Simple Name equals ","Class Expr DependenceInjectedObject.class ","Method Call Expr ","Simple Name equals ","Class Expr IDependenceInjectedObject.class ","Class Or Interface Type IDependenceInjectedObject ","If Stmt ","Marker Annotation Expr @Override ","Class Or Interface Type Object ","Simple Name create ","Parameter Class clazz ","Block Stmt ","Class Or Interface Type Class ","Simple Name clazz ","Object Creation Expr DependenceInjectedObject Optional.empty Optional.empty ","Class Or Interface Type DependenceInjectedObject ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Variable Declarator IDependenceInjectedObject obj = ","Class Or Interface Type IDependenceInjectedObject ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr IDependenceInjectedObject.class ","Class Or Interface Type IDependenceInjectedObject ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name getSomeService ","Method Declaration ","Name Expr stream ","Simple Name getSomeService "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_enum-TestObject-","callMethodNameReferTo":{"69":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","58":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","27":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","45":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":84,"succs":[[18,1],[2,34],[3,44,6,5,43],[45,4],[51,6],[54,55,6],[7,56],[64,8],[9,68],[75],[12,15,13,17,11,14],[],[13],[],[16],[],[],[2,0,7,9,1,8,6],[25],[20],[],[20,19],[21],[21,22],[23],[26,20,27],[20],[30,31,28,29],[],[],[32],[33],[],[],[37,36,35],[],[38,39],[42,19],[41,40],[],[],[],[],[3,4],[53,5],[49,46,48,47],[],[],[32],[50],[],[52],[],[],[],[],[57,21,58],[],[62,60,61,59],[],[],[32],[63],[],[66,65],[],[67,22],[],[69,23,57],[72,73,71,70],[],[],[32],[74],[],[78,76,77],[],[80,79],[83,24],[81,82],[],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Enclosed Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name buf ","Name Expr obj ","Name Expr obj ","Primitive Type int ","Name Expr obj ","Variable Declarator TestObject5 obj = ","Class Or Interface Type TestObject5 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject5.class ","StringLiteralExpr","Class Or Interface Type TestObject5 ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","Field Access Expr ","Simple Name clazz ","Name Expr TestObject5 ","Simple Name MyEnum ","Simple Name field1 ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject5.class ","Class Or Interface Type TestObject5 ","Method Call Expr ","Name Expr bits ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject5.class ","Class Or Interface Type TestObject5 ","Method Call Expr ","Field Access Expr ","Field Access Expr ","Simple Name field1 ","Assign Expr ASSIGN ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject5.class ","Class Or Interface Type TestObject5 ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Field Access Expr ","Parameter RuntimeException e ","Simple Name WOW ","Name Expr TestObject5 ","Simple Name MyEnum ","Simple Name field1 "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_maybe_empty_array_field-TestObject-","callMethodNameReferTo":{"16":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","29":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":43,"succs":[[1,9],[23,2],[3,27],[35],[6,5,8,7],[],[7],[],[3,1,2,0],[14],[11],[],[11,10],[12],[11,15,16],[11],[20,17,18,19],[],[],[21],[22],[],[],[24,25],[],[10,26],[],[28,29,12],[],[31,33,30,32],[],[],[21],[34],[],[37,36,38],[],[39],[40,41],[],[13,42],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_maybe_empty_array_field ","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Variable Declarator TestObject6 obj = ","Class Or Interface Type TestObject6 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject6.class ","StringLiteralExpr","Class Or Interface Type TestObject6 ","Method Call Expr ","Class Or Interface Type BigInteger ","Field Access Expr ","Simple Name field1 ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject6.class ","Class Or Interface Type TestObject6 ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Field Access Expr ","IntegerLiteralExpr","Field Access Expr ","Simple Name a ","Simple Name field1 "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_iterator-TestObject-","callMethodNameReferTo":{"64":"srcmainjavacomjsoniteranyAny.java-toInt-Any-","50":"srcmainjavacomjsoniteranyAny.java-entries-Any-","85":"srcmainjavacomjsoniteranyAny.java-toInt-Any-","101":"srcmainjavacomjsoniteranyAny.java-toInt-Any-","117":"srcmainjavacomjsoniteranyAny.java-toInt-Any-","71":"srcmainjavacomjsoniteranyAny.java-entries-Any-","27":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String"},"num":125,"succs":[[1,21],[2,32],[52,3],[56,4],[61,5],[6,69],[73,7],[77,8],[9,82],[89,10],[11,93],[98,12],[105,13],[109,14],[15,114],[121],[18,19,17,20],[],[19],[],[9,0,11,2,12,8,13,14,3,6,5,15,1,4,10,7],[25],[23],[],[23,22],[23,26,27],[23],[30,29,28],[],[],[31],[],[48],[22],[33],[34,33],[35,33],[24,36,33],[37],[38,37],[37,39],[40,37],[37,41],[42,37],[43,37],[37,44],[37,45],[46,37],[49,50,33],[33],[51,22],[],[53,54],[],[55,34],[],[59,58,57],[],[31],[60,35],[],[64,62,63],[],[65],[66,67],[],[68,36],[],[],[70,71,37],[],[24,72],[],[75,74],[],[38,76],[],[79,78,80],[],[31],[81,39],[],[84,85,83],[],[65],[86,87],[40,88],[],[],[91,90],[],[92,41],[],[96,95,94],[],[31],[42,97],[],[100,99,101],[],[65],[102,103],[104,43],[],[],[106,107],[],[108,44],[],[110,111,112],[],[31],[113,45],[],[115,117,116],[],[65],[118,119],[46,120],[],[],[123,122],[],[47,124],[]],"attribute":["Expression Stmt ","Return Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_iterator ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr any ","Variable Declarator Any any = ","Primitive Type int ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","StringLiteralExpr","Variable Declaration Expr ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type Gson ","Primitive Type byte ","Name Expr iter ","Name Expr sArr ","Void Type ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Variable Declarator Any.EntryIterator iter = ","Class Or Interface Type EntryIterator ","Method Call Expr ","Simple Name entries ","Method Call Expr ","Simple Name assertTrue ","Name Expr EMPTY_ARRAY ","Simple Name next ","Method Call Expr ","Field Access Expr ","String Literal Expr Not Empty  ","Name Expr nativeRead ","Simple Name key ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","IntegerLiteralExpr","Name Expr JsonIterator ","Simple Name toInt ","Simple Name value ","Assign Expr ASSIGN ","ASSIGN","Method Call Expr ","Simple Name entries ","Expression Stmt ","Simple Name assertTrue ","Method Call Expr ","Simple Name next ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Name Expr sIx ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name value ","Expression Stmt ","Simple Name assertTrue ","Method Call Expr ","Simple Name next ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name key ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name value ","Method Call Expr ","Simple Name assertTrue ","Method Call Expr ","Simple Name next ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name key ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Method Call Expr ","Method Call Expr ","Simple Name toInt ","Simple Name value ","Class Or Interface Type HashMap ","Simple Name assertFalse ","Method Call Expr ","Name Expr iter "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"setFieldXXX-TestObject.TestObject7-PrivateSub","callMethodNameReferTo":{},"num":8,"succs":[[5,1,3,2,4],[],[3],[],[6,7],[],[],[]],"attribute":["Method Declaration ","PUBLIC","Void Type ","Simple Name setFieldXXX ","Parameter PrivateSub obj ","Block Stmt ","Class Or Interface Type PrivateSub ","Simple Name obj "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_private_ref-TestObject-","callMethodNameReferTo":{"15":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":26,"succs":[[10,1],[22],[4,5,9,7,3,6],[],[5],[],[8],[],[],[0,1],[13],[12],[],[15,14,12],[12],[16,17,18,19],[],[],[20],[21],[],[],[24,23],[],[25,11],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_private_ref ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Simple Name obj ","Simple Name obj ","Variable Declarator TestObject7 obj = ","Class Or Interface Type TestObject7 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject7.class ","StringLiteralExpr","Class Or Interface Type TestObject7 ","Method Call Expr ","Simple Name assertNull ","Field Access Expr ","Simple Name field1 "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"setField1-TestObject.TestObject8-String","callMethodNameReferTo":{},"num":22,"succs":[[4,6,5,1,3,2],[],[],[4],[],[13,14],[15],[8,9],[],[10],[11],[],[13],[],[],[16],[18,19,17],[],[],[12,20,21],[11],[]],"attribute":["Method Declaration ","Normal Annotation Expr @JsonProperty(from = { 'field-1' }) ","PUBLIC","Simple Name wrap ","Simple Name setField1 ","Parameter String obj ","Block Stmt ","Member Value Pair ","Simple Name from ","Array Initializer Expr ","String Literal Expr Not Empty  ","StringLiteralExpr","Name Expr obj ","Simple Name val ","Class Or Interface Type String ","Expression Stmt ","Assign Expr ASSIGN ","Name Expr stream ","ASSIGN","Binary Expr PLUS ","String Literal Expr Not Empty  ","PLUS"]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_setter_is_preferred-TestObject-","callMethodNameReferTo":{"15":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":27,"succs":[[1,10],[22],[7,3,4,6,5,9],[],[5],[],[8],[],[],[1,0],[13],[12],[],[14,12,15],[12],[18,19,16,17],[],[],[20],[21],[],[],[25,24,23],[],[20],[11,26],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_setter_is_preferred ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Variable Declarator TestObject8 obj = ","Class Or Interface Type TestObject8 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject8.class ","StringLiteralExpr","Class Or Interface Type TestObject8 ","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Field Access Expr ","Simple Name format "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"skip_object_lazy_any_to_string-TestObject-","callMethodNameReferTo":{"32":"srcmainjavacomjsoniteranyAny.java-toString-Any-","20":"srcmainjavacomjsoniteranyAny.java-asMap-Any-","23":"srcmainjavacomjsoniteranyAny.java-wrap-Any-int","14":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String"},"num":34,"succs":[[1,8],[2,19],[29],[5,4,6,7],[],[6],[],[2,1,0],[12],[10],[],[9,10],[14,13,10],[10],[17,16,15],[],[],[18],[],[20,23,21,22],[9,24],[],[18],[26,27,25],[],[],[],[28],[],[31,30,32],[],[18],[33,11],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name skip_object_lazy_any_to_string ","Block Stmt ","Variable Declaration Expr ","Name Expr any ","Simple Name any ","Name Expr any ","Variable Declarator Any any = ","Class Or Interface Type Any ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","StringLiteralExpr","Method Call Expr ","Method Call Expr ","Simple Name put ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name asMap ","Name Expr Any ","Simple Name wrap ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Method Call Expr ","Simple Name assertEquals ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name toString "]}
{"fileName":"srctestjavacomjsoniterTestObject.java","version":"0.9.22","methodName":"test_non_ascii_field-TestObject-","callMethodNameReferTo":{"12":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":25,"succs":[[7,1],[19],[5,4,6,3],[],[5],[],[0,1],[10],[9],[],[11,9,12],[9],[14,16,15,13],[],[],[17],[18],[],[],[20,21,22],[],[23],[24,8],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_non_ascii_field ","Block Stmt ","Variable Declaration Expr ","Name Expr obj ","Simple Name obj ","Variable Declarator TestObject9 obj = ","Class Or Interface Type TestObject9 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr TestObject9.class ","StringLiteralExpr","Class Or Interface Type TestObject9 ","Method Call Expr ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Simple Name format ","IntegerLiteralExpr","Simple Name 字段 "]}
