{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","hasMethodName":["test_char-TestInteger-","test_positive_negative_int-TestInteger-","test_positive_negative_long-TestInteger-","test_max_min_int-TestInteger-","test_max_min_long-TestInteger-","test_large_number-TestInteger-","test_byte-TestInteger-","test_streaming-TestInteger-","test_leading_zero-TestInteger-","test_max_int-TestInteger-","parseInt-TestInteger-String","parseLong-TestInteger-String","testBigInteger-TestInteger-","testChooseInteger-TestInteger-","testChooseLong-TestInteger-"]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_char-TestInteger-","callMethodNameReferTo":{"15":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":28,"succs":[[10,1],[22],[5,4,9,3,6,7],[],[5],[],[8],[],[],[0,1],[13],[12],[],[14,15,12],[12],[19,18,17,16],[],[],[20],[21],[],[],[24,25,23],[],[26],[27,11],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_char ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Integer Literal Expr Zero  ","Simple Name c ","Variable Declarator Character c = ","Class Or Interface Type Character ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Character.class ","StringLiteralExpr","Class Or Interface Type Character ","Expression Stmt ","Simple Name assertEquals ","Integer Literal Expr Note Zero  ","Cast Expr ","IntegerLiteralExpr","Primitive Type int "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_positive_negative_int-TestInteger-","callMethodNameReferTo":{},"num":144,"succs":[[18,1],[2,28],[35,3],[4,41],[47,5],[53,6],[7,59],[65,8],[71,9],[79],[12,15,17,14,11,13],[],[13],[],[16],[],[],[7,9,4,2,0,3,1,6,5,8],[19,21,20],[],[22],[23,26,24],[],[],[25,27],[],[96,100,97,99,95,98,14],[],[30,29,31],[],[32],[34,26,33],[],[],[25,27],[36,38,37],[],[32],[39,26,40],[],[25,27],[43,42,44],[],[32],[26,46,45],[],[25,27],[49,50,48],[],[32],[26,52,51],[],[25,27],[56,55,54],[],[32],[57,26,58],[],[25,27],[61,60,62],[],[32],[26,64,63],[],[25,27],[66,67,68],[],[32],[70,26,69],[],[27,25],[72,74,73],[],[76,75],[78,26,77],[32],[],[],[25,27],[81,80,82],[],[83,76],[26,84,85],[32],[],[25,27],[105,87,90],[88,90],[106,89],[26,120,119],[91,93,92,94],[122,92],[131,93],[138,94],[133,26,119],[],[97],[],[25,104],[],[86],[25],[25],[102,25,101],[],[89,88],[109],[101],[107],[111,110,107],[107],[115,113,112,114],[],[],[116,117],[32],[],[118,101],[],[],[108,121],[],[126],[102],[123],[124,123],[128,123,127],[123],[102,129,130],[],[],[134],[124],[132],[136,132,135],[132],[124,137],[],[140,139,141],[],[103,142],[143,125],[],[]],"attribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Variable Declaration Expr ","Throws","Name Expr wrapperCode ","IOException","Block Stmt ","Expression Stmt ","Expression Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Zero IntegerLiteralExpr","Simple Name parseInt ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Method Call Expr ","Expression Stmt ","Class Or Interface Type List ","Method Call Expr ","IntegerLiteralExpr","Simple Name parseInt ","Simple Name enable ","Method Call Expr ","Expression Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","Simple Name getBytes ","Expression Stmt ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Name Expr JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Expression Stmt ","Field Access Expr ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name toString ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Unary Expr - ","Method Call Expr ","Simple Name demo ","MINUS","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name parseInt ","Name Expr componentType ","If Stmt ","Return Stmt ","Expression Stmt ","Return Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name writeNull ","PRIVATE","Name Expr ctx ","String Literal Expr Not Empty  ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Simple Name iter ","Void Type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","ReturnStmt","Method Call Expr ","Simple Name readInt ","Variable Declaration Expr ","Simple Name head ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator int v = ","Name Expr pos ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Field Access Expr ","Simple Name writer ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_positive_negative_long-TestInteger-","callMethodNameReferTo":{},"num":145,"succs":[[1,18],[28,2],[35,3],[4,41],[5,47],[53,6],[7,59],[8,65],[9,71],[79],[17,12,13,14,11,15],[],[13],[],[16],[],[],[4,9,5,1,0,8,7,3,6,2],[20,19,21],[],[22],[26,24,23],[],[],[27,25],[],[95,96,99,14,98,100,97],[],[31,30,29],[],[32],[34,26,33],[],[],[27,25],[37,38,36],[],[32],[26,39,40],[],[27,25],[42,44,43],[],[32],[26,45,46],[],[27,25],[49,48,50],[],[32],[52,26,51],[],[27,25],[54,55,56],[],[32],[57,26,58],[],[27,25],[61,62,60],[],[32],[63,26,64],[],[27,25],[66,67,68],[],[32],[69,70,26],[],[27,25],[73,72,74],[],[76,75],[26,78,77],[32],[],[],[27,25],[82,81,80],[],[76,83],[84,26,85],[32],[],[27,25],[90,87,105],[90,88],[89,106],[26,121,120],[94,93,91,92],[92,123],[93,132],[94,139],[134,26,120],[],[97],[],[104,25],[],[86],[25],[25],[101,102,25],[],[89,88],[109],[101],[107],[110,107,111],[107],[112,115,114,113],[],[],[117,116],[119],[],[118,101],[],[],[],[122,108],[],[127],[102],[124],[124,125],[124,129,128],[124],[131,102,130],[],[],[135],[125],[133],[133,136,137],[133],[138,125],[],[140,142,141],[],[143,103],[144,126],[],[]],"attribute":["Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Primitive Type long ","Simple Name test_positive_negative_long ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Zero  ","Variable Declarator JsonIterator iter = ","Zero LongLiteralExpr","Simple Name parseLong ","Simple Name obj ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Variable Declaration Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","LongLiteralExpr","Simple Name parseLong ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Variable Declaration Expr [FINAL] ","Simple Name assertEquals ","Name Expr minimal ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Long Literal Expr Note Zero  ","Array Creation Level Dimension NotEmpty ","Parameter short obj ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Return Stmt ","Return Stmt ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Expression Stmt ","Class Or Interface Type JsonIterator ","Name Expr Arrays ","Method Call Expr ","Long Literal Expr Note Zero  ","MINUS","Simple Name parseLong ","String Literal Expr Not Empty  ","Method Declaration Throws ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Long Literal Expr Note Zero  ","Simple Name parseLong ","String Literal Expr Not Empty  ","If Stmt ","Name Expr isStreaming ","Expression Stmt ","Return Stmt ","Block Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Simple Name writeTrue ","PRIVATE","Primitive Type long ","Simple Name parseLong ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr digit ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Name Expr bits ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","ReturnStmt","Method Call Expr ","Simple Name readLong ","Variable Declaration Expr ","Simple Name iter ","Simple Name head ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator long v = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Method Call Expr ","Return Stmt ","Method Call Expr ","Field Access Expr ","Name Expr stream ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_max_min_int-TestInteger-","callMethodNameReferTo":{},"num":135,"succs":[[1,12],[2,27],[3,46],[64],[11,9,7,5,8,6],[],[7],[],[10],[],[],[1,2,0,3],[14,15,13],[],[16,17],[18,19,21],[],[],[],[22,24,23,20],[],[87,91,90,88,86,89,8],[],[],[26,25],[],[],[30,29,28],[],[31,33,32],[38,21,37],[34,35],[],[36],[],[],[],[],[39,20,40,41],[],[],[42,43,32],[45,44],[36],[],[],[48,49,47],[],[52,51,50],[55,21,56],[53,54],[],[36],[],[],[],[59,20,58,57],[],[],[60,51,61],[62,63],[36],[],[],[67,66,65],[],[69,68],[71,21,70],[],[],[],[74,72,73,20],[],[],[76,75],[],[],[96,78,81],[79,81],[97,80],[21,111,110],[82,84,83,85],[113,83],[122,84],[129,85],[124,21,110],[],[88],[],[20,95],[],[77],[20],[20],[93,20,92],[],[80,79],[100],[92],[98],[102,101,98],[98],[106,104,103,105],[],[],[107,108],[36],[],[109,92],[],[],[99,112],[],[117],[93],[114],[115,114],[119,114,118],[114],[93,120,121],[],[],[125],[115],[123],[127,123,126],[123],[115,128],[],[131,130,132],[],[94,133],[134,116],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_max_min_int ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Class Or Interface Type Integer ","Simple Name MAX_VALUE ","Simple Name parseInt ","Method Call Expr ","Simple Name input ","Method Declaration Throws ","Name Expr Integer ","Simple Name toString ","Field Access Expr ","Name Expr Integer ","Simple Name MAX_VALUE ","Method Call Expr ","Return Stmt ","Binary Expr MINUS ","Method Call Expr ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MAX_VALUE ","IntegerLiteralExpr","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Simple Name toString ","Binary Expr MINUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MAX_VALUE ","Method Call Expr ","Simple Name assertEquals ","Binary Expr PLUS ","Method Call Expr ","Field Access Expr ","PLUS","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MIN_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Name Expr cacheKey ","Binary Expr PLUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MIN_VALUE ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Simple Name toString ","Field Access Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","If Stmt ","Return Stmt ","Expression Stmt ","Return Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name writeNull ","PRIVATE","Name Expr ctx ","String Literal Expr Not Empty  ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Simple Name iter ","Void Type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","ReturnStmt","Method Call Expr ","Simple Name readInt ","Variable Declaration Expr ","Simple Name head ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator int v = ","Name Expr pos ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Field Access Expr ","Simple Name writer ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_max_min_long-TestInteger-","callMethodNameReferTo":{},"num":135,"succs":[[12,1],[27,2],[3,46],[64],[9,6,11,7,5,8],[],[7],[],[10],[],[],[1,3,0,2],[15,14,13],[],[16,17],[21,19,18],[],[],[],[22,20,23,24],[],[86,87,90,8,89,91,88],[],[],[26,25],[],[],[29,30,28],[],[33,31,32],[21,37,38],[34,35],[],[36],[],[],[],[],[40,20,41,39],[],[],[42,43,32],[45,44],[36],[],[],[48,47,49],[],[51,52,50],[56,21,55],[53,54],[],[36],[],[],[],[58,59,20,57],[],[],[51,60,61],[63,62],[36],[],[],[67,65,66],[],[69,68],[71,70,21],[],[],[],[72,74,20,73],[],[],[76,75],[],[],[81,78,96],[81,79],[80,97],[21,111,110],[85,84,82,83],[83,113],[84,122],[85,129],[124,21,110],[],[88],[],[95,20],[],[77],[20],[20],[92,93,20],[],[80,79],[100],[92],[98],[101,98,102],[98],[103,106,105,104],[],[],[108,107],[36],[],[109,92],[],[],[112,99],[],[117],[93],[114],[114,115],[114,119,118],[114],[121,93,120],[],[],[125],[115],[123],[123,126,127],[123],[128,115],[],[130,132,131],[],[133,94],[134,116],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name test_empty_object ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Name Expr iter ","Simple Name MAX_VALUE ","Simple Name parseLong ","Method Call Expr ","Simple Name input ","Method Declaration Throws ","Null Literal Expr ","Simple Name toString ","Field Access Expr ","Name Expr Long ","Name Expr valueType ","Method Call Expr ","Simple Name assertEquals ","Binary Expr MINUS ","Method Call Expr ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Name Expr iter ","Simple Name MAX_VALUE ","IntegerLiteralExpr","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Binary Expr MINUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Long ","Simple Name MAX_VALUE ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Field Access Expr ","PLUS","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MIN_VALUE ","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Binary Expr PLUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Long ","Simple Name MIN_VALUE ","Method Call Expr ","Method Declaration ","Field Access Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name MIN_VALUE ","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Field Access Expr ","Simple Name iter ","Name Expr valueType ","If Stmt ","Name Expr isStreaming ","Expression Stmt ","Return Stmt ","Block Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Simple Name writeTrue ","PRIVATE","Primitive Type long ","Simple Name parseLong ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr digit ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Name Expr bits ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","ReturnStmt","Method Call Expr ","Simple Name readLong ","Variable Declaration Expr ","Simple Name iter ","Simple Name head ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator long v = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Method Call Expr ","Return Stmt ","Method Call Expr ","Field Access Expr ","Name Expr stream ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_large_number-TestInteger-","callMethodNameReferTo":{"85":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","101":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","70":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","42":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","140":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","126":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":153,"succs":[[40,3,4,1,41],[42,2],[20,4,15,49,11,27,31],[20,52,4,15,53,11,27,31],[6,54,5,15],[6,60],[65,16,64,55,7],[69,10,11,68,8],[70,9],[20,78,15,11,27,31],[82,20,15,27,11,81,31],[84,12,15,83,14],[13,85],[20,15,27,31,94],[97,20,98,15,27,31],[66,6,67,57],[20,17,100,19,99],[101,18],[20,107,27,31],[20,111,27,31,110],[22,21,112,31],[22,118],[122,23,113,64],[125,26,124,24,27],[25,126],[133,27,31],[137,136,27,31],[139,31,28,138,30],[140,29],[31,148],[151,31,152],[66,22,115,123],[35,39,34,37,36,33],[],[35],[],[38],[],[],[20,0,16,4],[1,2],[3,51],[43,45,46,44],[],[],[47],[48],[],[],[50],[],[],[],[],[11,7],[59,57,56],[],[56,55],[57],[58,57],[62,61,56],[56],[63],[],[],[63],[],[63],[9,8],[10,80],[71,72,74,73],[],[],[58,76,75],[77],[],[47],[],[79],[],[],[],[],[13,12],[14,96],[88,89,86,87],[],[],[91,90,75],[93],[92,59],[47],[],[],[95],[],[],[],[],[17,18],[109,19],[104,103,105,102],[],[],[47],[106],[],[108],[],[],[],[],[23,27],[114,115,117],[],[114,113],[115],[115,116],[114,120,119],[114],[121],[],[121],[121],[24,25],[26,135],[127,129,130,128],[],[],[75,116,131],[132],[47],[],[134],[],[],[],[],[29,28],[30,150],[143,142,141,144],[],[],[75,146,145],[147],[92,117],[47],[],[149],[],[],[],[]],"attribute":["Try Stmt ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Method Declaration Throws ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","Try Stmt ","Expression Stmt ","Simple Name writeTo ","Parameter JsonException e ","Assign Expr PLUS ","Try Stmt ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Assign Expr PLUS ","Method Declaration Throws ","PUBLIC","Void Type ","Field Access Expr ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Block Stmt ","Catch Clause ","Method Call Expr ","Return Stmt ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Integer.class ","StringLiteralExpr","Class Or Interface Type Integer ","Name Expr stream ","Simple Name obj1 ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","LESS","Integer Literal Expr Note Zero  ","PLUS","Simple Name toString ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Integer.class ","PLUS","Name Expr pos ","Class Or Interface Type Integer ","Method Call Expr ","Simple Name fail ","Block Stmt ","Parameter IOException e ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Integer.class ","Unary Expr - ","Name Expr obj ","MINUS","Class Or Interface Type Integer ","Simple Name append ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Return Stmt ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Long.class ","Class Or Interface Type Long ","Simple Name append ","Name Expr iter ","Block Stmt ","Parameter IOException e ","Simple Name e ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator long i = ","Simple Name head ","Long Literal Expr Note Zero  ","LongLiteralExpr","Long Literal Expr Note Zero  ","Long Literal Expr Note Zero  ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Long.class ","String Literal Expr Not Empty  ","Class Or Interface Type Long ","Name Expr Base64 ","Simple Name fail ","Block Stmt ","Variable Declarator int i = ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Class Or Interface Type TestObject2 ","Binary Expr PLUS ","Class Expr Long.class ","Unary Expr - ","String Literal Expr Not Empty  ","Class Or Interface Type Long ","Method Call Expr ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Name Expr i "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_byte-TestInteger-","callMethodNameReferTo":{"17":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","38":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":52,"succs":[[1,12],[2,24],[33,3],[44],[11,5,8,9,6,7],[],[7],[],[10],[],[],[2,1,3,0],[15],[14],[],[17,14,16],[14],[21,18,20,19],[],[],[22],[23],[],[],[25,13,26],[],[29,27,28],[],[],[30,31],[],[32],[],[36],[35],[],[35,38,37],[35],[41,42,39,40],[],[],[22],[43],[],[46,45,47],[],[49,48],[50,34],[],[32],[51],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_byte ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr val ","Simple Name val ","Variable Declarator Byte val = ","Class Or Interface Type Byte ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Byte.class ","StringLiteralExpr","Class Or Interface Type Byte ","Expression Stmt ","Simple Name assertEquals ","Method Call Expr ","Double Literal Expr Note Zero  ","Simple Name valueOf ","Cast Expr ","Name Expr iter ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Variable Declaration Expr ","Name Expr baos ","Simple Name vals ","Variable Declarator byte[] vals = ","Simple Name append ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr byte[].class ","Array Type 1 ","Method Call Expr ","Assign Expr ASSIGN ","String Literal Expr Not Empty  ","Array Access Expr 0 ","Primitive Type byte ","Name Expr any ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_streaming-TestInteger-","callMethodNameReferTo":{},"num":595,"succs":[[1,17],[2,22],[25,3],[4,28],[31,5],[34],[10,7,11,14,8,12,9],[],[],[10],[],[13],[],[],[1,4,0,5,2,3],[16],[],[19,18,20],[],[],[21],[],[24,23],[],[47,49,50,11,8,48],[26,27],[],[132,129,130,11,8,131],[29,30],[],[205,206,204,11,8,203],[33,32],[],[275,273,276,274,8,11],[35,36],[],[370,372,371,369,11,8],[51,38],[39,61],[68,40],[41,74],[80,42],[86,43],[44,92],[98,45],[104,46],[112],[48],[],[],[44,46,39,41,40,37,38,43,42,45],[52,54,53],[],[55],[56,59,57],[],[],[58,60],[],[491,495,494,492,490,493,11],[],[63,62,64],[],[65],[67,59,66],[],[],[58,60],[69,71,70],[],[65],[72,59,73],[],[58,60],[76,75,77],[],[65],[59,79,78],[],[60,58],[82,83,81],[],[65],[59,84,85],[],[58,60],[89,88,87],[],[65],[90,59,91],[],[60,58],[94,93,95],[],[65],[59,97,96],[],[58,60],[99,100,101],[],[65],[103,59,102],[],[60,58],[105,107,106],[],[109,108],[111,59,110],[65],[],[],[58,60],[114,113,115],[],[116,109],[59,117,118],[65],[],[58,60],[120,133],[142,121],[149,122],[123,155],[124,161],[167,125],[126,173],[127,179],[128,185],[192],[130],[],[],[123,128,124,120,119,126,127,122,125,121],[135,134,136],[],[137],[141,139,138],[],[],[60,140],[],[490,548,551,550,11,552,549],[145,144,143],[],[146],[148,141,147],[],[],[60,140],[151,152,150],[],[146],[141,154,153],[],[60,140],[156,158,157],[],[146],[141,159,160],[],[60,140],[163,162,164],[],[146],[166,141,165],[],[60,140],[168,169,170],[],[146],[171,141,172],[],[60,140],[175,176,174],[],[146],[177,178,141],[],[60,140],[180,181,182],[],[146],[183,141,184],[],[60,140],[187,186,188],[],[109,189],[141,191,190],[146],[],[60,140],[195,193,194],[],[109,196],[197,141,198],[146],[],[60,140],[200,207],[201,220],[202,238],[256],[204],[],[],[200,201,199,202],[209,208,210],[],[211,212],[213,214,59],[],[],[],[217,215,216,58],[],[],[219,218],[],[],[223,222,221],[],[224,226,225],[230,59,229],[227,228],[],[65],[],[],[],[231,58,233,232],[],[],[234,235,225],[237,236],[65],[],[],[241,240,239],[],[244,243,242],[247,59,248],[245,246],[],[65],[],[],[],[251,58,250,249],[],[],[252,243,253],[254,255],[65],[],[],[258,259,257],[],[261,260],[263,59,262],[],[],[],[266,265,264,58],[],[],[268,267],[],[],[277,270],[290,271],[272,307],[324],[274],[],[],[270,272,269,271],[280,279,278],[],[281,282],[141,284,283],[],[],[],[285,140,286,287],[],[],[289,288],[],[],[292,293,291],[],[295,294,225],[141,298,299],[296,297],[65],[],[],[],[301,140,302,300],[],[],[303,304,225],[306,305],[65],[],[],[309,308,310],[],[243,312,311],[316,141,315],[313,314],[65],[],[],[],[318,319,140,317],[],[],[243,320,321],[323,322],[65],[],[],[327,325,326],[],[329,328],[331,330,141],[],[],[],[332,334,140,333],[],[],[336,335],[],[],[340,373,341,338,374],[375,339],[357,341,352,381,364,348,368],[357,384,341,352,385,348,364,368],[343,386,352,342],[343,392],[396,353,395,387,344],[400,347,348,399,345],[401,346],[357,408,352,348,364,368],[357,412,352,364,348,368,411],[414,349,352,413,351],[350,415],[357,352,364,368,423],[426,357,427,352,364,368],[397,343,398,389],[357,354,429,356,428],[430,355],[357,436,364,368],[357,440,364,368,439],[359,358,441,368],[359,447],[450,360,442,395],[453,363,452,361,364],[362,454],[461,364,368],[465,464,364,368],[467,368,466,365,367],[468,366],[368,476],[479,368,480],[397,359,444,451],[370],[],[],[357,337,353,341],[338,339],[340,383],[376,378,377,379],[],[],[60],[380],[],[382],[],[],[],[],[348,344],[391,388,389],[],[387,388],[389],[390,389],[394,393,388],[388],[65],[],[65],[],[65],[346,345],[347,410],[402,403,405,404],[],[],[390,406,243],[407],[60],[],[409],[],[],[],[],[350,349],[351,425],[418,419,416,417],[],[],[421,420,243],[422],[109,391],[60],[],[424],[],[],[],[],[354,355],[438,356],[433,432,434,431],[],[],[60],[435],[],[437],[],[],[],[],[360,364],[443,444,446],[],[443,442],[444],[444,445],[443,449,448],[443],[146],[146],[146],[361,362],[363,463],[455,457,458,456],[],[],[243,445,459],[460],[60],[],[462],[],[],[],[],[366,365],[367,478],[471,470,469,472],[],[],[474,243,473],[475],[109,446],[60],[],[477],[],[],[],[],[500,482,485],[483,485],[501,484],[59,515,514],[486,488,487,489],[517,487],[526,488],[533,489],[528,59,514],[],[492],[],[58,499],[],[481],[58],[58],[497,58,496],[],[484,483],[504],[496],[502],[506,505,502],[502],[510,508,507,509],[],[],[511,512],[65],[],[513,496],[],[],[516,503],[],[521],[497],[518],[519,518],[523,518,522],[518],[497,524,525],[],[],[529],[519],[527],[531,527,530],[527],[519,532],[],[535,534,536],[],[498,537],[538,520],[],[],[543,540,557],[543,541],[542,558],[141,571,514],[547,546,544,545],[545,573],[546,582],[547,589],[584,141,514],[549],[],[556,140],[],[539],[140],[140],[553,554,140],[],[542,541],[561],[553],[559],[562,559,563],[559],[567,564,565,566],[],[],[569,568],[65],[],[570,553],[],[572,560],[],[577],[554],[574],[574,575],[574,579,578],[574],[554,581,580],[],[],[585],[575],[583],[583,586,587],[583],[588,575],[],[590,592,591],[],[593,555],[594,576],[],[]],"attribute":["Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","Single Member Annotation Expr @Category(StreamingCategory.class) ","PUBLIC","Void Type ","Simple Name test_streaming ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Class Expr StreamingCategory.class ","Class Or Interface Type StreamingCategory ","Return Stmt ","Class Or Interface Type TestObject6 ","ASSIGN","Boolean Literal Expr true ","true","Method Call Expr ","Simple Name test_positive_negative_int ","Method Declaration Throws ","Method Call Expr ","Simple Name test_positive_negative_long ","Method Declaration Throws ","Method Call Expr ","Simple Name test_max_min_int ","Method Declaration Throws ","Expression Stmt ","Simple Name test_max_min_long ","Method Declaration ","Method Call Expr ","Method Call Expr ","Method Declaration Throws ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Void Type ","Variable Declaration Expr ","Name Expr wrapperCode ","Block Stmt ","Expression Stmt ","Expression Stmt ","Integer Literal Expr Zero  ","Method Call Expr ","Zero IntegerLiteralExpr","Simple Name parseInt ","String Literal Expr Not Empty  ","Simple Name input ","Method Declaration Throws ","StringLiteralExpr","Method Call Expr ","Expression Stmt ","Class Or Interface Type List ","Method Call Expr ","IntegerLiteralExpr","Simple Name parseInt ","Simple Name enable ","Method Call Expr ","Expression Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","Simple Name getBytes ","Expression Stmt ","Return Stmt ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Name Expr JsonIterator ","Double Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Expression Stmt ","Field Access Expr ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name toString ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Integer Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Field Access Expr ","Unary Expr - ","Method Call Expr ","Simple Name demo ","MINUS","Simple Name parseInt ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name parseInt ","Name Expr componentType ","Variable Declaration Expr ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Call Expr ","Method Call Expr ","Expression Stmt ","Expression Stmt ","Primitive Type long ","Simple Name test_positive_negative_long ","Class Or Interface Type IOException ","Block Stmt ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Zero  ","Variable Declarator JsonIterator iter = ","Zero LongLiteralExpr","Simple Name parseLong ","Simple Name obj ","Simple Name input ","Method Declaration Throws ","Variable Declaration Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","LongLiteralExpr","Simple Name parseLong ","String Literal Expr Not Empty  ","Variable Declaration Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Variable Declaration Expr [FINAL] ","Simple Name assertEquals ","Name Expr minimal ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Method Call Expr ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Long Literal Expr Note Zero  ","Array Creation Level Dimension NotEmpty ","Parameter short obj ","String Literal Expr Not Empty  ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Return Stmt ","Return Stmt ","Long Literal Expr Note Zero  ","Method Call Expr ","Simple Name parseLong ","String Literal Expr Not Empty  ","Expression Stmt ","Class Or Interface Type JsonIterator ","Name Expr Arrays ","Method Call Expr ","Long Literal Expr Note Zero  ","Simple Name parseLong ","String Literal Expr Not Empty  ","Method Declaration Throws ","Simple Name assertEquals ","Unary Expr - ","Method Call Expr ","Long Literal Expr Note Zero  ","Simple Name parseLong ","String Literal Expr Not Empty  ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Void Type ","Simple Name test_max_min_int ","Class Or Interface Type IOException ","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Method Call Expr ","Class Or Interface Type Integer ","Simple Name MAX_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Simple Name toString ","Field Access Expr ","Name Expr Integer ","Simple Name MAX_VALUE ","Method Call Expr ","Return Stmt ","Binary Expr MINUS ","Method Call Expr ","Field Access Expr ","MINUS","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MAX_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Simple Name toString ","Binary Expr MINUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MAX_VALUE ","Method Call Expr ","Simple Name assertEquals ","Binary Expr PLUS ","Method Call Expr ","Field Access Expr ","PLUS","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MIN_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Name Expr cacheKey ","Binary Expr PLUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Integer ","Simple Name MIN_VALUE ","Method Call Expr ","Expression Stmt ","Field Access Expr ","Method Call Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","Simple Name parseInt ","Method Call Expr ","Name Expr Integer ","Simple Name toString ","Field Access Expr ","Name Expr Integer ","Simple Name MIN_VALUE ","Expression Stmt ","Expression Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Void Type ","Simple Name test_empty_object ","Class Or Interface Type IOException ","Block Stmt ","Expression Stmt ","Simple Name assertEquals ","Long Literal Expr Note Zero  ","Method Call Expr ","Name Expr iter ","Simple Name MAX_VALUE ","Simple Name parseLong ","Method Call Expr ","Null Literal Expr ","Simple Name toString ","Field Access Expr ","Name Expr Long ","Name Expr valueType ","Method Call Expr ","Simple Name assertEquals ","Binary Expr MINUS ","Method Call Expr ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr iter ","Simple Name MAX_VALUE ","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Binary Expr MINUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Long ","Simple Name MAX_VALUE ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Field Access Expr ","Integer Literal Expr Note Zero  ","String Literal Expr Not Empty  ","Simple Name MIN_VALUE ","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Binary Expr PLUS ","Field Access Expr ","Integer Literal Expr Note Zero  ","Name Expr Long ","Simple Name MIN_VALUE ","Method Call Expr ","Method Declaration ","Field Access Expr ","Method Call Expr ","String Literal Expr Not Empty  ","Simple Name MIN_VALUE ","Simple Name parseLong ","Method Call Expr ","Name Expr Long ","Simple Name toString ","Field Access Expr ","Simple Name iter ","Name Expr valueType ","Try Stmt ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Method Declaration Throws ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","Try Stmt ","Expression Stmt ","Simple Name writeTo ","Parameter JsonException e ","Assign Expr PLUS ","Try Stmt ","Expression Stmt ","Name Expr binding ","Parameter JsonException e ","For Stmt ","Variable Declaration Expr ","Binary Expr LESS ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Assign Expr PLUS ","Void Type ","Field Access Expr ","Class Or Interface Type IOException ","Block Stmt ","Block Stmt ","Catch Clause ","Method Call Expr ","Return Stmt ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Integer.class ","Class Or Interface Type Integer ","Name Expr stream ","Simple Name obj1 ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator int i = ","Primitive Type int ","Integer Literal Expr Note Zero  ","LESS","Integer Literal Expr Note Zero  ","PLUS","Simple Name toString ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Integer.class ","Name Expr pos ","Class Or Interface Type Integer ","Method Call Expr ","Simple Name fail ","Block Stmt ","Parameter IOException e ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Integer.class ","Unary Expr - ","Name Expr obj ","Class Or Interface Type Integer ","Simple Name append ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Return Stmt ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Long.class ","Class Or Interface Type Long ","Simple Name append ","Name Expr iter ","Block Stmt ","Parameter IOException e ","Simple Name e ","Block Stmt ","Name Expr i ","Simple Name i ","Name Expr i ","Name Expr i ","Name Expr i ","Variable Declarator long i = ","Simple Name head ","Long Literal Expr Note Zero  ","Long Literal Expr Note Zero  ","Long Literal Expr Note Zero  ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Binary Expr PLUS ","Class Expr Long.class ","String Literal Expr Not Empty  ","Class Or Interface Type Long ","Name Expr Base64 ","Simple Name fail ","Block Stmt ","Variable Declarator int i = ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Class Or Interface Type TestObject2 ","Binary Expr PLUS ","Class Expr Long.class ","Unary Expr - ","String Literal Expr Not Empty  ","Class Or Interface Type Long ","Method Call Expr ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Name Expr i ","If Stmt ","Return Stmt ","Expression Stmt ","Return Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name writeNull ","PRIVATE","Name Expr ctx ","String Literal Expr Not Empty  ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Simple Name iter ","Void Type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","ReturnStmt","Method Call Expr ","Simple Name readInt ","Variable Declaration Expr ","Simple Name head ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator int v = ","Name Expr pos ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Field Access Expr ","Simple Name writer ","Simple Name head ","If Stmt ","Name Expr isStreaming ","Expression Stmt ","Return Stmt ","Block Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Simple Name writeTrue ","Primitive Type long ","Simple Name parseLong ","Parameter String input ","Class Or Interface Type IOException ","Block Stmt ","Name Expr input ","Name Expr input ","Name Expr digit ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Name Expr bits ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","Method Call Expr ","Simple Name readLong ","Variable Declaration Expr ","Simple Name iter ","Simple Name head ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator long v = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Method Call Expr ","Return Stmt ","Method Call Expr ","Field Access Expr ","Name Expr stream ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_leading_zero-TestInteger-","callMethodNameReferTo":{"80":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","67":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","54":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","43":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","29":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>","93":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":104,"succs":[[26,1],[2,40],[5,53,3,6,52],[54,4],[10,60,6,14],[10,63,64,6,14],[10,7,66,65,9],[67,8],[10,73,14],[10,76,77,14],[11,78,79,13,14],[12,80],[86,14],[89,90,14],[15,17,92,91],[93,16],[99],[102,103],[23,20,21,19,22,25],[],[21],[],[24],[],[],[10,0,2,6,14,1],[27,29,28],[],[31,30,32],[35,37,34,36],[],[],[33],[],[],[],[38],[39],[],[],[41,42,43],[],[44,45,46],[48,49,50,47],[],[],[33],[],[],[38],[51],[],[3,4],[5,62],[55,58,57,56],[],[],[38],[59],[],[61],[],[],[],[],[7,8],[75,9],[71,68,69,70],[],[],[38],[72],[],[74],[],[],[],[],[11,12],[13,88],[83,82,84,81],[],[],[38],[85],[],[87],[],[],[],[],[15,16],[17,101],[94,95,96,97],[],[],[38],[98],[],[100],[],[],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Try Stmt ","Expression Stmt ","Expression Stmt ","Variable Declarator byte c = ","Try Stmt ","Expression Stmt ","Binary Expr EQUALS ","Parameter JsonException e ","Method Declaration ","Expression Stmt ","Return Stmt ","Parameter JsonException e ","Try Stmt ","Expression Stmt ","Expression Stmt ","Parameter JsonException e ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_leading_zero ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Name Expr Integer ","Simple Name valueOf ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr int.class ","StringLiteralExpr","Primitive Type int ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Method Call Expr ","Name Expr Long ","Simple Name valueOf ","Integer Literal Expr Zero  ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr long.class ","Primitive Type long ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr int.class ","Primitive Type int ","Simple Name append ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr int.class ","Primitive Type int ","Method Call Expr ","Simple Name fail ","Block Stmt ","Simple Name indentionStep ","Integer Literal Expr Note Zero  ","Block Stmt ","Catch Clause ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr long.class ","Primitive Type long ","Class Or Interface Type Double ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e ","Block Stmt ","Catch Clause ","Method Call Expr ","Field Access Expr ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr long.class ","Primitive Type long ","Name Expr output ","Simple Name fail ","Block Stmt ","Class Or Interface Type JsonException ","Simple Name e "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"test_max_int-TestInteger-","callMethodNameReferTo":{"17":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":40,"succs":[[1,11],[2,24],[32],[10,8,4,7,6,5],[],[6],[],[9],[],[],[0,2,1],[15],[13],[],[12,13],[17,13,16],[13],[19,21,18,20],[],[],[22],[23],[],[],[25,26,27],[],[29,28],[12,30],[],[],[31],[],[33,35,34],[],[36,37],[38,14],[],[],[39],[]],"attribute":["Expression Stmt ","Expression Stmt ","Expression Stmt ","Method Declaration Throws ","PUBLIC","Void Type ","Simple Name test_max_int ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Variable Declaration Expr ","Name Expr ints ","Simple Name ints ","Name Expr ints ","Variable Declarator int[] ints = ","Array Type 1 ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr int[].class ","StringLiteralExpr","Array Type 1 ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Array Access Expr 0 ","Name Expr Integer ","Simple Name MAX_VALUE ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Method Call Expr ","Name Expr JsonIterator ","Field Access Expr ","Array Access Expr 1 ","Name Expr Integer ","Simple Name MIN_VALUE ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"parseInt-TestInteger-String","callMethodNameReferTo":{"39":"srcmainjavacomjsoniterJsonIterator.java-readInt-JsonIterator-","55":"srcmainjavacomjsoniterJsonIterator.java-readInt-JsonIterator-","47":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":63,"succs":[[23,1,4],[2,4],[24,3],[9,39,38],[5,7,6,8],[41,6],[50,7],[57,8],[52,9,38],[11,17,12,15,10,13,14],[],[12],[],[19,22],[16],[],[],[0],[19],[],[19],[20,19,18],[],[3,2],[27],[18],[25],[29,28,25],[25],[33,31,30,32],[],[],[34,35],[37],[],[18,36],[],[],[],[26,40],[],[45],[20],[42],[43,42],[47,42,46],[42],[20,48,49],[],[],[53],[43],[51],[55,51,54],[51],[43,56],[],[59,58,60],[],[21,61],[62,44],[],[]],"attribute":["If Stmt ","Return Stmt ","Expression Stmt ","Return Stmt ","Block Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Simple Name writeNull ","Method Declaration Throws ","PRIVATE","Name Expr ctx ","String Literal Expr Not Empty  ","Parameter String input ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Name Expr input ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Simple Name iter ","Void Type ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","ReturnStmt","Method Call Expr ","Simple Name readInt ","Variable Declaration Expr ","Simple Name head ","Name Expr iter ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator int v = ","Name Expr pos ","Method Call Expr ","Simple Name readInt ","Method Call Expr ","Simple Name assertEquals ","Method Call Expr ","Field Access Expr ","Simple Name writer ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"parseLong-TestInteger-String","callMethodNameReferTo":{"39":"srcmainjavacomjsoniterJsonIterator.java-readLong-JsonIterator-","55":"srcmainjavacomjsoniterJsonIterator.java-readLong-JsonIterator-","47":"srcmainjavacomjsoniterJsonIterator.java-parse-JsonIterator-byte[]"},"num":63,"succs":[[4,1,23],[4,2],[3,24],[9,39,38],[8,7,5,6],[6,41],[7,50],[8,57],[52,9,38],[10,11,15,13,14,12,17],[],[12],[],[22,19],[16],[],[],[0],[19],[],[19],[18,20,19],[],[3,2],[27],[18],[25],[28,25,29],[25],[33,30,32,31],[],[],[35,34],[37],[],[36,18],[],[],[],[40,26],[],[45],[20],[42],[42,43],[42,47,46],[42],[49,20,48],[],[],[53],[43],[51],[51,54,55],[51],[56,43],[],[58,60,59],[],[61,21],[62,44],[],[]],"attribute":["If Stmt ","Name Expr isStreaming ","Expression Stmt ","Return Stmt ","Block Stmt ","Assign Expr ASSIGN ","Expression Stmt ","Expression Stmt ","Simple Name writeTrue ","Method Declaration Throws ","PRIVATE","Primitive Type long ","Simple Name parseLong ","Parameter String input ","Throws","Class Or Interface Type IOException ","IOException","Block Stmt ","Name Expr input ","Simple Name input ","Name Expr input ","Name Expr digit ","Class Or Interface Type String ","Block Stmt ","Variable Declaration Expr ","Name Expr bits ","Name Expr iter ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Object Creation Expr ByteArrayInputStream Optional.empty Optional.empty ","Integer Literal Expr Note Zero  ","Class Or Interface Type ByteArrayInputStream ","Method Call Expr ","Simple Name getBytes ","IntegerLiteralExpr","ReturnStmt","Method Call Expr ","Simple Name readLong ","Variable Declaration Expr ","Simple Name iter ","Simple Name head ","Null Literal Expr ","Variable Declarator JsonIterator iter = ","Class Or Interface Type JsonIterator ","Method Call Expr ","Name Expr JsonIterator ","Simple Name parse ","Variable Declaration Expr ","Simple Name v ","Name Expr v ","Variable Declarator long v = ","Primitive Type long ","Method Call Expr ","Simple Name readLong ","Method Call Expr ","Return Stmt ","Method Call Expr ","Field Access Expr ","Name Expr stream ","Simple Name head "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"testBigInteger-TestInteger-","callMethodNameReferTo":{"12":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":24,"succs":[[1,7],[19],[4,6,5,3],[],[5],[],[0,1],[10],[9],[],[12,11,9],[9],[16,13,15,14],[],[],[17],[18],[],[],[20,8,21],[],[23,22],[],[17]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","This Expr ","Simple Name testBigInteger ","Block Stmt ","Variable Declaration Expr ","Name Expr number ","Simple Name number ","Variable Declarator BigInteger number = ","Class Or Interface Type BigInteger ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr BigInteger.class ","StringLiteralExpr","Class Or Interface Type BigInteger ","Expression Stmt ","Simple Name assertEquals ","Object Creation Expr BigInteger Optional.empty Optional.empty ","Class Or Interface Type BigInteger ","String Literal Expr Not Empty  "]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"testChooseInteger-TestInteger-","callMethodNameReferTo":{"12":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":23,"succs":[[1,7],[19],[3,6,5,4],[],[5],[],[1,0],[10],[9],[],[9,11,12],[9],[14,16,13,15],[],[],[17],[18],[],[],[8,21,20],[],[22],[]],"attribute":["Expression Stmt ","Method Call Expr ","Method Declaration ","PUBLIC","Primitive Type byte ","Simple Name testChooseInteger ","Block Stmt ","Variable Declaration Expr ","Name Expr number ","Simple Name number ","Variable Declarator Object number = ","Class Or Interface Type String ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","String Literal Expr Not Empty  ","Class Expr Object.class ","StringLiteralExpr","Class Or Interface Type Object ","Method Call Expr ","Simple Name assertEquals ","Char Literal Expr 'f' ","IntegerLiteralExpr"]}
{"fileName":"srctestjavacomjsoniterTestInteger.java","version":"0.9.22","methodName":"testChooseLong-TestInteger-","callMethodNameReferTo":{"12":"srcmainjavacomjsoniterJsonIterator.java-deserialize-JsonIterator-String-Class<T>"},"num":30,"succs":[[1,7],[25],[3,5,6,4],[],[5],[],[1,0],[10],[9],[],[11,12,9],[9],[15,16,14,13],[],[],[18,17],[24],[19,21,20],[],[],[],[22,23],[],[],[],[26,27,8],[],[28,29],[],[]],"attribute":["Expression Stmt ","Expression Stmt ","Method Declaration ","PUBLIC","Void Type ","Simple Name testChooseLong ","Block Stmt ","Variable Declaration Expr ","Name Expr number ","Simple Name number ","Variable Declarator Object number = ","Name Expr writer ","Method Call Expr ","Name Expr JsonIterator ","Simple Name deserialize ","Method Call Expr ","Class Expr Object.class ","Method Call Expr ","Simple Name toString ","Name Expr Long ","Simple Name valueOf ","Field Access Expr ","Name Expr Long ","Simple Name MAX_VALUE ","Class Or Interface Type Object ","Method Call Expr ","Simple Name assertEquals ","Field Access Expr ","Name Expr Long ","Simple Name MAX_VALUE "]}
