{"fileName":"demosrcmainjavajsoniter_codegencfg1173796797decoderjavautilList_javalangInteger.java","version":"0.9.22","hasMethodName":["decode_-Integer-com.jsoniter.JsonIterator","decode-Integer-com.jsoniter.JsonIterator"]}
{"fileName":"demosrcmainjavajsoniter_codegencfg1173796797decoderjavautilList_javalangInteger.java","version":"0.9.22","methodName":"decode_-Integer-com.jsoniter.JsonIterator","callMethodNameReferTo":{},"num":444,"succs":[[1,81],[108,2],[5,3,109,55],[110,4],[5,118,39,117],[120,6],[8,121,7,122],[8,129,39,117],[9,150],[10,178],[180,14,179,11,181],[12,189],[215,13],[14,117,39,192],[217,15],[244,16],[180,245,21,246,17],[18,253],[279,19],[281,20],[257,21,117,39],[22,283],[309,23],[310,180,311,24,29],[25,318],[26,345],[347,27],[349,28],[323,39,117,29],[30,351],[31,376],[405,32],[33,407],[34,409],[411,35],[36,413],[414,37,133,38,415],[422,35],[383,117,39],[48,44,42,46,40,45,41,43],[41],[],[50,49,43],[],[54,72],[47],[77,78],[],[22,14,34,8,38,1,15,29,5,33,31,9,30,21,0,32,35],[51,52],[],[],[],[54],[],[54,53],[54,55,2],[54,56],[54,57],[54,58],[59,54],[60,54],[61,54],[54,62],[54,63],[54,64],[65,54],[66,54],[54,67],[68,54,71],[54,69],[54,70],[73,74],[76,75],[],[],[],[79,80],[],[],[],[93],[53],[82],[83,82],[84,82],[85,82],[86,82],[87,82],[82,88],[82,89],[90,82],[82,91],[94,82,95],[82],[97,96],[98,99],[102,53,103],[101,100],[],[],[],[105,104],[],[106,107],[],[],[],[3,4],[],[111,56,112],[113,114],[],[116,115],[],[],[],[],[119],[],[7],[124,123,57],[],[125,126],[],[127,128],[],[],[],[132,131,130],[134,133,83],[136,135],[138,139],[],[119],[],[137],[],[140,141],[84,144,145],[143,142],[],[],[],[146,147],[],[149,148],[],[],[],[156],[59,58],[151],[151,152],[153,151],[151,154],[151,158,157],[151],[159,160],[162,161],[165],[163,164],[],[],[],[166,168,167],[169,58],[119],[172,170,171],[],[173,174],[],[59,177],[176,175],[],[],[],[],[12,13,11],[60,183,182],[],[188],[184,185],[],[186,187],[],[],[],[],[193],[85,86],[190,377],[190,377,191],[195,190,194],[190],[197,196,198],[85,133,199],[200,201],[204,203],[119],[],[202],[],[205,206],[210,86,209],[207,208],[],[],[],[211,212],[],[213,214],[],[],[],[152,216,191],[],[222],[61,62],[218],[218,219],[218,220],[218,223,224],[218],[225,226],[228,227],[231],[230,229],[],[],[],[234,233,232],[61,235],[119],[236,237,238],[],[240,239],[],[243,62],[241,242],[],[],[],[],[19,20,17,18],[248,247,63],[188],[250,249],[],[251,252],[],[],[],[258],[87,88],[254,377,192],[254,377,255],[254,256,377],[260,254,259],[254],[261,262,263],[264,133,87],[266,265],[267,268],[119],[],[202],[270,269],[273,274,88],[272,271],[],[],[],[276,275],[],[278,277],[],[],[],[153,280,255],[],[282,256,219],[],[287],[65,64],[284],[284,285],[284,288,289],[284],[291,290],[293,292],[296],[294,295],[],[],[],[298,299,297],[300,64],[119],[301,303,302],[],[305,304],[],[308,65],[307,306],[],[],[],[],[25,26,28,24,27],[313,66,312],[188],[315,314],[],[316,317],[],[],[],[324],[90,89],[257,319,377],[319,320,377],[319,321,377],[319,377,322],[319,325,326],[319],[328,329,327],[133,330,89],[331,332],[333,334],[119],[],[202],[335,336],[90,340,339],[337,338],[],[],[],[342,341],[],[344,343],[],[],[],[346,320,154],[],[348,321,220],[],[285,322,350],[],[354],[68,67],[352],[356,352,355],[352],[358,357],[360,359],[363],[361,362],[],[],[],[364,365,366],[367,67],[119],[370,369,368],[],[371,372],[],[68,375],[374,373],[],[],[],[],[384],[91,92],[323,377],[378,377],[379,377],[380,377],[381,377],[377,382],[386,377,385],[377],[389,388,387],[133,91,390],[391,392],[393,394],[119],[],[202],[395,396],[399,400,92],[398,397],[],[],[],[402,401],[],[404,403],[],[],[],[406,378,155],[],[379,221,408],[],[286,410,380],[],[353,381,412],[],[37],[416,417,69],[188],[419,418],[],[421,420],[],[],[],[423,424,382],[],[426,425],[428,427],[431],[430,429],[],[],[],[432,434,433],[435,70],[119],[436,438,437],[],[439,440],[],[443,71],[441,442],[],[],[],[]],"attribute":["Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Unary Expr ! ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Field Access Expr ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","Method Declaration Throws ","PUBLIC","STATIC","Class Or Interface Type Object ","Simple Name decode_ ","Parameter com.jsoniter.JsonIterator iter ","Throws","Class Or Interface Type IOException ","java.io.IOException","Block Stmt ","Class Or Interface Type lang ","Simple Name Object ","Class Or Interface Type java ","Simple Name lang ","Name Expr iter ","Simple Name iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Class Or Interface Type jsoniter ","Simple Name JsonIterator ","Class Or Interface Type com ","Simple Name jsoniter ","Class Or Interface Type io ","Simple Name IOException ","Class Or Interface Type java ","Simple Name io ","Variable Declaration Expr ","Simple Name col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Variable Declarator java.util.ArrayList col = ","Class Or Interface Type ArrayList ","Cast Expr ","Simple Name resetExistingObject ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name resetExistingObject ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Block Stmt ","Simple Name readNull ","Method Call Expr ","Field Access Expr ","Simple Name resetExistingObject ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","ReturnStmt","Null Literal Expr ","NullLiteralExpr","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Field Access Expr ","Simple Name readArrayStart ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Conditional Expr col == null ? new java.util.ArrayList(0) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","EQUALS","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name a1 ","Name Expr a1 ","Name Expr a1 ","Name Expr a1 ","Name Expr a1 ","Variable Declarator Object a1 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","','","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(1) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a2 ","Name Expr a2 ","Name Expr a2 ","Name Expr a2 ","Variable Declarator Object a2 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Simple Name user ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name firstName ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(2) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a3 ","Name Expr a3 ","Name Expr a3 ","Variable Declarator Object a3 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Name Expr com ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(3) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a4 ","Name Expr a4 ","Variable Declarator Object a4 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Primitive Type int ","Name Expr obj ","Primitive Type int ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(8) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Class Or Interface Type java ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt "]}
{"fileName":"demosrcmainjavajsoniter_codegencfg1173796797decoderjavautilList_javalangInteger.java","version":"0.9.22","methodName":"decode-Integer-com.jsoniter.JsonIterator","callMethodNameReferTo":{},"num":468,"succs":[[2,3,4,6,8,1,5],[69],[3,11,10],[],[15,16],[7],[21,22],[],[9],[0,25,26],[12,13],[],[],[],[28,15],[],[18,17],[20,19],[],[],[],[23,24],[],[],[],[],[14,27,29],[],[],[72,74,70,73,5,1,69,71],[31,106],[133,32],[35,33,134,80],[135,34],[35,142,29,25],[144,36],[38,145,37,146],[38,153,29,25],[39,174],[202,40],[204,44,203,41,205],[42,213],[239,43],[44,25,29,216],[241,45],[268,46],[204,269,51,47,270],[48,277],[303,49],[305,50],[281,51,25,29],[52,307],[333,53],[204,334,335,54,59],[55,342],[56,369],[371,57],[373,58],[347,29,25,59],[60,375],[61,400],[429,62],[63,431],[64,433],[435,65],[66,437],[438,67,157,68,439],[446,65],[407,29,25],[],[76,75,71],[],[28,97],[102,103],[52,64,44,38,68,31,59,45,35,63,61,39,60,51,30,62,65],[77,78],[],[],[],[28],[79,28],[28,80,32],[28,81],[28,82],[28,83],[84,28],[85,28],[86,28],[28,87],[28,88],[28,89],[90,28],[91,28],[28,92],[93,28,96],[28,94],[28,95],[98,99],[101,100],[],[],[],[104,105],[],[],[],[118],[79],[107],[108,107],[109,107],[110,107],[111,107],[112,107],[107,113],[107,114],[115,107],[107,116],[119,107,120],[107],[122,121],[123,124],[127,79,128],[126,125],[],[],[],[130,129],[],[131,132],[],[],[],[33,34],[],[136,81,137],[138,139],[],[140,141],[],[],[],[143],[],[37],[148,147,82],[],[149,150],[],[151,152],[],[],[],[156,155,154],[158,157,108],[160,159],[162,163],[],[143],[],[161],[],[164,165],[109,168,169],[167,166],[],[],[],[170,171],[],[173,172],[],[],[],[180],[84,83],[175],[175,176],[177,175],[175,178],[175,181,182],[175],[183,184],[186,185],[189],[187,188],[],[],[],[192,190,191],[193,83],[143],[196,194,195],[],[197,198],[],[84,201],[200,199],[],[],[],[],[42,43,41],[85,207,206],[],[212],[208,209],[],[210,211],[],[],[],[],[217],[110,111],[214,401],[214,401,215],[219,214,218],[214],[221,220,222],[157,110,223],[224,225],[228,227],[143],[],[226],[],[229,230],[234,111,233],[231,232],[],[],[],[235,236],[],[237,238],[],[],[],[240,176,215],[],[246],[86,87],[242],[242,243],[242,244],[242,247,248],[242],[249,250],[252,251],[255],[254,253],[],[],[],[258,257,256],[86,259],[143],[260,261,262],[],[264,263],[],[267,87],[265,266],[],[],[],[],[50,49,47,48],[272,271,88],[212],[274,273],[],[275,276],[],[],[],[282],[112,113],[278,401,216],[278,401,279],[278,401,280],[284,278,283],[278],[285,286,287],[288,157,112],[290,289],[291,292],[143],[],[226],[294,293],[298,297,113],[296,295],[],[],[],[300,299],[],[302,301],[],[],[],[177,304,279],[],[306,280,243],[],[311],[90,89],[308],[308,309],[308,312,313],[308],[315,314],[317,316],[320],[318,319],[],[],[],[322,323,321],[324,89],[143],[325,327,326],[],[329,328],[],[332,90],[331,330],[],[],[],[],[55,56,58,54,57],[337,336,91],[212],[339,338],[],[340,341],[],[],[],[348],[115,114],[281,343,401],[343,344,401],[343,345,401],[343,401,346],[343,349,350],[343],[352,353,351],[157,354,114],[355,356],[357,358],[143],[],[226],[359,360],[115,364,363],[361,362],[],[],[],[366,365],[],[368,367],[],[],[],[370,344,178],[],[372,345,244],[],[309,346,374],[],[378],[93,92],[376],[376,380,379],[376],[382,381],[384,383],[387],[385,386],[],[],[],[388,389,390],[391,92],[143],[394,393,392],[],[395,396],[],[93,399],[398,397],[],[],[],[],[408],[116,117],[347,401],[402,401],[403,401],[404,401],[401,405],[401,406],[410,401,409],[401],[413,412,411],[157,116,414],[415,416],[417,418],[143],[],[226],[419,420],[423,424,117],[422,421],[],[],[],[426,425],[],[428,427],[],[],[],[430,402,179],[],[403,245,432],[],[310,434,404],[],[377,405,436],[],[67],[440,441,94],[212],[443,442],[],[445,444],[],[],[],[447,448,406],[],[450,449],[452,451],[455],[454,453],[],[],[],[456,458,457],[459,95],[143],[460,462,461],[],[463,464],[],[467,96],[465,466],[],[],[],[]],"attribute":["Method Declaration Throws ","PUBLIC","Class Or Interface Type Object ","Simple Name String ","Parameter com.jsoniter.JsonIterator iter ","Throws","Class Or Interface Type IOException ","java.io.IOException","Block Stmt ","Return Stmt ","Class Or Interface Type lang ","Simple Name Object ","Class Or Interface Type java ","Simple Name lang ","Name Expr iter ","Simple Name iter ","Class Or Interface Type JsonIterator ","Class Or Interface Type jsoniter ","Simple Name JsonIterator ","Class Or Interface Type com ","Simple Name jsoniter ","Class Or Interface Type io ","Simple Name IOException ","Class Or Interface Type java ","Simple Name io ","ReturnStmt","Method Call Expr ","Simple Name decode_ ","Simple Name iter ","Method Declaration Throws ","Expression Stmt ","If Stmt ","Method Call Expr ","Expression Stmt ","Return Stmt ","If Stmt ","Unary Expr ! ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Return Stmt ","Expression Stmt ","If Stmt ","Binary Expr NOT_EQUALS ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Field Access Expr ","Return Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","Expression Stmt ","If Stmt ","Binary Expr EQUALS ","Expression Stmt ","Return Stmt ","STATIC","Class Or Interface Type Object ","Simple Name decode_ ","Parameter com.jsoniter.JsonIterator iter ","Class Or Interface Type IOException ","Block Stmt ","Class Or Interface Type lang ","Simple Name Object ","Class Or Interface Type java ","Simple Name lang ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Name Expr iter ","Class Or Interface Type JsonIterator ","Class Or Interface Type jsoniter ","Simple Name JsonIterator ","Class Or Interface Type com ","Simple Name jsoniter ","Class Or Interface Type io ","Simple Name IOException ","Class Or Interface Type java ","Simple Name io ","Variable Declaration Expr ","Simple Name col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Name Expr col ","Variable Declarator java.util.ArrayList col = ","Class Or Interface Type ArrayList ","Cast Expr ","Simple Name resetExistingObject ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name resetExistingObject ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Block Stmt ","Simple Name readNull ","Method Call Expr ","Field Access Expr ","Simple Name resetExistingObject ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Null Literal Expr ","NullLiteralExpr","Block Stmt ","Method Call Expr ","LOGICAL_COMPLEMENT","Field Access Expr ","Simple Name readArrayStart ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Conditional Expr col == null ? new java.util.ArrayList(0) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","EQUALS","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Zero  ","Zero IntegerLiteralExpr","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name a1 ","Name Expr a1 ","Name Expr a1 ","Name Expr a1 ","Name Expr a1 ","Variable Declarator Object a1 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","NOT_EQUALS","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","','","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(1) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","IntegerLiteralExpr","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a2 ","Name Expr a2 ","Name Expr a2 ","Name Expr a2 ","Variable Declarator Object a2 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Simple Name user ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name firstName ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(2) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a3 ","Name Expr a3 ","Name Expr a3 ","Variable Declarator Object a3 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Name Expr obj ","Name Expr com ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(3) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Variable Declaration Expr ","Simple Name a4 ","Name Expr a4 ","Variable Declarator Object a4 = ","Class Or Interface Type Object ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Simple Name lang ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt ","Variable Declaration Expr ","Simple Name obj ","Name Expr obj ","Primitive Type int ","Name Expr obj ","Primitive Type int ","Name Expr obj ","Name Expr obj ","Variable Declarator java.util.ArrayList obj = ","Class Or Interface Type ArrayList ","Conditional Expr col == null ? new java.util.ArrayList(8) : (java.util.ArrayList) com.jsoniter.CodegenAccess.reuseCollection(col) ","Binary Expr EQUALS ","Object Creation Expr java.util.ArrayList Optional.empty Optional.empty ","Cast Expr ","Null Literal Expr ","Class Or Interface Type ArrayList ","Integer Literal Expr Note Zero  ","Class Or Interface Type ArrayList ","Method Call Expr ","Class Or Interface Type util ","Simple Name ArrayList ","Class Or Interface Type java ","Simple Name util ","Field Access Expr ","Simple Name reuseCollection ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Method Call Expr ","Simple Name add ","Block Stmt ","Method Call Expr ","Char Literal Expr ',' ","Field Access Expr ","Simple Name nextToken ","Field Access Expr ","Simple Name CodegenAccess ","Name Expr com ","Simple Name jsoniter ","Method Call Expr ","Simple Name add ","Cast Expr ","Class Or Interface Type Integer ","Enclosed Expr ","Class Or Interface Type lang ","Simple Name Integer ","Class Or Interface Type java ","Class Or Interface Type java ","Conditional Expr iter.readNull() ? null : java.lang.Integer.valueOf(iter.readInt()) ","Method Call Expr ","Null Literal Expr ","Method Call Expr ","Simple Name readNull ","Field Access Expr ","Simple Name decoder ","Method Call Expr ","Field Access Expr ","Simple Name Integer ","Name Expr java ","Simple Name lang ","Simple Name readInt "]}
