public void bad ( ) throws Throwable { String data ; data = "Empty String" ; /* Initialize data */ { File file = new File ( "Not Empty String" ) ; FileInputStream streamFileInput = null ; InputStreamReader readerInputStream = null ; BufferedReader readerBuffered = null ; try { /* read string from file into data */ streamFileInput = new FileInputStream ( file ) ; readerInputStream = new InputStreamReader ( streamFileInput , "Not Empty String" ) ; readerBuffered = new BufferedReader ( readerInputStream ) ; /* POTENTIAL FLAW: Read data from a file */ /* This will be reading the first "line" of the file, which * could be very long if there are little or no newlines in the file */ data = readerBuffered . readLine ( ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } finally { /* Close stream reading objects */ try { if ( readerBuffered != null ) { readerBuffered . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } try { if ( readerInputStream != null ) { readerInputStream . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } try { if ( streamFileInput != null ) { streamFileInput . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } } } String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE23_Relative_Path_Traversal__File_66b ( ) ) . badSink ( dataArray ) ; } public void good ( ) throws Throwable { goodG2B ( ) ; } /* goodG2B() - use goodsource and badsink */ private void goodG2B ( ) throws Throwable { String data ; /* FIX: Use a hardcoded string */ data = "Not Empty String" ; String [ ] dataArray = new String [ 5 ] ; dataArray [ 2 ] = data ; ( new CWE23_Relative_Path_Traversal__File_66b ( ) ) . goodG2BSink ( dataArray ) ; } /* Below is the main(). It is only used when building this testcase on * its own for testing or for building a binary to use in testing binary * analysis tools. It is not used when compiling all the testcases as one * application, which is how source code analysis tools are tested. */ public static void main ( String [ ] args ) throws ClassNotFoundException , InstantiationException , IllegalAccessException { mainFromParent ( args ) ; } }