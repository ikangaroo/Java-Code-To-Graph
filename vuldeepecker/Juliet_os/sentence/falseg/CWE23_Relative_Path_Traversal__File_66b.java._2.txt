public void goodG2BSink ( String [ ] dataArray ) throws Throwable { String data = dataArray [ 2 ] ; String root ; if ( System . getProperty ( "Not Empty String" ) . toLowerCase ( ) . indexOf ( "Not Empty String" ) >= 0 ) { /* running on Windows */ root = "Not Empty String" ; } else { /* running on non-Windows */ root = "Not Empty String" ; } if ( data != null ) { /* POTENTIAL FLAW: no validation of concatenated value */ File file = new File ( root + data ) ; FileInputStream streamFileInputSink = null ; InputStreamReader readerInputStreamSink = null ; BufferedReader readerBufferdSink = null ; if ( file . exists ( ) && file . isFile ( ) ) { try { streamFileInputSink = new FileInputStream ( file ) ; readerInputStreamSink = new InputStreamReader ( streamFileInputSink , "Not Empty String" ) ; readerBufferdSink = new BufferedReader ( readerInputStreamSink ) ; IO . writeLine ( readerBufferdSink . readLine ( ) ) ; } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } finally { /* Close stream reading objects */ try { if ( readerBufferdSink != null ) { readerBufferdSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } try { if ( readerInputStreamSink != null ) { readerInputStreamSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } try { if ( streamFileInputSink != null ) { streamFileInputSink . close ( ) ; } } catch ( IOException exceptIO ) { IO . logger . log ( Level . WARNING , "Not Empty String" , exceptIO ) ; } } } } } }